{"version":3,"file":"001_ts_simpleTypes.02256af8.js","sources":["../../../../../../src/lib/mocks/typescript/001_ts_simpleTypes.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Simple Types Quiz',\n  description: 'Test your knowledge of TypeScript simple types.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is the TypeScript type for representing a string?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'str',\n            is_correct: false\n          },\n          {\n            label: 'string',\n            is_correct: true\n          },\n          {\n            label: 'text',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which keyword is used to declare a constant in TypeScript?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'let',\n            is_correct: false\n          },\n          {\n            label: 'const',\n            is_correct: true\n          },\n          {\n            label: 'var',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the TypeScript type for representing a boolean value?',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'bool',\n            is_correct: false\n          },\n          {\n            label: 'boolean',\n            is_correct: true\n          },\n          {\n            label: 'truefalse',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which TypeScript type can hold multiple values, such as a list of numbers?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'array',\n            is_correct: false\n          },\n          {\n            label: 'number[]',\n            is_correct: true\n          },\n          {\n            label: 'list',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the TypeScript type for representing a function?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'function',\n            is_correct: false\n          },\n          {\n            label: 'func',\n            is_correct: false\n          },\n          {\n            label: '() => void',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'Which TypeScript type represents a value that can be either a number or a string?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'number|string',\n            is_correct: true\n          },\n          {\n            label: 'mixed',\n            is_correct: false\n          },\n          {\n            label: 'any',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'In TypeScript, how do you declare a variable without specifying its type?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Using the `var` keyword',\n            is_correct: false\n          },\n          {\n            label: 'Using the `let` keyword',\n            is_correct: false\n          },\n          {\n            label: 'Using the `const` keyword',\n            is_correct: false\n          },\n          {\n            label: 'Using the `any` keyword',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'Which TypeScript type represents a value that can be null or undefined?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'null',\n            is_correct: false\n          },\n          {\n            label: 'undefined',\n            is_correct: false\n          },\n          {\n            label: 'null|undefined',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'What is the TypeScript type for representing an object with specific properties?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'object',\n            is_correct: false\n          },\n          {\n            label: 'Record<string, any>',\n            is_correct: false\n          },\n          {\n            label: 'Custom interface/type',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title:\n          'Which TypeScript type can be used to represent a value that is not available yet or an error?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'unknown',\n            is_correct: true\n          },\n          {\n            label: 'undefined',\n            is_correct: false\n          },\n          {\n            label: 'null',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,+BACA,YAAA,kDACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,yDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,MACA,WAAA,EACA,EACA,CACA,MAAA,SACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,6DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,MACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,MACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,6EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,aACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,oFACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gBACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,MACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,4EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0BACA,WAAA,EACA,EACA,CACA,MAAA,0BACA,WAAA,EACA,EACA,CACA,MAAA,4BACA,WAAA,EACA,EACA,CACA,MAAA,0BACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,0EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,iBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mFACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,SACA,WAAA,EACA,EACA,CACA,MAAA,sBACA,WAAA,EACA,EACA,CACA,MAAA,wBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gGAEA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}