{"version":3,"file":"002_ts_specialTypes.b5b91f74.js","sources":["../../../../../../src/lib/mocks/typescript/002_ts_specialTypes.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Special Types Quiz',\n  description: 'Test your knowledge of TypeScript special types.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is the special type for defining a variable that may have a null value?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Nullable',\n            is_correct: false\n          },\n          {\n            label: 'Optional',\n            is_correct: false\n          },\n          {\n            label: 'null',\n            is_correct: false\n          },\n          {\n            label: 'undefined',\n            is_correct: false\n          },\n          {\n            label: 'nullish',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'Which special type represents a collection of unique values?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'UniqueSet',\n            is_correct: false\n          },\n          {\n            label: 'UniqueArray',\n            is_correct: false\n          },\n          {\n            label: 'Tuple',\n            is_correct: false\n          },\n          {\n            label: 'Enum',\n            is_correct: true\n          },\n          {\n            label: 'Record',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What special type is used to represent a function that never returns?',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Void',\n            is_correct: false\n          },\n          {\n            label: 'Never',\n            is_correct: true\n          },\n          {\n            label: 'None',\n            is_correct: false\n          },\n          {\n            label: 'Undefined',\n            is_correct: false\n          },\n          {\n            label: 'Null',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title:\n          'Which special type is used for specifying that a variable can be of multiple types?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Any',\n            is_correct: false\n          },\n          {\n            label: 'Union',\n            is_correct: true\n          },\n          {\n            label: 'Intersection',\n            is_correct: false\n          },\n          {\n            label: 'Variant',\n            is_correct: false\n          },\n          {\n            label: 'Multiple',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which special type represents a property of an object?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Member',\n            is_correct: false\n          },\n          {\n            label: 'Property',\n            is_correct: false\n          },\n          {\n            label: 'Field',\n            is_correct: true\n          },\n          {\n            label: 'Attribute',\n            is_correct: false\n          },\n          {\n            label: 'Variable',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which special type is used for defining the shape of an object?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'ObjectType',\n            is_correct: false\n          },\n          {\n            label: 'ShapeType',\n            is_correct: false\n          },\n          {\n            label: 'Interface',\n            is_correct: true\n          },\n          {\n            label: 'ObjectShape',\n            is_correct: false\n          },\n          {\n            label: 'Struct',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which special type is used for defining a key-value pair object?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Record',\n            is_correct: true\n          },\n          {\n            label: 'Map',\n            is_correct: false\n          },\n          {\n            label: 'Dictionary',\n            is_correct: false\n          },\n          {\n            label: 'KeyValuePair',\n            is_correct: false\n          },\n          {\n            label: 'Object',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which special type is used for defining a variable with a default value?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'DefaultValue',\n            is_correct: false\n          },\n          {\n            label: 'Default',\n            is_correct: false\n          },\n          {\n            label: 'InitialValue',\n            is_correct: false\n          },\n          {\n            label: 'Value',\n            is_correct: false\n          },\n          {\n            label: 'DefaultType',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title:\n          'What is the special type used for representing a value that may be either a specified type or null or undefined?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'NullableType',\n            is_correct: false\n          },\n          {\n            label: 'OptionalType',\n            is_correct: false\n          },\n          {\n            label: 'MixedType',\n            is_correct: false\n          },\n          {\n            label: 'UnknownType',\n            is_correct: false\n          },\n          {\n            label: 'NullableTypeUnion',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title:\n          'What special type represents a value that is the result of a computation that may fail?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Result',\n            is_correct: true\n          },\n          {\n            label: 'Outcome',\n            is_correct: false\n          },\n          {\n            label: 'Error',\n            is_correct: false\n          },\n          {\n            label: 'Fail',\n            is_correct: false\n          },\n          {\n            label: 'Unsafe',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,gCACA,YAAA,mDACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,+EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,UACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,cACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,SACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,wEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,sFAEA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,MACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,yDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,SACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,kEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,aACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,cACA,WAAA,EACA,EACA,CACA,MAAA,SACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,SACA,WAAA,EACA,EACA,CACA,MAAA,MACA,WAAA,EACA,EACA,CACA,MAAA,aACA,WAAA,EACA,EACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,SACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,cACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mHAEA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,cACA,WAAA,EACA,EACA,CACA,MAAA,oBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,0FAEA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,SACA,WAAA,EACA,EACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,SACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}