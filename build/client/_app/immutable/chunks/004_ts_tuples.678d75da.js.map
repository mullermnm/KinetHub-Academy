{"version":3,"file":"004_ts_tuples.678d75da.js","sources":["../../../../../../src/lib/mocks/typescript/004_ts_tuples.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Tuples Quiz',\n  description: 'Test your knowledge of TypeScript tuples.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is a TypeScript tuple?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label:\n              'A data structure that stores a fixed-size collection of elements of mixed types.',\n            is_correct: true\n          },\n          {\n            label: 'A data structure that stores an unlimited number of elements of the same type.',\n            is_correct: false\n          },\n          {\n            label: 'A data structure that stores elements of the same type and size.',\n            is_correct: false\n          },\n          {\n            label:\n              'A data structure that stores elements of mixed types without size restrictions.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'How do you define a tuple type in TypeScript?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Using the `Tuple` keyword',\n            is_correct: false\n          },\n          {\n            label: 'Using the `tuple` keyword',\n            is_correct: true\n          },\n          {\n            label: 'Using the `array` keyword',\n            is_correct: false\n          },\n          {\n            label: 'Using the `list` keyword',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'How can you access elements of a TypeScript tuple?',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'By using the dot notation (e.g., `tuple.0`)',\n            is_correct: false\n          },\n          {\n            label: 'By using square brackets (e.g., `tuple[0]`)',\n            is_correct: true\n          },\n          {\n            label: 'By using parentheses (e.g., `tuple(0)`)',\n            is_correct: false\n          },\n          {\n            label: 'By using the `get` method (e.g., `tuple.get(0)`)',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which of the following statements is true about TypeScript tuples?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Tuples allow elements to be added or removed dynamically.',\n            is_correct: false\n          },\n          {\n            label: 'Tuples can contain elements of different types but must be of fixed size.',\n            is_correct: true\n          },\n          {\n            label: 'Tuples are resizable arrays with dynamic types.',\n            is_correct: false\n          },\n          {\n            label: 'Tuples can only contain elements of the same type.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the correct way to initialize a TypeScript tuple?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'const myTuple: tuple = [1, \"two\", 3]',\n            is_correct: false\n          },\n          {\n            label: 'const myTuple: [number, string, number] = [1, \"two\", 3]',\n            is_correct: true\n          },\n          {\n            label: 'const myTuple: (number, string, number) = [1, \"two\", 3]',\n            is_correct: false\n          },\n          {\n            label: 'const myTuple: tuple<number, string, number> = [1, \"two\", 3]',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'In a TypeScript tuple, what does the number in the tuple type represent?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'The maximum number of elements that the tuple can hold.',\n            is_correct: true\n          },\n          {\n            label: 'The index of the first element in the tuple.',\n            is_correct: false\n          },\n          {\n            label: 'The type of the elements in the tuple.',\n            is_correct: false\n          },\n          {\n            label: 'The size of the tuple in memory.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'How do you update a value in a TypeScript tuple?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'You cannot update values in a tuple; tuples are immutable.',\n            is_correct: true\n          },\n          {\n            label: 'By using the `update` method on the tuple.',\n            is_correct: false\n          },\n          {\n            label: 'By directly assigning a new value to the tuple element.',\n            is_correct: false\n          },\n          {\n            label: 'By using the `set` method on the tuple.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the advantage of using TypeScript tuples over arrays?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Tuples have a dynamic size, making them more flexible.',\n            is_correct: false\n          },\n          {\n            label: 'Tuples allow you to store elements of different types.',\n            is_correct: true\n          },\n          {\n            label: 'Tuples have better performance for iteration.',\n            is_correct: false\n          },\n          {\n            label: 'Tuples provide built-in sorting methods.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Can TypeScript tuples be used to represent key-value pairs?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Yes, by using the `key` and `value` properties of a tuple element.',\n            is_correct: false\n          },\n          {\n            label:\n              'Yes, by using tuples with two elements where the first element is the key and the second element is the value.',\n            is_correct: true\n          },\n          {\n            label: 'No, tuples are not suitable for representing key-value pairs.',\n            is_correct: false\n          },\n          {\n            label: 'No, TypeScript does not support key-value pairs in tuples.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which TypeScript version introduced tuple types?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'TypeScript has always had tuple types.',\n            is_correct: false\n          },\n          {\n            label: 'TypeScript 2.0',\n            is_correct: true\n          },\n          {\n            label: 'TypeScript 3.0',\n            is_correct: false\n          },\n          {\n            label: 'TypeScript 4.0',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,yBACA,YAAA,4CACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,8BACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,mFAEA,WAAA,EACA,EACA,CACA,MAAA,iFACA,WAAA,EACA,EACA,CACA,MAAA,mEACA,WAAA,EACA,EACA,CACA,MAAA,kFAEA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,4BACA,WAAA,EACA,EACA,CACA,MAAA,4BACA,WAAA,EACA,EACA,CACA,MAAA,4BACA,WAAA,EACA,EACA,CACA,MAAA,2BACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,qDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,8CACA,WAAA,EACA,EACA,CACA,MAAA,8CACA,WAAA,EACA,EACA,CACA,MAAA,0CACA,WAAA,EACA,EACA,CACA,MAAA,mDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,qEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,4DACA,WAAA,EACA,EACA,CACA,MAAA,4EACA,WAAA,EACA,EACA,CACA,MAAA,kDACA,WAAA,EACA,EACA,CACA,MAAA,qDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,4DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,uCACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,+CACA,WAAA,EACA,EACA,CACA,MAAA,yCACA,WAAA,EACA,EACA,CACA,MAAA,mCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,6DACA,WAAA,EACA,EACA,CACA,MAAA,6CACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,0CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,yDACA,WAAA,EACA,EACA,CACA,MAAA,yDACA,WAAA,EACA,EACA,CACA,MAAA,gDACA,WAAA,EACA,EACA,CACA,MAAA,2CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,8DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,qEACA,WAAA,EACA,EACA,CACA,MAAA,iHAEA,WAAA,EACA,EACA,CACA,MAAA,gEACA,WAAA,EACA,EACA,CACA,MAAA,6DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mDACA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,yCACA,WAAA,EACA,EACA,CACA,MAAA,iBACA,WAAA,EACA,EACA,CACA,MAAA,iBACA,WAAA,EACA,EACA,CACA,MAAA,iBACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}