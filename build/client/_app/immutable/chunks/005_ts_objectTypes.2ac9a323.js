import{Q as e}from"./15.329399bd.js";import"./index.a2391391.js";(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},r=new Error().stack;r&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[r]="8952d3e7-eb41-4a66-86cd-c756a2380f3d",t._sentryDebugIdIdentifier="sentry-dbid-8952d3e7-eb41-4a66-86cd-c756a2380f3d")}catch{}})();const i={title:"TypeScript Object Types Quiz",description:"Test your knowledge of TypeScript object types.",questionnaire:{questions:[{title:"What is an object type in TypeScript?",name:"q1",points:1,order:1,question_type:e[0],options:[{label:"A type that represents a single value, such as a number or string.",is_correct:!1},{label:"A type that represents a collection of key-value pairs.",is_correct:!0},{label:"A type that represents an array of values.",is_correct:!1},{label:"A type that represents a function.",is_correct:!1}]},{title:"How do you define an object type in TypeScript?",name:"q2",points:1,order:2,question_type:e[0],options:[{label:"Using the `object` keyword.",is_correct:!1},{label:"Using the `type` keyword with key-value pairs.",is_correct:!0},{label:"Using the `class` keyword.",is_correct:!1},{label:"Using the `interface` keyword.",is_correct:!1}]},{title:`What does the following TypeScript object type definition represent?

\`\`\`
type Person = {
  name: string;
  age: number;
};
\`\`\``,name:"q3",points:1,order:3,question_type:e[0],options:[{label:"A function type that takes a name and age as arguments and returns a string.",is_correct:!1},{label:"An object type with properties `name` and `age`, where `name` is a string and `age` is a number.",is_correct:!0},{label:"A class definition for creating `Person` instances.",is_correct:!1},{label:"An array type that contains `Person` objects.",is_correct:!1}]},{title:"What is the purpose of using optional properties in TypeScript object types?",name:"q4",points:1,order:4,question_type:e[0],options:[{label:"To indicate that a property is required and must have a value.",is_correct:!1},{label:"To indicate that a property is optional and may have a value or be undefined.",is_correct:!0},{label:"To indicate that a property should not be accessed.",is_correct:!1},{label:"To indicate that a property is a function.",is_correct:!1}]},{title:"What is the correct way to access properties of an object type in TypeScript?",name:"q5",points:1,order:5,question_type:e[0],options:[{label:"By using the `.` (dot) notation (e.g., `person.name`).",is_correct:!0},{label:'By using square brackets (e.g., `person["name"]`).',is_correct:!1},{label:'By using the `get` method (e.g., `person.get("name")`).',is_correct:!1},{label:'By using parentheses (e.g., `person("name")`).',is_correct:!1}]},{title:"What is an index signature in TypeScript object types?",name:"q6",points:1,order:6,question_type:e[0],options:[{label:"A type that defines the index of an array.",is_correct:!1},{label:"A type that specifies the data type of the keys and the corresponding value data types in an object.",is_correct:!0},{label:"A type that represents the number of properties in an object.",is_correct:!1},{label:"A type that represents the order of properties in an object.",is_correct:!1}]},{title:"Can object types in TypeScript have methods?",name:"q7",points:1,order:7,question_type:e[0],options:[{label:"Yes, object types can have methods defined within them.",is_correct:!0},{label:"No, object types can only have properties but not methods.",is_correct:!1},{label:"Methods in TypeScript are defined separately from object types.",is_correct:!1},{label:"Methods can only be defined in classes, not object types.",is_correct:!1}]},{title:"What is the key difference between an interface and a type alias for defining object types in TypeScript?",name:"q8",points:1,order:8,question_type:e[0],options:[{label:"Interfaces are more flexible and allow for dynamic typing, while type aliases are more rigid.",is_correct:!1},{label:"Interfaces can be extended and implemented, while type aliases cannot.",is_correct:!0},{label:"Type aliases are more powerful and can define complex types, while interfaces are limited.",is_correct:!1},{label:"There is no difference between interfaces and type aliases for defining object types.",is_correct:!1}]},{title:"Which keyword is used to define an optional property in TypeScript object types?",name:"q9",points:1,order:9,question_type:e[0],options:[{label:"The `optional` keyword.",is_correct:!1},{label:"The `maybe` keyword.",is_correct:!1},{label:"The `undefined` keyword.",is_correct:!1},{label:"The `?` (question mark) symbol.",is_correct:!0}]},{title:"What is object destructuring in TypeScript?",name:"q10",points:1,order:10,question_type:e[0],options:[{label:"A process of destroying objects to free up memory.",is_correct:!1},{label:"A way to create new objects from existing objects.",is_correct:!1},{label:"A technique for extracting properties from objects and assigning them to variables.",is_correct:!0},{label:"A method for combining multiple objects into one.",is_correct:!1}]}]}};export{i as default};
//# sourceMappingURL=005_ts_objectTypes.2ac9a323.js.map
