{"version":3,"file":"005_ts_objectTypes.2ac9a323.js","sources":["../../../../../../src/lib/mocks/typescript/005_ts_objectTypes.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Object Types Quiz',\n  description: 'Test your knowledge of TypeScript object types.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is an object type in TypeScript?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A type that represents a single value, such as a number or string.',\n            is_correct: false\n          },\n          {\n            label: 'A type that represents a collection of key-value pairs.',\n            is_correct: true\n          },\n          {\n            label: 'A type that represents an array of values.',\n            is_correct: false\n          },\n          {\n            label: 'A type that represents a function.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'How do you define an object type in TypeScript?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Using the `object` keyword.',\n            is_correct: false\n          },\n          {\n            label: 'Using the `type` keyword with key-value pairs.',\n            is_correct: true\n          },\n          {\n            label: 'Using the `class` keyword.',\n            is_correct: false\n          },\n          {\n            label: 'Using the `interface` keyword.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title:\n          'What does the following TypeScript object type definition represent?\\n\\n```\\ntype Person = {\\n  name: string;\\n  age: number;\\n};\\n```',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A function type that takes a name and age as arguments and returns a string.',\n            is_correct: false\n          },\n          {\n            label:\n              'An object type with properties `name` and `age`, where `name` is a string and `age` is a number.',\n            is_correct: true\n          },\n          {\n            label: 'A class definition for creating `Person` instances.',\n            is_correct: false\n          },\n          {\n            label: 'An array type that contains `Person` objects.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of using optional properties in TypeScript object types?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'To indicate that a property is required and must have a value.',\n            is_correct: false\n          },\n          {\n            label: 'To indicate that a property is optional and may have a value or be undefined.',\n            is_correct: true\n          },\n          {\n            label: 'To indicate that a property should not be accessed.',\n            is_correct: false\n          },\n          {\n            label: 'To indicate that a property is a function.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the correct way to access properties of an object type in TypeScript?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'By using the `.` (dot) notation (e.g., `person.name`).',\n            is_correct: true\n          },\n          {\n            label: 'By using square brackets (e.g., `person[\"name\"]`).',\n            is_correct: false\n          },\n          {\n            label: 'By using the `get` method (e.g., `person.get(\"name\")`).',\n            is_correct: false\n          },\n          {\n            label: 'By using parentheses (e.g., `person(\"name\")`).',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is an index signature in TypeScript object types?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A type that defines the index of an array.',\n            is_correct: false\n          },\n          {\n            label:\n              'A type that specifies the data type of the keys and the corresponding value data types in an object.',\n            is_correct: true\n          },\n          {\n            label: 'A type that represents the number of properties in an object.',\n            is_correct: false\n          },\n          {\n            label: 'A type that represents the order of properties in an object.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Can object types in TypeScript have methods?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Yes, object types can have methods defined within them.',\n            is_correct: true\n          },\n          {\n            label: 'No, object types can only have properties but not methods.',\n            is_correct: false\n          },\n          {\n            label: 'Methods in TypeScript are defined separately from object types.',\n            is_correct: false\n          },\n          {\n            label: 'Methods can only be defined in classes, not object types.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title:\n          'What is the key difference between an interface and a type alias for defining object types in TypeScript?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label:\n              'Interfaces are more flexible and allow for dynamic typing, while type aliases are more rigid.',\n            is_correct: false\n          },\n          {\n            label: 'Interfaces can be extended and implemented, while type aliases cannot.',\n            is_correct: true\n          },\n          {\n            label:\n              'Type aliases are more powerful and can define complex types, while interfaces are limited.',\n            is_correct: false\n          },\n          {\n            label:\n              'There is no difference between interfaces and type aliases for defining object types.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which keyword is used to define an optional property in TypeScript object types?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'The `optional` keyword.',\n            is_correct: false\n          },\n          {\n            label: 'The `maybe` keyword.',\n            is_correct: false\n          },\n          {\n            label: 'The `undefined` keyword.',\n            is_correct: false\n          },\n          {\n            label: 'The `?` (question mark) symbol.',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'What is object destructuring in TypeScript?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A process of destroying objects to free up memory.',\n            is_correct: false\n          },\n          {\n            label: 'A way to create new objects from existing objects.',\n            is_correct: false\n          },\n          {\n            label:\n              'A technique for extracting properties from objects and assigning them to variables.',\n            is_correct: true\n          },\n          {\n            label: 'A method for combining multiple objects into one.',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,+BACA,YAAA,kDACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,wCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,qEACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,6CACA,WAAA,EACA,EACA,CACA,MAAA,qCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,kDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,8BACA,WAAA,EACA,EACA,CACA,MAAA,iDACA,WAAA,EACA,EACA,CACA,MAAA,6BACA,WAAA,EACA,EACA,CACA,MAAA,iCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAEA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,+EACA,WAAA,EACA,EACA,CACA,MAAA,mGAEA,WAAA,EACA,EACA,CACA,MAAA,sDACA,WAAA,EACA,EACA,CACA,MAAA,gDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,iEACA,WAAA,EACA,EACA,CACA,MAAA,gFACA,WAAA,EACA,EACA,CACA,MAAA,sDACA,WAAA,EACA,EACA,CACA,MAAA,6CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gFACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,yDACA,WAAA,EACA,EACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,iDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,yDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,6CACA,WAAA,EACA,EACA,CACA,MAAA,uGAEA,WAAA,EACA,EACA,CACA,MAAA,gEACA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+CACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,6DACA,WAAA,EACA,EACA,CACA,MAAA,kEACA,WAAA,EACA,EACA,CACA,MAAA,4DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,4GAEA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gGAEA,WAAA,EACA,EACA,CACA,MAAA,yEACA,WAAA,EACA,EACA,CACA,MAAA,6FAEA,WAAA,EACA,EACA,CACA,MAAA,wFAEA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mFACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0BACA,WAAA,EACA,EACA,CACA,MAAA,uBACA,WAAA,EACA,EACA,CACA,MAAA,2BACA,WAAA,EACA,EACA,CACA,MAAA,kCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,8CACA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,sFAEA,WAAA,EACA,EACA,CACA,MAAA,oDACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}