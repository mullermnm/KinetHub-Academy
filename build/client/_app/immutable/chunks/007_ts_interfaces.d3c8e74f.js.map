{"version":3,"file":"007_ts_interfaces.d3c8e74f.js","sources":["../../../../../../src/lib/mocks/typescript/007_ts_interfaces.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Aliases and Interfaces Quiz',\n  description: 'Test your knowledge of TypeScript aliases and interfaces.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is an interface in TypeScript?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A way to create custom data types.',\n            is_correct: false\n          },\n          {\n            label: 'A way to implement classes in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'A way to define the structure of an object.',\n            is_correct: true\n          },\n          {\n            label: 'A way to declare variables in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is a type alias in TypeScript?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A way to assign a type to a variable.',\n            is_correct: false\n          },\n          {\n            label: 'A way to create an alias for a type, making it easier to refer to.',\n            is_correct: true\n          },\n          {\n            label: 'A way to create an instance of a class.',\n            is_correct: false\n          },\n          {\n            label: 'A way to define interfaces in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which keyword is used to define an interface in TypeScript?',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'interface',\n            is_correct: true\n          },\n          {\n            label: 'class',\n            is_correct: false\n          },\n          {\n            label: 'type',\n            is_correct: false\n          },\n          {\n            label: 'alias',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'In TypeScript, can a class implement multiple interfaces?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'No, a class can only implement one interface.',\n            is_correct: false\n          },\n          {\n            label: 'Yes, a class can implement multiple interfaces.',\n            is_correct: true\n          },\n          {\n            label: 'Interfaces cannot be implemented by classes in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Classes in TypeScript do not support interfaces.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the benefit of using type aliases in TypeScript?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Type aliases provide better performance than interfaces.',\n            is_correct: false\n          },\n          {\n            label: 'Type aliases are used to create new classes in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Type aliases make it easier to refer to complex types.',\n            is_correct: true\n          },\n          {\n            label: 'Type aliases are used to define interfaces in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Can you add properties to an object using an interface in TypeScript?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'No, interfaces are only used for type checking.',\n            is_correct: true\n          },\n          {\n            label: 'Yes, interfaces can be used to add properties to objects.',\n            is_correct: false\n          },\n          {\n            label: 'Interfaces are not used to work with objects in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Interfaces can only be used with classes in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title:\n          'What is a benefit of using interfaces for function type declarations in TypeScript?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Interfaces are not used for function type declarations in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Interfaces allow you to define the expected function signature.',\n            is_correct: true\n          },\n          {\n            label: 'Interfaces make functions easier to call in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Interfaces add runtime validation to functions in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of an index signature in TypeScript?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Index signatures are not used in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Index signatures define the data types of object properties.',\n            is_correct: false\n          },\n          {\n            label: 'Index signatures allow dynamic property access on objects.',\n            is_correct: true\n          },\n          {\n            label: 'Index signatures are used to create new types in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which keyword is used to define a type alias in TypeScript?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'type',\n            is_correct: true\n          },\n          {\n            label: 'interface',\n            is_correct: false\n          },\n          {\n            label: 'alias',\n            is_correct: false\n          },\n          {\n            label: 'class',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'In TypeScript, can you extend multiple type aliases?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'No, you can only extend one type alias at a time.',\n            is_correct: false\n          },\n          {\n            label: 'Yes, you can extend multiple type aliases in TypeScript.',\n            is_correct: true\n          },\n          {\n            label: 'Type aliases cannot be extended in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'Type aliases can only be extended by classes in TypeScript.',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,yCACA,YAAA,4DACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,sCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,qCACA,WAAA,EACA,EACA,CACA,MAAA,4CACA,WAAA,EACA,EACA,CACA,MAAA,8CACA,WAAA,EACA,EACA,CACA,MAAA,4CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,sCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,wCACA,WAAA,EACA,EACA,CACA,MAAA,qEACA,WAAA,EACA,EACA,CACA,MAAA,0CACA,WAAA,EACA,EACA,CACA,MAAA,4CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,8DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,4DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gDACA,WAAA,EACA,EACA,CACA,MAAA,kDACA,WAAA,EACA,EACA,CACA,MAAA,6DACA,WAAA,EACA,EACA,CACA,MAAA,mDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,2DACA,WAAA,EACA,EACA,CACA,MAAA,6DACA,WAAA,EACA,EACA,CACA,MAAA,yDACA,WAAA,EACA,EACA,CACA,MAAA,4DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,wEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,kDACA,WAAA,EACA,EACA,CACA,MAAA,4DACA,WAAA,EACA,EACA,CACA,MAAA,8DACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,sFAEA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,wEACA,WAAA,EACA,EACA,CACA,MAAA,kEACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,EACA,CACA,MAAA,gEACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,+CACA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,EACA,CACA,MAAA,6DACA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,8DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,OACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,EACA,CACA,MAAA,QACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,uDACA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,oDACA,WAAA,EACA,EACA,CACA,MAAA,2DACA,WAAA,EACA,EACA,CACA,MAAA,iDACA,WAAA,EACA,EACA,CACA,MAAA,8DACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}