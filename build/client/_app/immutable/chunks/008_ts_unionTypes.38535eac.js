import{Q as e}from"./15.329399bd.js";import"./index.a2391391.js";(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},o=new Error().stack;o&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[o]="fb697ef6-42cf-4e02-99cf-502909c4864d",t._sentryDebugIdIdentifier="sentry-dbid-fb697ef6-42cf-4e02-99cf-502909c4864d")}catch{}})();const r={title:"TypeScript Union Types Quiz",description:"Test your knowledge of TypeScript union types.",questionnaire:{questions:[{title:"What are union types used for in TypeScript?",name:"q1",points:1,order:1,question_type:e[0],options:[{label:"To define a type that can be one of several types.",is_correct:!0},{label:"To create a new type by combining two types.",is_correct:!1},{label:"To define a type that must be all types in the union.",is_correct:!1},{label:"Union types are not used in TypeScript.",is_correct:!1}]},{title:"How do you declare a union type in TypeScript?",name:"q2",points:1,order:2,question_type:e[1],options:[{label:"Using the `union` keyword.",is_correct:!1},{label:"Using the `|` symbol between type names.",is_correct:!0},{label:"Using the `&` symbol between type names.",is_correct:!1},{label:"Using the `type` keyword followed by parentheses.",is_correct:!1}]},{title:"What is the result of a union type that includes `null` or `undefined`?",name:"q3",points:1,order:3,question_type:e[0],options:[{label:"The union type cannot include `null` or `undefined`.",is_correct:!1},{label:"It allows the value to be `null`, `undefined`, or any other specified type.",is_correct:!0},{label:"It forces the value to be both `null` and `undefined` simultaneously.",is_correct:!1},{label:"The union type becomes a non-nullable type.",is_correct:!1}]},{title:"Which symbol is used to separate type options in a union type?",name:"q4",points:1,order:4,question_type:e[0],options:[{label:"Comma (,)",is_correct:!1},{label:"Semicolon (;)",is_correct:!1},{label:"Pipe (|)",is_correct:!0},{label:"Ampersand (&)",is_correct:!1}]},{title:"What is a discriminated union in TypeScript?",name:"q5",points:1,order:5,question_type:e[0],options:[{label:"A union type with a single option.",is_correct:!1},{label:"A union type that combines multiple types without discrimination.",is_correct:!1},{label:"A union type where each option has a common property to discriminate between them.",is_correct:!0},{label:"A union type that is only used for numbers.",is_correct:!1}]},{title:"What is the TypeScript keyword for a non-null assertion?",name:"q6",points:1,order:6,question_type:e[0],options:[{label:"NotNull",is_correct:!1},{label:"NonNull",is_correct:!1},{label:"Undefined",is_correct:!1},{label:"!",is_correct:!0}]},{title:"In a union type, can you access properties that are not common to all types?",name:"q7",points:1,order:7,question_type:e[0],options:[{label:"Yes, TypeScript allows accessing all properties in a union type.",is_correct:!1},{label:"No, you can only access properties common to all types in the union.",is_correct:!0},{label:"It depends on the specific property being accessed.",is_correct:!1},{label:"You can access properties of one type but not the others.",is_correct:!1}]},{title:"What does the `as` keyword do in TypeScript union types?",name:"q8",points:1,order:8,question_type:e[0],options:[{label:"It creates a new union type.",is_correct:!1},{label:"It converts a type to a different type in the union.",is_correct:!0},{label:"It enforces strict type checking.",is_correct:!1},{label:"It is used for optional properties.",is_correct:!1}]},{title:"What is the purpose of the `never` type in TypeScript?",name:"q9",points:1,order:9,question_type:e[0],options:[{label:"To define a type that can never have any values.",is_correct:!0},{label:"To define a type for numeric values only.",is_correct:!1},{label:"To create a type that is nullable.",is_correct:!1},{label:"To define a type that can have any value.",is_correct:!1}]},{title:"Can you use TypeScript union types with class constructors?",name:"q10",points:1,order:10,question_type:e[0],options:[{label:"Yes, union types can be used with class constructors.",is_correct:!0},{label:"No, union types are only for primitive types.",is_correct:!1},{label:"Union types are used with interfaces, not classes.",is_correct:!1},{label:"Union types cannot be used with functions or classes.",is_correct:!1}]}]}};export{r as default};
//# sourceMappingURL=008_ts_unionTypes.38535eac.js.map
