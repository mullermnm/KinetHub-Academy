{"version":3,"file":"008_ts_unionTypes.38535eac.js","sources":["../../../../../../src/lib/mocks/typescript/008_ts_unionTypes.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Union Types Quiz',\n  description: 'Test your knowledge of TypeScript union types.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What are union types used for in TypeScript?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'To define a type that can be one of several types.',\n            is_correct: true\n          },\n          {\n            label: 'To create a new type by combining two types.',\n            is_correct: false\n          },\n          {\n            label: 'To define a type that must be all types in the union.',\n            is_correct: false\n          },\n          {\n            label: 'Union types are not used in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'How do you declare a union type in TypeScript?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[1], // CHECKBOX type\n        options: [\n          {\n            label: 'Using the `union` keyword.',\n            is_correct: false\n          },\n          {\n            label: 'Using the `|` symbol between type names.',\n            is_correct: true\n          },\n          {\n            label: 'Using the `&` symbol between type names.',\n            is_correct: false\n          },\n          {\n            label: 'Using the `type` keyword followed by parentheses.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the result of a union type that includes `null` or `undefined`?',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'The union type cannot include `null` or `undefined`.',\n            is_correct: false\n          },\n          {\n            label: 'It allows the value to be `null`, `undefined`, or any other specified type.',\n            is_correct: true\n          },\n          {\n            label: 'It forces the value to be both `null` and `undefined` simultaneously.',\n            is_correct: false\n          },\n          {\n            label: 'The union type becomes a non-nullable type.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which symbol is used to separate type options in a union type?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Comma (,)',\n            is_correct: false\n          },\n          {\n            label: 'Semicolon (;)',\n            is_correct: false\n          },\n          {\n            label: 'Pipe (|)',\n            is_correct: true\n          },\n          {\n            label: 'Ampersand (&)',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is a discriminated union in TypeScript?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A union type with a single option.',\n            is_correct: false\n          },\n          {\n            label: 'A union type that combines multiple types without discrimination.',\n            is_correct: false\n          },\n          {\n            label:\n              'A union type where each option has a common property to discriminate between them.',\n            is_correct: true\n          },\n          {\n            label: 'A union type that is only used for numbers.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the TypeScript keyword for a non-null assertion?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'NotNull',\n            is_correct: false\n          },\n          {\n            label: 'NonNull',\n            is_correct: false\n          },\n          {\n            label: 'Undefined',\n            is_correct: false\n          },\n          {\n            label: '!',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'In a union type, can you access properties that are not common to all types?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Yes, TypeScript allows accessing all properties in a union type.',\n            is_correct: false\n          },\n          {\n            label: 'No, you can only access properties common to all types in the union.',\n            is_correct: true\n          },\n          {\n            label: 'It depends on the specific property being accessed.',\n            is_correct: false\n          },\n          {\n            label: 'You can access properties of one type but not the others.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What does the `as` keyword do in TypeScript union types?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'It creates a new union type.',\n            is_correct: false\n          },\n          {\n            label: 'It converts a type to a different type in the union.',\n            is_correct: true\n          },\n          {\n            label: 'It enforces strict type checking.',\n            is_correct: false\n          },\n          {\n            label: 'It is used for optional properties.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the `never` type in TypeScript?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'To define a type that can never have any values.',\n            is_correct: true\n          },\n          {\n            label: 'To define a type for numeric values only.',\n            is_correct: false\n          },\n          {\n            label: 'To create a type that is nullable.',\n            is_correct: false\n          },\n          {\n            label: 'To define a type that can have any value.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Can you use TypeScript union types with class constructors?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'Yes, union types can be used with class constructors.',\n            is_correct: true\n          },\n          {\n            label: 'No, union types are only for primitive types.',\n            is_correct: false\n          },\n          {\n            label: 'Union types are used with interfaces, not classes.',\n            is_correct: false\n          },\n          {\n            label: 'Union types cannot be used with functions or classes.',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,8BACA,YAAA,iDACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,+CACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,+CACA,WAAA,EACA,EACA,CACA,MAAA,wDACA,WAAA,EACA,EACA,CACA,MAAA,0CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,iDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,6BACA,WAAA,EACA,EACA,CACA,MAAA,2CACA,WAAA,EACA,EACA,CACA,MAAA,2CACA,WAAA,EACA,EACA,CACA,MAAA,oDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,0EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,uDACA,WAAA,EACA,EACA,CACA,MAAA,8EACA,WAAA,EACA,EACA,CACA,MAAA,wEACA,WAAA,EACA,EACA,CACA,MAAA,8CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,iEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,gBACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,gBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+CACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,qCACA,WAAA,EACA,EACA,CACA,MAAA,oEACA,WAAA,EACA,EACA,CACA,MAAA,qFAEA,WAAA,EACA,EACA,CACA,MAAA,8CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,UACA,WAAA,EACA,EACA,CACA,MAAA,YACA,WAAA,EACA,EACA,CACA,MAAA,IACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,mEACA,WAAA,EACA,EACA,CACA,MAAA,uEACA,WAAA,EACA,EACA,CACA,MAAA,sDACA,WAAA,EACA,EACA,CACA,MAAA,4DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,+BACA,WAAA,EACA,EACA,CACA,MAAA,uDACA,WAAA,EACA,EACA,CACA,MAAA,oCACA,WAAA,EACA,EACA,CACA,MAAA,sCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,yDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,mDACA,WAAA,EACA,EACA,CACA,MAAA,4CACA,WAAA,EACA,EACA,CACA,MAAA,qCACA,WAAA,EACA,EACA,CACA,MAAA,4CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,8DACA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,wDACA,WAAA,EACA,EACA,CACA,MAAA,gDACA,WAAA,EACA,EACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,wDACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}