{"version":3,"file":"009_ts_functions.b0f4d390.js","sources":["../../../../../../src/lib/mocks/typescript/009_ts_functions.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Functions Quiz',\n  description: 'Test your knowledge of TypeScript functions.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is a function in TypeScript?',\n        name: 'q1',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A function is a variable in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'A function is a block of code that can be executed and reused.',\n            is_correct: true\n          },\n          {\n            label: 'A function is a type of loop in TypeScript.',\n            is_correct: false\n          },\n          {\n            label: 'A function is a reserved keyword in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the syntax for defining a function in TypeScript?',\n        name: 'q2',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[1], // CHECKBOX type\n        options: [\n          {\n            label: 'function functionName() { }',\n            is_correct: true\n          },\n          {\n            label: 'func functionName() { }',\n            is_correct: false\n          },\n          {\n            label: 'const functionName = () => { }',\n            is_correct: true\n          },\n          {\n            label: 'def functionName() { }',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is a parameter in a function?',\n        name: 'q3',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A parameter is a variable declared inside a function.',\n            is_correct: true\n          },\n          {\n            label: 'A parameter is a function that takes another function as an argument.',\n            is_correct: false\n          },\n          {\n            label: 'A parameter is the return value of a function.',\n            is_correct: false\n          },\n          {\n            label: 'A parameter is a built-in keyword in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the `return` statement in a function?',\n        name: 'q4',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'The `return` statement defines a new function.',\n            is_correct: false\n          },\n          {\n            label: 'The `return` statement is used to exit a loop.',\n            is_correct: false\n          },\n          {\n            label: 'The `return` statement specifies the value that the function will return.',\n            is_correct: true\n          },\n          {\n            label: 'The `return` statement is not used in functions.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is a TypeScript arrow function?',\n        name: 'q5',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'An arrow function is a function with a circular shape.',\n            is_correct: false\n          },\n          {\n            label:\n              'An arrow function is a concise way to write function expressions in TypeScript.',\n            is_correct: true\n          },\n          {\n            label:\n              'An arrow function is a type of function that uses arrows instead of parentheses.',\n            is_correct: false\n          },\n          {\n            label: 'An arrow function is a deprecated feature in TypeScript.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the `this` keyword in a function?',\n        name: 'q6',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'The `this` keyword refers to the function itself.',\n            is_correct: false\n          },\n          {\n            label: 'The `this` keyword refers to the global object.',\n            is_correct: false\n          },\n          {\n            label: 'The `this` keyword refers to the current instance of an object.',\n            is_correct: true\n          },\n          {\n            label: 'The `this` keyword is not used in functions.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is a TypeScript generator function?',\n        name: 'q7',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label: 'A generator function is a function that generates random values.',\n            is_correct: false\n          },\n          {\n            label:\n              'A generator function is a special type of function that can pause and resume its execution.',\n            is_correct: true\n          },\n          {\n            label: 'A generator function is a function that generates HTML code.',\n            is_correct: false\n          },\n          {\n            label: 'A generator function is not a valid TypeScript feature.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the `yield` keyword in a generator function?',\n        name: 'q8',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO type\n        options: [\n          {\n            label:\n              'The `yield` keyword is used to yield control back to the caller of the generator function.',\n            is_correct: true\n          },\n          {\n            label: 'The `yield` keyword is used to terminate the generator function.',\n            is_correct: false\n          },\n          {\n            label: 'The `yield` keyword has no specific purpose in generator functions.',\n            is_correct: false\n          },\n          {\n            label:\n              'The `yield` keyword is used to specify the return value of the generator function.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Can a TypeScript function have multiple return statements?',\n        name: 'q9',\n        points: 1,\n        order: 9,\n        question_type: QuestionTypes[1], // CHECKBOX type\n        options: [\n          {\n            label: 'Yes, a function can have multiple return statements.',\n            is_correct: true\n          },\n          {\n            label: 'No, a function can only have one return statement.',\n            is_correct: false\n          },\n          {\n            label: 'It depends on the type of function.',\n            is_correct: false\n          },\n          {\n            label: 'Multiple return statements are only allowed in arrow functions.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is function overloading in TypeScript?',\n        name: 'q10',\n        points: 1,\n        order: 10,\n        question_type: QuestionTypes[2], // TEXTAREA type\n        options: [] // No options for TEXTAREA type\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,4BACA,YAAA,+CACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,oCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0CACA,WAAA,EACA,EACA,CACA,MAAA,iEACA,WAAA,EACA,EACA,CACA,MAAA,8CACA,WAAA,EACA,EACA,CACA,MAAA,kDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,4DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,8BACA,WAAA,EACA,EACA,CACA,MAAA,0BACA,WAAA,EACA,EACA,CACA,MAAA,iCACA,WAAA,EACA,EACA,CACA,MAAA,yBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,qCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,wDACA,WAAA,EACA,EACA,CACA,MAAA,wEACA,WAAA,EACA,EACA,CACA,MAAA,iDACA,WAAA,EACA,EACA,CACA,MAAA,mDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,iDACA,WAAA,EACA,EACA,CACA,MAAA,iDACA,WAAA,EACA,EACA,CACA,MAAA,4EACA,WAAA,EACA,EACA,CACA,MAAA,mDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,uCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,yDACA,WAAA,EACA,EACA,CACA,MAAA,kFAEA,WAAA,EACA,EACA,CACA,MAAA,mFAEA,WAAA,EACA,EACA,CACA,MAAA,2DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,oDACA,WAAA,EACA,EACA,CACA,MAAA,kDACA,WAAA,EACA,EACA,CACA,MAAA,kEACA,WAAA,EACA,EACA,CACA,MAAA,+CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2CACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,mEACA,WAAA,EACA,EACA,CACA,MAAA,8FAEA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,EACA,CACA,MAAA,0DACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,sEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,6FAEA,WAAA,EACA,EACA,CACA,MAAA,mEACA,WAAA,EACA,EACA,CACA,MAAA,sEACA,WAAA,EACA,EACA,CACA,MAAA,qFAEA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,6DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,uDACA,WAAA,EACA,EACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,sCACA,WAAA,EACA,EACA,CACA,MAAA,kEACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,8CACA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CAAA,CACA,CACA,CACA,CAEA"}