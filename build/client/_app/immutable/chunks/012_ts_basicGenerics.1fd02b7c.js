import{Q as e}from"./15.329399bd.js";import"./index.a2391391.js";(function(){try{var t=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},r=new Error().stack;r&&(t._sentryDebugIds=t._sentryDebugIds||{},t._sentryDebugIds[r]="3027efa8-0534-4244-99e7-332413abc36d",t._sentryDebugIdIdentifier="sentry-dbid-3027efa8-0534-4244-99e7-332413abc36d")}catch{}})();const a={title:"TypeScript Generics Quiz",description:"Test your knowledge of TypeScript generics!",questionnaire:{questions:[{title:"What are generics in TypeScript?",name:"q1",points:2,order:1,question_type:e[0],options:[{label:"A type of fruit",is_correct:!1},{label:"A way to make functions and classes more reusable",is_correct:!0},{label:"A type of loop",is_correct:!1}]},{title:"How do you declare a generic type parameter in TypeScript?",name:"q2",points:2,order:2,question_type:e[0],options:[{label:"<T>",is_correct:!0},{label:"[T]",is_correct:!1},{label:"{T}",is_correct:!1}]},{title:"What is the purpose of generics in TypeScript?",name:"q3",points:2,order:3,question_type:e[0],options:[{label:"To specify the return type of a function",is_correct:!1},{label:"To create reusable functions and classes that work with different types",is_correct:!0},{label:"To define the structure of an object",is_correct:!1}]},{title:"How do you use a generic type parameter in a function in TypeScript?",name:"q4",points:2,order:4,question_type:e[0],options:[{label:"By enclosing it in square brackets like [T]",is_correct:!1},{label:"By enclosing it in angle brackets like <T>",is_correct:!0},{label:"By using curly braces like {T}",is_correct:!1}]},{title:"What is the purpose of specifying a generic type constraint in TypeScript?",name:"q5",points:2,order:5,question_type:e[1],options:[{label:"To limit the types that can be used with the generic",is_correct:!0},{label:"To allow any type to be used with the generic",is_correct:!1},{label:"To specify the default type for the generic",is_correct:!1}]},{title:"How do you declare a generic class in TypeScript?",name:"q6",points:2,order:6,question_type:e[0],options:[{label:"class MyClass<T> {}",is_correct:!0},{label:"interface MyClass<T> {}",is_correct:!1},{label:"type MyClass<T> = {};",is_correct:!1}]},{title:'What is the purpose of the "extends" keyword in a generic type constraint?',name:"q7",points:2,order:7,question_type:e[1],options:[{label:"To specify a type that the generic type parameter must extend",is_correct:!0},{label:"To specify a type that the generic type parameter must be equal to",is_correct:!1},{label:"To specify a type that the generic type parameter must not extend",is_correct:!1}]},{title:"Can you use generics with TypeScript arrays?",name:"q8",points:2,order:8,question_type:e[0],options:[{label:"No, generics can only be used with classes",is_correct:!1},{label:"Yes, you can create generic arrays",is_correct:!0}]},{title:"What is the benefit of using generics with TypeScript arrays?",name:"q9",points:2,order:9,question_type:e[1],options:[{label:"Allows you to specify the type of elements in the array",is_correct:!0},{label:"Makes arrays faster",is_correct:!1},{label:"Prevents you from using arrays",is_correct:!1}]},{title:"What is the syntax for using generics with TypeScript functions?",name:"q10",points:2,order:10,question_type:e[0],options:[{label:"function myFunction<T>() {}",is_correct:!0},{label:"function myFunction: <T>() => {}",is_correct:!1},{label:"function myFunction => <T>() {}",is_correct:!1}]}]}};export{a as default};
//# sourceMappingURL=012_ts_basicGenerics.1fd02b7c.js.map
