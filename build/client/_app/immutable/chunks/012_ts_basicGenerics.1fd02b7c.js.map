{"version":3,"file":"012_ts_basicGenerics.1fd02b7c.js","sources":["../../../../../../src/lib/mocks/typescript/012_ts_basicGenerics.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'TypeScript Generics Quiz',\n  description: 'Test your knowledge of TypeScript generics!',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What are generics in TypeScript?',\n        name: 'q1',\n        points: 2,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: 'A type of fruit', is_correct: false },\n          { label: 'A way to make functions and classes more reusable', is_correct: true },\n          { label: 'A type of loop', is_correct: false }\n        ]\n      },\n      {\n        title: 'How do you declare a generic type parameter in TypeScript?',\n        name: 'q2',\n        points: 2,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: '<T>', is_correct: true },\n          { label: '[T]', is_correct: false },\n          { label: '{T}', is_correct: false }\n        ]\n      },\n      {\n        title: 'What is the purpose of generics in TypeScript?',\n        name: 'q3',\n        points: 2,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: 'To specify the return type of a function', is_correct: false },\n          {\n            label: 'To create reusable functions and classes that work with different types',\n            is_correct: true\n          },\n          { label: 'To define the structure of an object', is_correct: false }\n        ]\n      },\n      {\n        title: 'How do you use a generic type parameter in a function in TypeScript?',\n        name: 'q4',\n        points: 2,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: 'By enclosing it in square brackets like [T]', is_correct: false },\n          { label: 'By enclosing it in angle brackets like <T>', is_correct: true },\n          { label: 'By using curly braces like {T}', is_correct: false }\n        ]\n      },\n      {\n        title: 'What is the purpose of specifying a generic type constraint in TypeScript?',\n        name: 'q5',\n        points: 2,\n        order: 5,\n        question_type: QuestionTypes[1], // CHECKBOX\n        options: [\n          { label: 'To limit the types that can be used with the generic', is_correct: true },\n          { label: 'To allow any type to be used with the generic', is_correct: false },\n          { label: 'To specify the default type for the generic', is_correct: false }\n        ]\n      },\n      {\n        title: 'How do you declare a generic class in TypeScript?',\n        name: 'q6',\n        points: 2,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: 'class MyClass<T> {}', is_correct: true },\n          { label: 'interface MyClass<T> {}', is_correct: false },\n          { label: 'type MyClass<T> = {};', is_correct: false }\n        ]\n      },\n      {\n        title: 'What is the purpose of the \"extends\" keyword in a generic type constraint?',\n        name: 'q7',\n        points: 2,\n        order: 7,\n        question_type: QuestionTypes[1], // CHECKBOX\n        options: [\n          {\n            label: 'To specify a type that the generic type parameter must extend',\n            is_correct: true\n          },\n          {\n            label: 'To specify a type that the generic type parameter must be equal to',\n            is_correct: false\n          },\n          {\n            label: 'To specify a type that the generic type parameter must not extend',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Can you use generics with TypeScript arrays?',\n        name: 'q8',\n        points: 2,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: 'No, generics can only be used with classes', is_correct: false },\n          { label: 'Yes, you can create generic arrays', is_correct: true }\n        ]\n      },\n      {\n        title: 'What is the benefit of using generics with TypeScript arrays?',\n        name: 'q9',\n        points: 2,\n        order: 9,\n        question_type: QuestionTypes[1], // CHECKBOX\n        options: [\n          { label: 'Allows you to specify the type of elements in the array', is_correct: true },\n          { label: 'Makes arrays faster', is_correct: false },\n          { label: 'Prevents you from using arrays', is_correct: false }\n        ]\n      },\n      {\n        title: 'What is the syntax for using generics with TypeScript functions?',\n        name: 'q10',\n        points: 2,\n        order: 10,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          { label: 'function myFunction<T>() {}', is_correct: true },\n          { label: 'function myFunction: <T>() => {}', is_correct: false },\n          { label: 'function myFunction => <T>() {}', is_correct: false }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,2BACA,YAAA,8CACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,mCACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,kBAAA,WAAA,EAAA,EACA,CAAA,MAAA,oDAAA,WAAA,EAAA,EACA,CAAA,MAAA,iBAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,6DACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,MAAA,WAAA,EAAA,EACA,CAAA,MAAA,MAAA,WAAA,EAAA,EACA,CAAA,MAAA,MAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,iDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,2CAAA,WAAA,EAAA,EACA,CACA,MAAA,0EACA,WAAA,EACA,EACA,CAAA,MAAA,uCAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,uEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,8CAAA,WAAA,EAAA,EACA,CAAA,MAAA,6CAAA,WAAA,EAAA,EACA,CAAA,MAAA,iCAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,6EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,uDAAA,WAAA,EAAA,EACA,CAAA,MAAA,gDAAA,WAAA,EAAA,EACA,CAAA,MAAA,8CAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,oDACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,sBAAA,WAAA,EAAA,EACA,CAAA,MAAA,0BAAA,WAAA,EAAA,EACA,CAAA,MAAA,wBAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,6EACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gEACA,WAAA,EACA,EACA,CACA,MAAA,qEACA,WAAA,EACA,EACA,CACA,MAAA,oEACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,+CACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,6CAAA,WAAA,EAAA,EACA,CAAA,MAAA,qCAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,gEACA,KAAA,KACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,0DAAA,WAAA,EAAA,EACA,CAAA,MAAA,sBAAA,WAAA,EAAA,EACA,CAAA,MAAA,iCAAA,WAAA,EAAA,CACA,CACA,EACA,CACA,MAAA,mEACA,KAAA,MACA,OAAA,EACA,MAAA,GACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CAAA,MAAA,8BAAA,WAAA,EAAA,EACA,CAAA,MAAA,mCAAA,WAAA,EAAA,EACA,CAAA,MAAA,kCAAA,WAAA,EAAA,CACA,CACA,CACA,CACA,CAEA"}