{"version":3,"file":"014_react_conditionals.31c3af35.js","sources":["../../../../../../src/lib/mocks/react/014_react_conditionals.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'React Conditional Rendering Practical Quiz',\n  description: 'Test your practical knowledge of conditional rendering in React.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'How can you conditionally render content in React?',\n        name: 'conditionalRendering',\n        points: 1,\n        order: 0,\n        question_type: QuestionTypes[0],\n        options: [\n          {\n            label: 'Using conditional statements (if-else).',\n            is_correct: true\n          },\n          {\n            label: 'Always rendering all content.',\n            is_correct: false\n          },\n          {\n            label: 'Using randomization.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the \"ternary operator\" in conditional rendering?',\n        name: 'ternaryOperatorPurpose',\n        points: 1,\n        order: 1,\n        question_type: QuestionTypes[2],\n        options: []\n      },\n      {\n        title:\n          'How would you conditionally render \"ComponentA\" if a condition is true and \"ComponentB\" if the condition is false?',\n        name: 'conditionalRenderingComponents',\n        points: 1,\n        order: 2,\n        question_type: QuestionTypes[0],\n        options: [\n          {\n            label: '{condition ? <ComponentA /> : <ComponentB />}',\n            is_correct: true\n          },\n          {\n            label: '<ComponentA /> || <ComponentB />',\n            is_correct: false\n          },\n          {\n            label: '<ComponentA /> && <ComponentB />',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'In React, how do you conditionally render content based on the state?',\n        name: 'conditionalRenderingState',\n        points: 1,\n        order: 3,\n        question_type: QuestionTypes[0],\n        options: [\n          {\n            label: 'Using the \"setState\" method.',\n            is_correct: true\n          },\n          {\n            label: 'By directly modifying the state object.',\n            is_correct: false\n          },\n          {\n            label: 'State cannot be used for conditional rendering.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title:\n          'What is the purpose of the \"map\" function in conditional rendering with lists in React?',\n        name: 'mapFunctionPurpose',\n        points: 1,\n        order: 4,\n        question_type: QuestionTypes[2],\n        options: []\n      },\n      {\n        title: 'How do you conditionally render a list of items in React using the \"map\" function?',\n        name: 'conditionalRenderingList',\n        points: 1,\n        order: 5,\n        question_type: QuestionTypes[0],\n        options: [\n          {\n            label: '{items.map(item => <ItemComponent key={item.id} />)}',\n            is_correct: true\n          },\n          {\n            label: '{items.forEach(item => <ItemComponent />)}',\n            is_correct: false\n          },\n          {\n            label: '{items.render(item => <ItemComponent />)}',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'How can you conditionally render content based on user input in a form?',\n        name: 'conditionalRenderingForm',\n        points: 1,\n        order: 6,\n        question_type: QuestionTypes[1],\n        options: [\n          {\n            label: 'Using event handlers and state changes.',\n            is_correct: true\n          },\n          {\n            label: 'By hardcoding the content in the form.',\n            is_correct: false\n          },\n          {\n            label: 'By using server-side logic only.',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of conditional rendering in a React form?',\n        name: 'conditionalRenderingFormPurpose',\n        points: 1,\n        order: 7,\n        question_type: QuestionTypes[2],\n        options: []\n      },\n      {\n        title:\n          'How would you conditionally render a component \"ErrorMessage\" if a form input is invalid?',\n        name: 'conditionalRenderingInvalidInput',\n        points: 1,\n        order: 8,\n        question_type: QuestionTypes[0],\n        options: [\n          {\n            label: '{isInvalid ? <ErrorMessage /> : null}',\n            is_correct: true\n          },\n          {\n            label: '{!isInvalid && <ErrorMessage />}',\n            is_correct: false\n          },\n          {\n            label: '{isInvalid && <ErrorMessage />}',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Explain briefly why conditional rendering is important in React applications.',\n        name: 'conditionalRenderingImportance',\n        points: 5,\n        order: 9,\n        question_type: QuestionTypes[2],\n        options: []\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,6CACA,YAAA,mEACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,qDACA,KAAA,uBACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0CACA,WAAA,EACA,EACA,CACA,MAAA,gCACA,WAAA,EACA,EACA,CACA,MAAA,uBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,0EACA,KAAA,yBACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CAAA,CACA,EACA,CACA,MAAA,qHAEA,KAAA,iCACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gDACA,WAAA,EACA,EACA,CACA,MAAA,mCACA,WAAA,EACA,EACA,CACA,MAAA,mCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,wEACA,KAAA,4BACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,+BACA,WAAA,EACA,EACA,CACA,MAAA,0CACA,WAAA,EACA,EACA,CACA,MAAA,kDACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,0FAEA,KAAA,qBACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CAAA,CACA,EACA,CACA,MAAA,qFACA,KAAA,2BACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,uDACA,WAAA,EACA,EACA,CACA,MAAA,6CACA,WAAA,EACA,EACA,CACA,MAAA,4CACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,0EACA,KAAA,2BACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,0CACA,WAAA,EACA,EACA,CACA,MAAA,yCACA,WAAA,EACA,EACA,CACA,MAAA,mCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gEACA,KAAA,kCACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CAAA,CACA,EACA,CACA,MAAA,4FAEA,KAAA,mCACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,wCACA,WAAA,EACA,EACA,CACA,MAAA,mCACA,WAAA,EACA,EACA,CACA,MAAA,kCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,gFACA,KAAA,iCACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CAAA,CACA,CACA,CACA,CAEA"}