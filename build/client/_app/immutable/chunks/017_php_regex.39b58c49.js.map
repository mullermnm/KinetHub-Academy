{"version":3,"file":"017_php_regex.39b58c49.js","sources":["../../../../../../src/lib/mocks/php/017_php_regex.ts"],"sourcesContent":["import { QuestionTypes } from '../utils';\n\nimport type { ExerciseTemplate } from '$lib/utils/types';\n\nconst template: ExerciseTemplate = {\n  title: 'PHP Regular Expressions Quiz',\n  description: 'Test your knowledge of regular expressions in PHP.',\n  questionnaire: {\n    questions: [\n      {\n        title: 'What is the purpose of regular expressions in PHP?',\n        name: 'question1',\n        points: 2,\n        order: 0,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'To manipulate arrays',\n            is_correct: false\n          },\n          {\n            label: 'To perform pattern matching on strings',\n            is_correct: true\n          },\n          {\n            label: 'To create databases',\n            is_correct: false\n          },\n          {\n            label: 'To define classes and objects',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which PHP function is used to perform a regular expression match?',\n        name: 'question2',\n        points: 2,\n        order: 1,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'strpos()',\n            is_correct: false\n          },\n          {\n            label: 'preg_match()',\n            is_correct: true\n          },\n          {\n            label: 'substr()',\n            is_correct: false\n          },\n          {\n            label: 'str_replace()',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'In a regular expression, what does the caret (^) symbol represent?',\n        name: 'question3',\n        points: 2,\n        order: 2,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'The start of a line or string',\n            is_correct: true\n          },\n          {\n            label: 'The end of a line or string',\n            is_correct: false\n          },\n          {\n            label: 'A wildcard character',\n            is_correct: false\n          },\n          {\n            label: 'An optional character',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title:\n          'Which regular expression modifier is used in PHP to perform a case-insensitive match?',\n        name: 'question4',\n        points: 2,\n        order: 3,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'i',\n            is_correct: true\n          },\n          {\n            label: 'm',\n            is_correct: false\n          },\n          {\n            label: 's',\n            is_correct: false\n          },\n          {\n            label: 'x',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the quantifier \"+\" in a regular expression?',\n        name: 'question5',\n        points: 2,\n        order: 4,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'To match zero or one occurrence of the preceding character',\n            is_correct: false\n          },\n          {\n            label: 'To match zero or more occurrences of the preceding character',\n            is_correct: false\n          },\n          {\n            label: 'To match one or more occurrences of the preceding character',\n            is_correct: true\n          },\n          {\n            label: 'To match a specific number of occurrences of the preceding character',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What is the purpose of the backslash () in a regular expression?',\n        name: 'question6',\n        points: 2,\n        order: 5,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'To escape a special character',\n            is_correct: true\n          },\n          {\n            label: 'To represent a wildcard character',\n            is_correct: false\n          },\n          {\n            label: 'To indicate the end of a line',\n            is_correct: false\n          },\n          {\n            label: 'To define a character class',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which PHP function is used to replace text based on a regular expression?',\n        name: 'question7',\n        points: 2,\n        order: 6,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'preg_match()',\n            is_correct: false\n          },\n          {\n            label: 'preg_replace()',\n            is_correct: true\n          },\n          {\n            label: 'strpos()',\n            is_correct: false\n          },\n          {\n            label: 'str_replace()',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'What does the metacharacter \".\" (dot) represent in a regular expression?',\n        name: 'question8',\n        points: 2,\n        order: 7,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'Any character except a newline',\n            is_correct: true\n          },\n          {\n            label: 'A numeric digit',\n            is_correct: false\n          },\n          {\n            label: 'A whitespace character',\n            is_correct: false\n          },\n          {\n            label: 'The start of a line or string',\n            is_correct: false\n          }\n        ]\n      },\n      {\n        title: 'Which PHP function is used to perform a global regular expression match?',\n        name: 'question9',\n        points: 2,\n        order: 8,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'preg_match()',\n            is_correct: false\n          },\n          {\n            label: 'preg_replace()',\n            is_correct: false\n          },\n          {\n            label: 'preg_grep()',\n            is_correct: false\n          },\n          {\n            label: 'preg_match_all()',\n            is_correct: true\n          }\n        ]\n      },\n      {\n        title: 'What is a capture group in a regular expression?',\n        name: 'question10',\n        points: 2,\n        order: 9,\n        question_type: QuestionTypes[0], // RADIO\n        options: [\n          {\n            label: 'A way to exclude characters from matching',\n            is_correct: false\n          },\n          {\n            label: 'A way to capture and remember a matched portion of the input',\n            is_correct: true\n          },\n          {\n            label: 'A way to specify a required character in the input',\n            is_correct: false\n          },\n          {\n            label: 'A way to match any character',\n            is_correct: false\n          }\n        ]\n      }\n    ]\n  }\n};\n\nexport default template;\n"],"names":["template","QuestionTypes"],"mappings":"wXAIA,MAAAA,EAAA,CAAA,MAAA,+BACA,YAAA,qDACA,cAAA,CACA,UAAA,CACA,CACA,MAAA,qDACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAC,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,uBACA,WAAA,EACA,EACA,CACA,MAAA,yCACA,WAAA,EACA,EACA,CACA,MAAA,sBACA,WAAA,EACA,EACA,CACA,MAAA,gCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,oEACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,gBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,qEACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gCACA,WAAA,EACA,EACA,CACA,MAAA,8BACA,WAAA,EACA,EACA,CACA,MAAA,uBACA,WAAA,EACA,EACA,CACA,MAAA,wBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,wFAEA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,IACA,WAAA,EACA,EACA,CACA,MAAA,IACA,WAAA,EACA,EACA,CACA,MAAA,IACA,WAAA,EACA,EACA,CACA,MAAA,IACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,qEACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,6DACA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,EACA,CACA,MAAA,8DACA,WAAA,EACA,EACA,CACA,MAAA,uEACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mEACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,gCACA,WAAA,EACA,EACA,CACA,MAAA,oCACA,WAAA,EACA,EACA,CACA,MAAA,gCACA,WAAA,EACA,EACA,CACA,MAAA,8BACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,4EACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,iBACA,WAAA,EACA,EACA,CACA,MAAA,WACA,WAAA,EACA,EACA,CACA,MAAA,gBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2EACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,iCACA,WAAA,EACA,EACA,CACA,MAAA,kBACA,WAAA,EACA,EACA,CACA,MAAA,yBACA,WAAA,EACA,EACA,CACA,MAAA,gCACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,2EACA,KAAA,YACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,eACA,WAAA,EACA,EACA,CACA,MAAA,iBACA,WAAA,EACA,EACA,CACA,MAAA,cACA,WAAA,EACA,EACA,CACA,MAAA,mBACA,WAAA,EACA,CACA,CACA,EACA,CACA,MAAA,mDACA,KAAA,aACA,OAAA,EACA,MAAA,EACA,cAAAA,EAAA,CAAA,EACA,QAAA,CACA,CACA,MAAA,4CACA,WAAA,EACA,EACA,CACA,MAAA,+DACA,WAAA,EACA,EACA,CACA,MAAA,qDACA,WAAA,EACA,EACA,CACA,MAAA,+BACA,WAAA,EACA,CACA,CACA,CACA,CACA,CAEA"}