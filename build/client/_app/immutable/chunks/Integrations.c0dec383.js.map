{"version":3,"file":"Integrations.c0dec383.js","sources":["../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/Tabs/Tabs.svelte","../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/Tabs/Tab.svelte","../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/Tabs/TabContent.svelte","../../../../../../src/lib/utils/functions/generateUUID.ts","../../../../../../src/lib/components/Org/Settings/LanguagePicker.svelte","../../../../../../src/lib/components/Org/Settings/Integrations.svelte"],"sourcesContent":["<script>\n  /** Specify the selected tab index */\n  export let selected = 0;\n\n  /**\n   * Specify the type of tabs\n   * @type {\"default\" | \"container\"}\n   */\n  export let type = \"default\";\n\n  /** Set to `true` for tabs to have an auto-width */\n  export let autoWidth = false;\n\n  /**\n   * Specify the ARIA label for the chevron icon\n   * @type {string}\n   */\n  export let iconDescription = \"Show menu options\";\n\n  /** Specify the tab trigger href attribute */\n  export let triggerHref = \"#\";\n\n  import { createEventDispatcher, afterUpdate, setContext, tick } from \"svelte\";\n  import { writable, derived } from \"svelte/store\";\n  import ChevronDown from \"../icons/ChevronDown.svelte\";\n\n  const dispatch = createEventDispatcher();\n\n  const tabs = writable([]);\n  const tabsById = derived(tabs, (_) =>\n    _.reduce((a, c) => ({ ...a, [c.id]: c }), {})\n  );\n  const useAutoWidth = writable(autoWidth);\n  const selectedTab = writable(undefined);\n  const content = writable([]);\n  const contentById = derived(content, (_) =>\n    _.reduce((a, c) => ({ ...a, [c.id]: c }), {})\n  );\n  const selectedContent = writable(undefined);\n\n  let refTabList = null;\n\n  setContext(\"Tabs\", {\n    tabs,\n    contentById,\n    selectedTab,\n    selectedContent,\n    useAutoWidth,\n    add: (data) => {\n      tabs.update((_) => [..._, { ...data, index: _.length }]);\n    },\n    addContent: (data) => {\n      content.update((_) => [..._, { ...data, index: _.length }]);\n    },\n    update: (id) => {\n      currentIndex = $tabsById[id].index;\n    },\n    change: async (direction) => {\n      let index = currentIndex + direction;\n\n      if (index < 0) {\n        index = $tabs.length - 1;\n      } else if (index >= $tabs.length) {\n        index = 0;\n      }\n\n      let disabled = $tabs[index].disabled;\n\n      while (disabled) {\n        index = index + direction;\n\n        if (index < 0) {\n          index = $tabs.length - 1;\n        } else if (index >= $tabs.length) {\n          index = 0;\n        }\n\n        disabled = $tabs[index].disabled;\n      }\n\n      currentIndex = index;\n\n      await tick();\n      const activeTab =\n        refTabList?.querySelectorAll(\"[role='tab']\")[currentIndex];\n      activeTab?.focus();\n    },\n  });\n\n  afterUpdate(() => {\n    selected = currentIndex;\n\n    if (prevIndex > -1 && prevIndex !== currentIndex) {\n      dispatch(\"change\", currentIndex);\n    }\n\n    prevIndex = currentIndex;\n  });\n\n  let dropdownHidden = true;\n  let currentIndex = selected;\n  let prevIndex = -1;\n\n  $: currentIndex = selected;\n  $: currentTab = $tabs[currentIndex] || undefined;\n  $: currentContent = $content[currentIndex] || undefined;\n  $: {\n    if (currentTab) {\n      selectedTab.set(currentTab.id);\n    }\n\n    if (currentContent) {\n      selectedContent.set(currentContent.id);\n    }\n  }\n  $: if ($selectedTab) {\n    dropdownHidden = true;\n  }\n  $: useAutoWidth.set(autoWidth);\n</script>\n\n<div\n  role=\"navigation\"\n  class:bx--tabs=\"{true}\"\n  class:bx--tabs--container=\"{type === 'container'}\"\n  {...$$restProps}\n>\n  <div\n    role=\"listbox\"\n    tabindex=\"0\"\n    class:bx--tabs-trigger=\"{true}\"\n    aria-label=\"{$$props['aria-label'] || 'listbox'}\"\n    on:click=\"{() => {\n      dropdownHidden = !dropdownHidden;\n    }}\"\n    on:keypress\n    on:keypress=\"{() => {\n      dropdownHidden = !dropdownHidden;\n    }}\"\n  >\n    <a\n      tabindex=\"-1\"\n      class:bx--tabs-trigger-text=\"{true}\"\n      href=\"{triggerHref}\"\n      on:click|preventDefault\n      on:click|preventDefault|stopPropagation=\"{() => {\n        dropdownHidden = !dropdownHidden;\n      }}\"\n    >\n      {#if currentTab}{currentTab.label}{/if}\n    </a>\n    <ChevronDown aria-hidden=\"true\" title=\"{iconDescription}\" />\n  </div>\n  <!-- svelte-ignore a11y-no-noninteractive-element-to-interactive-role -->\n  <ul\n    bind:this=\"{refTabList}\"\n    role=\"tablist\"\n    class:bx--tabs__nav=\"{true}\"\n    class:bx--tabs__nav--hidden=\"{dropdownHidden}\"\n  >\n    <slot />\n  </ul>\n</div>\n<slot name=\"content\" />\n","<script>\n  /**\n   * Specify the tab label.\n   * Alternatively, use the default slot (e.g., `<Tab><span>Label</span></Tab>`)\n   */\n  export let label = \"\";\n\n  /** Specify the href attribute */\n  export let href = \"#\";\n\n  /** Set to `true` to disable the tab */\n  export let disabled = false;\n\n  /** Specify the tabindex */\n  export let tabindex = \"0\";\n\n  /** Set an id for the top-level element */\n  export let id = \"ccs-\" + Math.random().toString(36);\n\n  /** Obtain a reference to the anchor HTML element */\n  export let ref = null;\n\n  import { getContext } from \"svelte\";\n\n  const { selectedTab, useAutoWidth, add, update, change } = getContext(\"Tabs\");\n\n  add({ id, label, disabled });\n\n  $: selected = $selectedTab === id;\n</script>\n\n<!-- svelte-ignore a11y-mouse-events-have-key-events -->\n<li\n  tabindex=\"-1\"\n  role=\"presentation\"\n  class:bx--tabs__nav-item=\"{true}\"\n  class:bx--tabs__nav-item--disabled=\"{disabled}\"\n  class:bx--tabs__nav-item--selected=\"{selected}\"\n  {...$$restProps}\n  on:click|preventDefault\n  on:click|preventDefault=\"{() => {\n    if (!disabled) {\n      update(id);\n    }\n  }}\"\n  on:mouseover\n  on:mouseenter\n  on:mouseleave\n  on:keydown=\"{({ key }) => {\n    if (!disabled) {\n      if (key === 'ArrowRight') {\n        change(1);\n      } else if (key === 'ArrowLeft') {\n        change(-1);\n      } else if (key === ' ' || key === 'Enter') {\n        update(id);\n      }\n    }\n  }}\"\n>\n  <a\n    bind:this=\"{ref}\"\n    role=\"tab\"\n    tabindex=\"{disabled ? '-1' : tabindex}\"\n    aria-selected=\"{selected}\"\n    aria-disabled=\"{disabled}\"\n    id=\"{id}\"\n    href=\"{href}\"\n    class:bx--tabs__nav-link=\"{true}\"\n    style:width=\"{$useAutoWidth ? \"auto\" : undefined}\"\n  >\n    <slot>{label}</slot>\n  </a>\n</li>\n","<script>\n  /** Set an id for the top-level element */\n  export let id = \"ccs-\" + Math.random().toString(36);\n\n  import { getContext } from \"svelte\";\n\n  const { selectedContent, addContent, tabs, contentById } = getContext(\"Tabs\");\n\n  addContent({ id });\n\n  $: selected = $selectedContent === id;\n  $: index = $contentById[id].index;\n  $: tabId = $tabs[index].id;\n</script>\n\n<div\n  role=\"tabpanel\"\n  aria-labelledby=\"{tabId}\"\n  aria-hidden=\"{!selected}\"\n  hidden=\"{selected ? undefined : ''}\"\n  id=\"{id}\"\n  class:bx--tab-content=\"{true}\"\n  {...$$restProps}\n>\n  <slot />\n</div>\n","export default function generateUUID() {\n  // Public Domain/MIT\n  var d = new Date().getTime(); //Timestamp\n  var d2 = (typeof performance !== 'undefined' && performance.now && performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n","<script>\n  import { Dropdown } from 'carbon-components-svelte';\n  import { t, initialized } from '$lib/utils/functions/translations';\n  import { LANGUAGES } from '$lib/utils/constants/translation';\n  import { LOCALE } from '$lib/utils/types';\n\n  export let className = '';\n  export let value = LOCALE.EN;\n  export let hasLangChanged = false;\n\n  const dropdownItems = [{ id: '', text: 'Pick a Language' }, ...LANGUAGES];\n\n  function handleSelect(event) {\n    value = event.detail.selectedId;\n\n    hasLangChanged = true;\n  }\n</script>\n\n{#if $initialized}\n  <Dropdown\n    titleText={$t('content.toggle_label')}\n    items={dropdownItems}\n    selectedId={value}\n    on:select={handleSelect}\n    class=\"h-full {className}\"\n  />\n{/if}\n","<script lang=\"ts\">\n  import { Grid, Column, Row } from 'carbon-components-svelte';\n  import CheckmarkFilled from 'carbon-icons-svelte/lib/CheckmarkFilled.svelte';\n  import { supabase } from '$lib/utils/functions/supabase';\n  import { profile } from '$lib/utils/store/user';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import SectionTitle from '../SectionTitle.svelte';\n  import ArrowUpRightIcon from '$lib/components/Icons/ArrowTopRight.svelte';\n  import { t } from '$lib/utils/functions/translations';\n\n  let chatId: number | null;\n\n  async function addChatId() {\n    if (!chatId || `${chatId}`.length < 5) return;\n\n    const { error } = await supabase\n      .from('profile')\n      .update({\n        telegram_chat_id: chatId\n      })\n      .match({ id: $profile.id });\n\n    if (error) {\n      console.log(error);\n      snackbar.error('snackbar.course_settings.error.failed_integration');\n    } else {\n      $profile.telegram_chat_id = chatId;\n      chatId = null;\n      snackbar.success('snackbar.course_settings.success.successful_integration');\n    }\n  }\n\n  async function deleteChatId() {\n    const { error } = await supabase\n      .from('profile')\n      .update({ telegram_chat_id: null })\n      .match({ id: $profile.id });\n\n    if (error) {\n      snackbar.error('snackbar.course_settings.error.failed_deletion');\n      console.log(error);\n    } else {\n      $profile.telegram_chat_id = null;\n      snackbar.success('snackbar.course_settings.success.successful_deletion');\n    }\n  }\n</script>\n\n<Grid class=\"border-c rounded border-gray-200 dark:border-neutral-600 w-full mt-5\">\n  <Row class=\"flex lg:flex-row flex-col justify-center lg:justify-start py-7 border-bottom-c\">\n    <Column sm={4} md={4} lg={4} class=\"flex items-center justify-center\">\n      <img src=\"/telegram-svg.svg\" alt=\"\" class=\"w-10 mr-2\" />\n      <SectionTitle>{$t('settings.integrations.heading')}</SectionTitle></Column\n    >\n\n    <Column sm={8} md={8} lg={8} class=\"mt-2 lg:mt-0 flex flex-col items-center lg:items-start\">\n      {#if $profile.telegram_chat_id !== null}\n        <div class=\"flex flex-col items-center w-full\">\n          <div class=\"flex items-center\">\n            <CheckmarkFilled size={32} class=\"mr-2\" style=\"fill: green;\" />\n            <SectionTitle>{$t('settings.integrations.success_message')}</SectionTitle>\n          </div>\n          <PrimaryButton className=\"mt-3\" variant={VARIANTS.CONTAINED_DANGER} onClick={deleteChatId}\n            >{$t('settings.integrations.disconnect')}</PrimaryButton\n          >\n        </div>\n      {:else}\n        <div>\n          <h3 class=\"font-normal text-lg\">\n            {$t('settings.integrations.sub_heading')}\n          </h3>\n          <h4 class=\"font-normal\">{$t('settings.integrations.step_authenticate')}</h4>\n          <PrimaryButton\n            className=\"mb-5\"\n            variant={VARIANTS.OUTLINED}\n            onClick={() => window.open('https://t.me/classroomio_bot', '_blank')}\n            ><span class=\"mr-2\">{$t('settings.integrations.open_bot_button')}</span>\n            <ArrowUpRightIcon /></PrimaryButton\n          >\n          <h4 class=\"font-normal\">{$t('settings.integrations.step_chatId')}</h4>\n          <TextField\n            bind:value={chatId}\n            placeholder=\"360111\"\n            className=\"w-full lg:w-60 mb-5\"\n            type=\"number\"\n            isRequired\n          />\n          <PrimaryButton onClick={addChatId}\n            >{$t('settings.integrations.connect_button')}</PrimaryButton\n          >\n        </div>\n      {/if}\n    </Column>\n  </Row>\n</Grid>\n"],"names":["t_value","ctx","dirty","set_data","toggle_class","div1","selected","$$props","type","autoWidth","iconDescription","triggerHref","dispatch","createEventDispatcher","tabs","writable","content","refTabList","setContext","data","_","id","$$invalidate","currentIndex","$tabsById","direction","index","$tabs","disabled","activeTab","prevIndex","dropdownHidden","currentTab","currentContent","$content","selectedTab","selectedContent","$selectedTab","useAutoWidth","label","href","tabindex","ref","add","update","key","change","addContent","$selectedContent","$contentById","tabId","generateUUID","d","d2","c","r","dropdown_changes","className","hasLangChanged","handleSelect","event","value","t_1_value","t_1","t0_value","t2_value","t5_value","VARIANTS","current","t0","t2","t5","chatId","addChatId","error","snackbar","set_store_value","profile","$profile","deleteChatId","func"],"mappings":"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","x_google_ignoreList":[0,1,2]}