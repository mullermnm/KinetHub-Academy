{"version":3,"file":"OverflowMenuItem.fb1aab9d.js","sources":["../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/icons/OverflowMenuVertical.svelte","../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/icons/OverflowMenuHorizontal.svelte","../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/OverflowMenu/OverflowMenu.svelte","../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/OverflowMenu/OverflowMenuItem.svelte"],"sourcesContent":["<script>\n  export let size = 16;\n\n  export let title = undefined;\n\n  $: labelled = $$props[\"aria-label\"] || $$props[\"aria-labelledby\"] || title;\n  $: attributes = {\n    \"aria-hidden\": labelled ? undefined : true,\n    role: labelled ? \"img\" : undefined,\n    focusable: Number($$props[\"tabindex\"]) === 0 ? true : undefined,\n  };\n</script>\n\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 32 32\"\n  fill=\"currentColor\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  width=\"{size}\"\n  height=\"{size}\"\n  {...attributes}\n  {...$$restProps}\n>\n  {#if title}<title>{title}</title>{/if}\n  <circle cx=\"16\" cy=\"8\" r=\"2\"></circle><circle cx=\"16\" cy=\"16\" r=\"2\"\n  ></circle><circle cx=\"16\" cy=\"24\" r=\"2\"></circle>\n</svg>\n","<script>\n  export let size = 16;\n\n  export let title = undefined;\n\n  $: labelled = $$props[\"aria-label\"] || $$props[\"aria-labelledby\"] || title;\n  $: attributes = {\n    \"aria-hidden\": labelled ? undefined : true,\n    role: labelled ? \"img\" : undefined,\n    focusable: Number($$props[\"tabindex\"]) === 0 ? true : undefined,\n  };\n</script>\n\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 32 32\"\n  fill=\"currentColor\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  width=\"{size}\"\n  height=\"{size}\"\n  {...attributes}\n  {...$$restProps}\n>\n  {#if title}<title>{title}</title>{/if}\n  <circle cx=\"8\" cy=\"16\" r=\"2\"></circle><circle cx=\"16\" cy=\"16\" r=\"2\"\n  ></circle><circle cx=\"24\" cy=\"16\" r=\"2\"></circle>\n</svg>\n","<script>\n  /**\n   * @event {null | { index: number; text: string; }} close\n   */\n\n  /**\n   * Specify the size of the overflow menu\n   * @type {\"sm\" | \"xl\"}\n   */\n  export let size = undefined;\n\n  /**\n   * Specify the direction of the overflow menu relative to the button\n   * @type {\"top\" | \"bottom\"}\n   */\n  export let direction = \"bottom\";\n\n  /** Set to `true` to open the menu */\n  export let open = false;\n\n  /** Set to `true` to enable the light variant */\n  export let light = false;\n\n  /** Set to `true` to flip the menu relative to the button */\n  export let flipped = false;\n\n  /**\n   * Specify the menu options class\n   * @type {string}\n   */\n  export let menuOptionsClass = undefined;\n\n  /**\n   * Specify the icon to render.\n   * Defaults to `<OverflowMenuVertical />`\n   * @type {typeof import(\"svelte\").SvelteComponent<any>}\n   */\n  export let icon = OverflowMenuVertical;\n\n  /**\n   * Specify the icon class\n   * @type {string}\n   */\n  export let iconClass = undefined;\n\n  /** Specify the ARIA label for the icon */\n  export let iconDescription = \"Open and close list of options\";\n\n  /** Set an id for the button element */\n  export let id = \"ccs-\" + Math.random().toString(36);\n\n  /** Obtain a reference to the trigger button element */\n  export let buttonRef = null;\n\n  /** Obtain a reference to the overflow menu element */\n  export let menuRef = null;\n\n  import {\n    createEventDispatcher,\n    getContext,\n    setContext,\n    afterUpdate,\n  } from \"svelte\";\n  import { writable } from \"svelte/store\";\n  import OverflowMenuVertical from \"../icons/OverflowMenuVertical.svelte\";\n  import OverflowMenuHorizontal from \"../icons/OverflowMenuHorizontal.svelte\";\n\n  const ctxBreadcrumbItem = getContext(\"BreadcrumbItem\");\n  const dispatch = createEventDispatcher();\n  const items = writable([]);\n  const currentId = writable(undefined);\n  const focusedId = writable(undefined);\n  const currentIndex = writable(-1);\n\n  let buttonWidth = undefined;\n  let onMountAfterUpdate = true;\n\n  $: if (ctxBreadcrumbItem) {\n    icon = OverflowMenuHorizontal;\n  }\n\n  setContext(\"OverflowMenu\", {\n    focusedId,\n    add: ({ id, text, primaryFocus, disabled }) => {\n      items.update((_) => {\n        if (primaryFocus) {\n          currentIndex.set(_.length);\n        }\n\n        return [..._, { id, text, primaryFocus, disabled, index: _.length }];\n      });\n    },\n    update: (id) => {\n      currentId.set(id);\n    },\n    change: (direction) => {\n      let index = $currentIndex + direction;\n\n      if (index < 0) {\n        index = $items.length - 1;\n      } else if (index >= $items.length) {\n        index = 0;\n      }\n\n      let disabled = $items[index].disabled;\n\n      while (disabled) {\n        index = index + direction;\n\n        if (index < 0) {\n          index = $items.length - 1;\n        } else if (index >= $items.length) {\n          index = 0;\n        }\n\n        disabled = $items[index].disabled;\n      }\n\n      currentIndex.set(index);\n    },\n  });\n\n  afterUpdate(() => {\n    if ($currentId) {\n      const { index, text } = $items.filter((_) => _.id === $currentId)[0];\n      dispatch(\"close\", { index, text });\n      open = false;\n    }\n\n    if (open) {\n      const { width, height } = buttonRef.getBoundingClientRect();\n\n      buttonWidth = width;\n\n      if (!onMountAfterUpdate && $currentIndex < 0) {\n        menuRef.focus();\n      }\n\n      if (flipped) {\n        menuRef.style.left = \"auto\";\n        menuRef.style.right = 0;\n      }\n\n      if (direction === \"top\") {\n        menuRef.style.top = \"auto\";\n        menuRef.style.bottom = height + \"px\";\n      } else if (direction === \"bottom\") {\n        menuRef.style.top = height + \"px\";\n      }\n\n      if (ctxBreadcrumbItem) {\n        menuRef.style.top = height + 10 + \"px\";\n        menuRef.style.left = -11 + \"px\";\n      }\n    }\n\n    if (!open) {\n      items.set([]);\n      currentId.set(undefined);\n      currentIndex.set(0);\n    }\n\n    onMountAfterUpdate = false;\n  });\n\n  $: ariaLabel = $$props[\"aria-label\"] || \"menu\";\n  $: if ($items[$currentIndex]) {\n    focusedId.set($items[$currentIndex].id);\n  }\n  $: styles = `<style>\n    #${id} .bx--overflow-menu-options.bx--overflow-menu-options:after {\n      width: ${buttonWidth ? buttonWidth + \"px\" : \"2rem\"};\n    }\n  <\\/style>`;\n</script>\n\n<svelte:head>\n  {@html styles}\n</svelte:head>\n\n<svelte:window\n  on:click=\"{({ target }) => {\n    if (buttonRef && buttonRef.contains(target)) return;\n    if (menuRef && !menuRef.contains(target)) {\n      open = false;\n    }\n  }}\"\n/>\n\n<!-- svelte-ignore a11y-mouse-events-have-key-events -->\n<button\n  bind:this=\"{buttonRef}\"\n  type=\"button\"\n  aria-haspopup\n  aria-expanded=\"{open}\"\n  aria-label=\"{ariaLabel}\"\n  id=\"{id}\"\n  class:bx--overflow-menu=\"{true}\"\n  class:bx--overflow-menu--open=\"{open}\"\n  class:bx--overflow-menu--light=\"{light}\"\n  class:bx--overflow-menu--sm=\"{size === 'sm'}\"\n  class:bx--overflow-menu--xl=\"{size === 'xl'}\"\n  {...$$restProps}\n  on:click\n  on:click=\"{({ target }) => {\n    if (!(menuRef && menuRef.contains(target))) {\n      open = !open;\n      if (!open) dispatch('close');\n    }\n  }}\"\n  on:mouseover\n  on:mouseenter\n  on:mouseleave\n  on:keydown\n  on:keydown=\"{(e) => {\n    if (open) {\n      if (['ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp'].includes(e.key)) {\n        e.preventDefault();\n      } else if (e.key === 'Escape') {\n        e.stopPropagation();\n        dispatch('close');\n        open = false;\n        buttonRef.focus();\n      }\n    }\n  }}\"\n  on:focusout=\"{(e) => {\n    if (open) {\n      if (!buttonRef.contains(e.relatedTarget)) {\n        dispatch('close');\n        open = false;\n      }\n    }\n  }}\"\n>\n  <slot name=\"menu\">\n    <svelte:component\n      this=\"{icon}\"\n      aria-label=\"{iconDescription}\"\n      title=\"{iconDescription}\"\n      class=\"bx--overflow-menu__icon {iconClass}\"\n    />\n  </slot>\n  {#if open}\n    <!-- svelte-ignore a11y-no-noninteractive-element-to-interactive-role -->\n    <ul\n      bind:this=\"{menuRef}\"\n      role=\"menu\"\n      tabindex=\"-1\"\n      aria-label=\"{ariaLabel}\"\n      data-floating-menu-direction=\"{direction}\"\n      class:bx--overflow-menu-options=\"{true}\"\n      class:bx--overflow-menu--flip=\"{flipped}\"\n      class:bx--overflow-menu-options--open=\"{open}\"\n      class:bx--overflow-menu-options--light=\"{light}\"\n      class:bx--overflow-menu-options--sm=\"{size === 'sm'}\"\n      class:bx--overflow-menu-options--xl=\"{size === 'xl'}\"\n      class:bx--breadcrumb-menu-options=\"{!!ctxBreadcrumbItem}\"\n      class=\"{menuOptionsClass}\"\n    >\n      <slot />\n    </ul>\n  {/if}\n</button>\n","<script>\n  /**\n   * Specify the item text.\n   * Alternatively, use the default slot\n   */\n  export let text = \"Provide text\";\n\n  /** Specify the `href` attribute if the item is a link */\n  export let href = \"\";\n\n  /** Set to `true` if the item should be focused when opening the menu */\n  export let primaryFocus = false;\n\n  /** Set to `true` to disable the item */\n  export let disabled = false;\n\n  /** Set to `true` to include a divider */\n  export let hasDivider = false;\n\n  /** Set to `true` to use the danger variant */\n  export let danger = false;\n\n  /** Set to `false` to omit the button `title` attribute */\n  export let requireTitle = true;\n\n  /** Set an id for the top-level element */\n  export let id = \"ccs-\" + Math.random().toString(36);\n\n  /** Obtain a reference to the HTML element */\n  export let ref = null;\n\n  import { getContext, afterUpdate } from \"svelte\";\n\n  const { focusedId, add, update, change } = getContext(\"OverflowMenu\");\n\n  add({ id, text, primaryFocus, disabled });\n\n  afterUpdate(() => {\n    if (ref && primaryFocus) {\n      ref.focus();\n    }\n  });\n\n  $: primaryFocus = $focusedId === id;\n  $: buttonProps = {\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    class: \"bx--overflow-menu-options__btn\",\n    disabled: href ? undefined : disabled,\n    href: href ? href : undefined,\n    title: requireTitle ? ($$slots.default ? undefined : text) : undefined,\n  };\n</script>\n\n<li\n  role=\"none\"\n  id=\"{id}\"\n  class:bx--overflow-menu-options__option=\"{true}\"\n  class:bx--overflow-menu--divider=\"{hasDivider}\"\n  class:bx--overflow-menu-options__option--danger=\"{danger}\"\n  class:bx--overflow-menu-options__option--disabled=\"{disabled}\"\n  {...$$restProps}\n>\n  {#if href}\n    <!-- svelte-ignore a11y-missing-attribute -->\n    <!-- svelte-ignore a11y-no-static-element-interactions -->\n    <a\n      bind:this=\"{ref}\"\n      {...buttonProps}\n      on:click\n      on:click=\"{() => {\n        update(id);\n      }}\"\n      on:keydown\n      on:keydown=\"{({ key }) => {\n        if (key === 'ArrowDown') {\n          change(1);\n        } else if (key === 'ArrowUp') {\n          change(-1);\n        }\n      }}\"\n    >\n      <slot>\n        <div class:bx--overflow-menu-options__option-content=\"{true}\">\n          {text}\n        </div>\n      </slot>\n    </a>\n  {:else}\n    <button\n      bind:this=\"{ref}\"\n      {...buttonProps}\n      on:click\n      on:click=\"{() => {\n        update(id);\n      }}\"\n      on:keydown\n      on:keydown=\"{({ key }) => {\n        if (key === 'ArrowDown') {\n          change(1);\n        } else if (key === 'ArrowUp') {\n          change(-1);\n        }\n      }}\"\n    >\n      <slot>\n        <div class:bx--overflow-menu-options__option-content=\"{true}\">\n          {text}\n        </div>\n      </slot>\n    </button>\n  {/if}\n</li>\n"],"names":["size","$$props","title","$$invalidate","attributes","labelled","toggle_class","ul","ctx","button","direction","open","light","flipped","menuOptionsClass","icon","OverflowMenuVertical$1","iconClass","iconDescription","buttonRef","menuRef","dispatch","createEventDispatcher","items","writable","buttonWidth","onMountAfterUpdate","setContext","id","text","primaryFocus","disabled","currentIndex","_","index","$items","$currentId","width","height","target","e","ariaLabel","focusedId","$currentIndex","styles","ctxBreadcrumbItem","OverflowMenuHorizontal$1","li_levels","href","hasDivider","danger","requireTitle","ref","add","update","key","change","$focusedId","buttonProps","$$slots"],"mappings":"+pEACa,CAAA,KAAAA,EAAA,EAAA,EAAAC,EAEA,CAAA,MAAAC,EAAA,MAAA,EAAAD,kLAGXE,EAAA,EAAAC,EAAA,CACE,cAAAC,EAAA,OAAA,GACA,KAAAA,EAAA,MAAA,8+CCPS,CAAA,KAAAL,EAAA,EAAA,EAAAC,EAEA,CAAA,MAAAC,EAAA,MAAA,EAAAD,kLAGXE,EAAA,EAAAC,EAAA,CACE,cAAAC,EAAA,OAAA,GACA,KAAAA,EAAA,MAAA,k4CCuPwCC,EAAAC,EAAA,gCAAAC,EAAA,CAAA,IAAA,IAAA,EACAF,EAAAC,EAAA,gCAAAC,EAAA,CAAA,IAAA,IAAA,uiBADAF,EAAAC,EAAA,gCAAAC,EAAA,CAAA,IAAA,IAAA,kBACAF,EAAAC,EAAA,gCAAAC,EAAA,CAAA,IAAA,IAAA,8zBAxDZF,EAAAG,EAAA,wBAAAD,EAAA,CAAA,IAAA,IAAA,EACAF,EAAAG,EAAA,wBAAAD,EAAA,CAAA,IAAA,IAAA,23BADAF,EAAAG,EAAA,wBAAAD,EAAA,CAAA,IAAA,IAAA,EACAF,EAAAG,EAAA,wBAAAD,EAAA,CAAA,IAAA,IAAA,mVAhMnB,CAAA,KAAAR,EAAA,MAAA,EAAAC,EAMA,CAAA,UAAAS,EAAA,QAAA,EAAAT,EAGA,CAAA,KAAAU,EAAA,EAAA,EAAAV,EAGA,CAAA,MAAAW,EAAA,EAAA,EAAAX,EAGA,CAAA,QAAAY,EAAA,EAAA,EAAAZ,EAMA,CAAA,iBAAAa,EAAA,MAAA,EAAAb,EAOA,CAAA,KAAAc,EAAAC,EAAA,EAAAf,EAMA,CAAA,UAAAgB,EAAA,MAAA,EAAAhB,EAGA,CAAA,gBAAAiB,EAAA,gCAAA,EAAAjB,6CAMA,CAAA,UAAAkB,EAAA,IAAA,EAAAlB,EAGA,CAAA,QAAAmB,EAAA,IAAA,EAAAnB,+BAaLoB,EAAAC,GAAA,EACAC,EAAAC,GAAA,CAAA,CAAA,gHAKF,IAAAC,EACAC,GAAA,GAMJC,GAAA,eAAA,aAEE,IAAA,CAAA,CAAA,GAAAC,EAAA,KAAAC,EAAA,aAAAC,EAAA,SAAAC,EAAA,IAAA,kBAGMC,EAAA,IAAAC,GAAA,MAAA,sEAMN,OAAAL,GAAA,WAGA,OAAAlB,GAAA,WAGMwB,EAAA,EACFA,EAAAC,EAAA,OAAA,gBAEAD,EAAA,GAGE,IAAAH,EAAAI,EAAAD,CAAA,EAAA,uBAKEA,EAAA,EACFA,EAAAC,EAAA,OAAA,gBAEAD,EAAA,GAGFH,EAAAI,EAAAD,CAAA,EAAA,mCASM,KAAA,CAAA,MAAAA,EAAA,KAAAL,CAAA,EAAAM,EAAA,OAAAF,GAAAA,EAAA,KAAAG,CAAA,EAAA,CAAA,EACRf,EAAA,QAAA,CAAA,MAAAa,EAAA,KAAAL,CAAA,CAAA,EACA1B,EAAA,EAAAQ,EAAA,EAAA,QAIQ,KAAA,CAAA,MAAA0B,EAAA,OAAAC,CAAA,EAAAnB,EAAA,sBAAA,EAERhB,EAAA,GAAAsB,EAAAY,CAAA,YAGEjB,EAAA,MAAA,MAIAjB,EAAA,EAAAiB,EAAA,MAAA,KAAA,OAAAA,CAAA,EACAjB,EAAA,EAAAiB,EAAA,MAAA,MAAA,EAAAA,CAAA,GAGEV,IAAA,OACFP,EAAA,EAAAiB,EAAA,MAAA,IAAA,OAAAA,CAAA,EACAjB,EAAA,EAAAiB,EAAA,MAAA,OAAAkB,EAAA,KAAAlB,CAAA,GACSV,IAAA,UACTP,EAAA,EAAAiB,EAAA,MAAA,IAAAkB,EAAA,KAAAlB,CAAA,mCAKAjB,EAAA,EAAAiB,EAAA,MAAA,KAAA,QAAAA,CAAA,OAKFG,EAAA,IAAA,CAAA,CAAA,0BAKFG,GAAA,4LAoBIP,GAAAA,EAAA,SAAAoB,CAAA,GACAnB,GAAA,CAAAA,EAAA,SAAAmB,CAAA,GACFpC,EAAA,EAAAQ,EAAA,EAAA,2IAqBIS,GAAAA,EAAA,SAAAmB,CAAA,IACJpC,EAAA,EAAAQ,EAAA,CAAAA,CAAA,8FAWE6B,EAAA,eAAA,qBAEAA,EAAA,gBAAA,EACAnB,EAAA,OAAA,EACAlB,EAAA,EAAAQ,EAAA,EAAA,EACAQ,EAAA,MAAA,gBAMGA,EAAA,SAAAqB,EAAA,aAAA,IACHnB,EAAA,OAAA,EACAlB,EAAA,EAAAQ,EAAA,EAAA,kgBAjENR,EAAA,GAAAsC,EAAAxC,EAAA,YAAA,GAAA,MAAA,+BAEEyC,EAAA,IAAAP,EAAAQ,CAAA,EAAA,EAAA,yBAEFxC,EAAA,GAAAyC,EAAA;AAAA;eAEanB,EAAAA,EAAA,KAAA,MAAA;AAAA;AAAA,cA9FboB,GACE1C,EAAA,EAAAY,EAAA+B,EAAA,0pECtBG,IAAAC,EAAA,CAAA,CAAA,KAAA,MAAA,EAAA,CAAA,GAAAvC,EAAA,CAAA,CAAA,EAAAA,EAAA,EAAA,CAAA,ghCAnDM,GAAA,CAAA,KAAAqB,EAAA,cAAA,EAAA5B,EAGA,CAAA,KAAA+C,EAAA,EAAA,EAAA/C,EAGA,CAAA,aAAA6B,EAAA,EAAA,EAAA7B,EAGA,CAAA,SAAA8B,EAAA,EAAA,EAAA9B,EAGA,CAAA,WAAAgD,EAAA,EAAA,EAAAhD,EAGA,CAAA,OAAAiD,EAAA,EAAA,EAAAjD,EAGA,CAAA,aAAAkD,EAAA,EAAA,EAAAlD,6CAMA,CAAA,IAAAmD,EAAA,IAAA,EAAAnD,qFAMXoD,EAAA,CAAA,GAAAzB,EAAA,KAAAC,EAAA,aAAAC,EAAA,SAAAC,CAAA,CAAA,UAGMqB,GAAAtB,GACFsB,EAAA,MAAA,oMAgCEE,EAAA1B,CAAA,iBAII2B,IAAA,YACFC,EAAA,CAAA,EACSD,IAAA,WACTC,EAAA,EAAA,wEAgBFF,EAAA1B,CAAA,kBAII2B,IAAA,YACFC,EAAA,CAAA,EACSD,IAAA,WACTC,EAAA,EAAA,0ZA1DRrD,EAAA,GAAA2B,EAAA2B,IAAA7B,CAAA,mBACAzB,EAAA,EAAAuD,EAAA,CACE,KAAA,WACA,SAAA,KACA,MAAA,iCACA,SAAAV,EAAA,OAAAjB,EACA,KAAAiB,GAAA,OACA,MAAAG,EAAuBQ,EAAA,QAAA,OAAA9B","x_google_ignoreList":[0,1,2,3]}