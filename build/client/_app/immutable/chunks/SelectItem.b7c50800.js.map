{"version":3,"file":"SelectItem.b7c50800.js","sources":["../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/Select/Select.svelte","../../../../../../../../node_modules/.pnpm/carbon-components-svelte@0.79.0/node_modules/carbon-components-svelte/src/Select/SelectItem.svelte"],"sourcesContent":["<script>\n  /**\n   * @event {string | number} update The selected value.\n   */\n\n  /**\n   * Specify the selected item value\n   * @type {string | number}\n   */\n  export let selected = undefined;\n\n  /**\n   * Set the size of the select input\n   * @type {\"sm\" | \"xl\"}\n   */\n  export let size = undefined;\n\n  /** Set to `true` to use the inline variant */\n  export let inline = false;\n\n  /** Set to `true` to enable the light variant */\n  export let light = false;\n\n  /** Set to `true` to disable the select element */\n  export let disabled = false;\n\n  /** Set an id for the select element */\n  export let id = \"ccs-\" + Math.random().toString(36);\n\n  /**\n   * Specify a name attribute for the select element\n   * @type {string}\n   */\n  export let name = undefined;\n\n  /** Set to `true` to indicate an invalid state */\n  export let invalid = false;\n\n  /** Specify the invalid state text */\n  export let invalidText = \"\";\n\n  /** Set to `true` to indicate an warning state */\n  export let warn = false;\n\n  /** Specify the warning state text */\n  export let warnText = \"\";\n\n  /** Specify the helper text */\n  export let helperText = \"\";\n\n  /** Set to `true` to not render a label */\n  export let noLabel = false;\n\n  /** Specify the label text */\n  export let labelText = \"\";\n\n  /** Set to `true` to visually hide the label text */\n  export let hideLabel = false;\n\n  /** Obtain a reference to the select HTML element */\n  export let ref = null;\n\n  /** Set to `true` to mark the field as required */\n  export let required = false;\n\n  import { createEventDispatcher, setContext, afterUpdate } from \"svelte\";\n  import { writable } from \"svelte/store\";\n  import ChevronDown from \"../icons/ChevronDown.svelte\";\n  import WarningFilled from \"../icons/WarningFilled.svelte\";\n  import WarningAltFilled from \"../icons/WarningAltFilled.svelte\";\n\n  const dispatch = createEventDispatcher();\n  const selectedValue = writable(selected);\n  const defaultSelectId = writable(null);\n  const defaultValue = writable(null);\n  const itemTypesByValue = writable({});\n\n  setContext(\"Select\", {\n    selectedValue,\n    setDefaultValue: (id, value) => {\n      /**\n       * Use the first `SelectItem` value as the\n       * default value if `selected` is `undefined`.\n       */\n      if ($defaultValue === null) {\n        defaultSelectId.set(id);\n        defaultValue.set(value);\n      } else {\n        if ($defaultSelectId === id) {\n          selectedValue.set(value);\n        }\n      }\n\n      itemTypesByValue.update((types) => ({\n        ...types,\n        [value]: typeof value,\n      }));\n    },\n  });\n\n  const handleChange = ({ target }) => {\n    let value = target.value;\n\n    if ($itemTypesByValue[value] === \"number\") {\n      value = Number(value);\n    }\n\n    selectedValue.set(value);\n  };\n\n  let prevSelected = undefined;\n\n  afterUpdate(() => {\n    selected = $selectedValue;\n\n    if (prevSelected !== undefined && selected !== prevSelected) {\n      dispatch(\"update\", $selectedValue);\n    }\n\n    prevSelected = selected;\n  });\n\n  $: errorId = `error-${id}`;\n  $: selectedValue.set(selected ?? $defaultValue);\n</script>\n\n<div class:bx--form-item=\"{true}\" {...$$restProps}>\n  <div\n    class:bx--select=\"{true}\"\n    class:bx--select--inline=\"{inline}\"\n    class:bx--select--light=\"{light}\"\n    class:bx--select--invalid=\"{invalid}\"\n    class:bx--select--disabled=\"{disabled}\"\n    class:bx--select--warning=\"{warn}\"\n  >\n    {#if !noLabel}\n      <label\n        for=\"{id}\"\n        class:bx--label=\"{true}\"\n        class:bx--visually-hidden=\"{hideLabel}\"\n        class:bx--label--disabled=\"{disabled}\"\n      >\n        <slot name=\"labelText\">\n          {labelText}\n        </slot>\n      </label>\n    {/if}\n    {#if inline}\n      <div class:bx--select-input--inline__wrapper=\"{true}\">\n        <div\n          class:bx--select-input__wrapper=\"{true}\"\n          data-invalid=\"{invalid || undefined}\"\n        >\n          <select\n            bind:this=\"{ref}\"\n            aria-describedby=\"{invalid ? errorId : undefined}\"\n            aria-invalid=\"{invalid || undefined}\"\n            disabled=\"{disabled || undefined}\"\n            required=\"{required || undefined}\"\n            id=\"{id}\"\n            name=\"{name}\"\n            class:bx--select-input=\"{true}\"\n            class:bx--select-input--sm=\"{size === 'sm'}\"\n            class:bx--select-input--xl=\"{size === 'xl'}\"\n            on:change=\"{handleChange}\"\n            on:change\n            on:input\n            on:focus\n            on:blur\n          >\n            <slot />\n          </select>\n          <ChevronDown class=\"bx--select__arrow\" />\n          {#if invalid}\n            <WarningFilled class=\"bx--select__invalid-icon\" />\n          {/if}\n        </div>\n        {#if invalid}\n          <div class:bx--form-requirement=\"{true}\" id=\"{errorId}\">\n            {invalidText}\n          </div>\n        {/if}\n      </div>\n      {#if !invalid && !warn && helperText}\n        <div\n          class:bx--form__helper-text=\"{true}\"\n          class:bx--form__helper-text--disabled=\"{disabled}\"\n        >\n          {helperText}\n        </div>\n      {/if}\n    {/if}\n    {#if !inline}\n      <div\n        class:bx--select-input__wrapper=\"{true}\"\n        data-invalid=\"{invalid || undefined}\"\n      >\n        <select\n          bind:this=\"{ref}\"\n          id=\"{id}\"\n          name=\"{name}\"\n          aria-describedby=\"{invalid ? errorId : undefined}\"\n          disabled=\"{disabled || undefined}\"\n          required=\"{required || undefined}\"\n          aria-invalid=\"{invalid || undefined}\"\n          class:bx--select-input=\"{true}\"\n          class:bx--select-input--sm=\"{size === 'sm'}\"\n          class:bx--select-input--xl=\"{size === 'xl'}\"\n          on:change=\"{handleChange}\"\n          on:change\n          on:input\n          on:focus\n          on:blur\n        >\n          <slot />\n        </select>\n        <ChevronDown class=\"bx--select__arrow\" />\n        {#if invalid}\n          <WarningFilled class=\"bx--select__invalid-icon\" />\n        {/if}\n        {#if !invalid && warn}\n          <WarningAltFilled\n            class=\"bx--select__invalid-icon bx--select__invalid-icon--warning\"\n          />\n        {/if}\n      </div>\n      {#if !invalid && helperText}\n        <div\n          class:bx--form__helper-text=\"{true}\"\n          class:bx--form__helper-text--disabled=\"{disabled}\"\n        >\n          {helperText}\n        </div>\n      {/if}\n      {#if invalid}\n        <div id=\"{errorId}\" class:bx--form-requirement=\"{true}\">\n          {invalidText}\n        </div>\n      {/if}\n      {#if !invalid && warn}\n        <div id=\"{errorId}\" class:bx--form-requirement=\"{true}\">\n          {warnText}\n        </div>\n      {/if}\n    {/if}\n  </div>\n</div>\n","<script>\n  /**\n   * Specify the option value\n   * @type {string | number}\n   */\n  export let value = \"\";\n\n  /** Specify the option text */\n  export let text = \"\";\n\n  /** Set to `true` to hide the option */\n  export let hidden = false;\n\n  /** Set to `true` to disable the option */\n  export let disabled = false;\n\n  import { getContext, onMount } from \"svelte\";\n\n  const id = \"ccs-\" + Math.random().toString(36);\n  const ctx = getContext(\"Select\") || getContext(\"TimePickerSelect\");\n\n  $: ctx?.setDefaultValue?.(id, value);\n\n  let selected = false;\n\n  const unsubscribe = ctx.selectedValue.subscribe((currentValue) => {\n    selected = currentValue === value;\n  });\n\n  onMount(() => {\n    return () => unsubscribe();\n  });\n</script>\n\n<option\n  value=\"{value}\"\n  disabled=\"{disabled}\"\n  hidden=\"{hidden}\"\n  selected=\"{selected}\"\n  class:bx--select-option=\"{true}\"\n  class=\"{$$restProps.class}\"\n  style=\"{$$restProps.style}\"\n>\n  {text || value}\n</option>\n"],"names":["attr","select","select_aria_invalid_value","ctx","select_disabled_value","select_required_value","toggle_class","div0","div0_data_invalid_value","current","dirty","if_block1","create_if_block_4","if_block2","create_if_block_3","if_block4","create_if_block_1","div","div_data_invalid_value","selected","$$props","size","inline","light","disabled","name","invalid","invalidText","warn","warnText","helperText","noLabel","labelText","hideLabel","ref","required","dispatch","createEventDispatcher","itemTypesByValue","writable","setContext","$defaultValue","$defaultSelectId","id","handleChange","target","prevSelected","$$invalidate","$selectedValue","selectedValue","t_value","option","option_class_value","option_style_value","set_data","t","value","text","hidden","getContext","unsubscribe","currentValue","_a"],"mappings":"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","x_google_ignoreList":[0,1]}