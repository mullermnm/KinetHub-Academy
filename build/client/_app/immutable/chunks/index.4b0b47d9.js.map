{"version":3,"file":"index.4b0b47d9.js","sources":["../../../../../../src/lib/components/Course/components/Lesson/Exercise/constants.js","../../../../../../src/lib/components/CodeSnippet/index.svelte","../../../../../../src/lib/components/Form/RadioItem.svelte","../../../../../../src/lib/components/Question/Grade.svelte","../../../../../../src/lib/components/Question/ReasonBox.svelte","../../../../../../src/lib/components/Question/QuestionTitle.svelte","../../../../../../src/lib/components/Question/RadioQuestion/index.svelte","../../../../../../src/lib/components/Form/Checkbox.svelte","../../../../../../src/lib/components/Question/CheckboxQuestion/index.svelte","../../../../../../src/lib/components/Question/TextareaQuestion/index.svelte","../../../../../../src/lib/components/Course/components/Lesson/Exercise/functions.ts","../../../../../../src/lib/components/Course/components/Lesson/Exercise/Preview.svelte","../../../../../../src/lib/utils/services/submissions/index.ts"],"sourcesContent":["import { t } from '$lib/utils/functions/translations';\n\nexport const STATUS = {\n  SUBMITTED: 1,\n  IN_PROGRESS: 2,\n  GRADED: 3\n};\n","<script>\n  export let code = '';\n</script>\n\n<div class=\"bg-gray-200 dark:bg-gray-500 p-5 rounded-md mb-3\">\n  {@html code}\n</div>\n","<script>\n  import TextField from '$lib/components/Form/TextField.svelte';\n  export let label = '';\n  export let value = '';\n  export let checked = false;\n  export let name = '';\n  export let isEditable = false;\n  export let disabled = false;\n  export let className = '';\n  export let onChange = () => {}; // This is to know if element is 'dirty'\n</script>\n\n<label\n  class=\"{className} inline-flex items-center w-full {disabled\n    ? 'cursor-not-allowed'\n    : 'cursor-pointer'}\"\n>\n  <input\n    class=\"form-radio\"\n    type=\"radio\"\n    {checked}\n    {name}\n    {value}\n    disabled={disabled || isEditable}\n  />\n  {#if isEditable}\n    <div class=\"w-2/4\">\n      <TextField\n        bind:value={label}\n        placeholder=\"Your option\"\n        className=\"ml-1\"\n        type=\"text\"\n        {onChange}\n      />\n    </div>\n  {:else}\n    <span class=\"dark:text-white ml-2\">{label}</span>\n  {/if}\n\n  <slot name=\"iconbutton\" />\n</label>\n","<script lang=\"ts\">\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import { snackbar } from '../Snackbar/store';\n\n  export let gradeMax = 0;\n  export let disableGrading = false;\n  export let grade: number | undefined = 0;\n\n  $: if (grade && grade > gradeMax) {\n    snackbar.error('grade cant be more than max value');\n    grade = gradeMax;\n  }\n</script>\n\n<div class=\"flex items-center font-semibold\">\n  <TextField\n    placeholder={$t('course.navItem.lessons.exercises.new_exercise_modal.points')}\n    bind:value={grade}\n    max={gradeMax}\n    type=\"number\"\n    className=\"w-12\"\n    inputClassName=\"h-10\"\n    isDisabled={disableGrading}\n  />\n\n  <p class=\"dark:text-white ml-2 text-base flex items-center font-semibold\">\n    <span class=\"mr-1\">/</span> <span>{gradeMax}</span>\n  </p>\n</div>\n","<script>\n  import { VARIANTS } from '../PrimaryButton/constants';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import { SkeletonPlaceholder, SkeletonText } from 'carbon-components-svelte';\n\n  export let reason = '';\n  export let isLoading = false;\n  export let rejectGrade = () => {};\n  export let acceptGrade = () => {};\n</script>\n\n<div class=\"border rounded-md\">\n  {#if isLoading}\n    <div class=\"flex w-full px-2 py-4\">\n      <div class=\"w-full flex flex-row items-start space-x-4\">\n        <img src=\"/ai.svg\" alt=\"alt\" class=\"animate-pulse\" />\n        <div class=\"w-full\">\n          <SkeletonText width=\"100%\" paragraph lines={3} />\n        </div>\n      </div>\n      <div class=\"flex space-x-2\">\n        <SkeletonPlaceholder style=\"height: 2rem; width: 5rem;\" />\n        <SkeletonPlaceholder style=\"height: 2rem; width: 5rem;\" />\n      </div>\n    </div>\n  {:else}\n    <div class=\"flex items-start justify-between px-2 py-4\">\n      <div class=\"flex items-center space-x-4\">\n        <img src=\"/ai.svg\" alt=\"alt\" />\n        <p class=\"font-normal text-sm\">\n          {reason}\n        </p>\n      </div>\n      <div class=\"flex space-x-2\">\n        <PrimaryButton\n          variant={VARIANTS.CONTAINED_SUCCESS}\n          label={$t('course.navItem.submissions.grading_modal.accept_grade')}\n          className=\"rounded-none py-1 px-2\"\n          disablePadding={true}\n          onClick={acceptGrade}\n        />\n        <PrimaryButton\n          variant={VARIANTS.CONTAINED_DANGER}\n          label={$t('course.navItem.submissions.grading_modal.reject_grade')}\n          className=\"rounded-none py-1 px-2\"\n          disablePadding={true}\n          onClick={rejectGrade}\n        />\n      </div>\n    </div>\n  {/if}\n</div>\n","<script lang=\"ts\">\n  export let index: number;\n  export let title: string;\n</script>\n\n<span class=\"flex gap-2\">\n  <p class=\"text-md font-medium\">{index}</p>\n  <p class=\"text-md font-medium\">{title}</p>\n</span>\n","<script lang=\"ts\">\n  import CodeSnippet from '$lib/components/CodeSnippet/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import RadioItem from '$lib/components/Form/RadioItem.svelte';\n  import HtmlRender from '$lib/components/HTMLRender/HTMLRender.svelte';\n  import Grade from '$lib/components/Question/Grade.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import ReasonBox from '../ReasonBox.svelte';\n  import QuestionTitle from '../QuestionTitle.svelte';\n\n  export let title = '';\n  export let index = 1;\n  export let code = '';\n  export let name = '';\n  export let options: { value: string; label: string; is_correct: boolean }[] = [];\n  export let onSubmit = (a: string, b: string[]) => {};\n  export let onPrevious = () => {};\n  export let defaultValue = '';\n  export let disablePreviousButton = false;\n  export let disabled = false;\n  export let isPreview = false;\n  export let nextButtonProps = {\n    isDisabled: false,\n    isActive: false\n  };\n  export let isLast = false;\n  export let grade: number;\n  export let gradeMax = 0;\n  export let disableGrading = false;\n  export let disableOptContainerMargin = false;\n  export let isGradeWithAI = false;\n  export let reason;\n  export let isLoading = false;\n  export let hideGrading = false;\n\n  let gradeWithAI = false;\n\n  function getRadioVal(form, name): string {\n    let val;\n    const radios = form.elements[name];\n\n    for (let i = 0, len = radios.length; i < len; i++) {\n      if (radios[i].checked) {\n        val = radios[i].value;\n        break;\n      }\n    }\n    return val;\n  }\n\n  function handleFormSubmit(event) {\n    if (isPreview) return;\n    const value = getRadioVal(event.target, name);\n    onSubmit(name, [value]);\n    event.target.reset();\n  }\n\n  function handlePrevious(event) {\n    event.preventDefault();\n    onPrevious();\n  }\n\n  function getValidationClassName(option) {\n    if (defaultValue.includes(option.value)) {\n      if (option.is_correct) {\n        return 'border-green-700';\n      } else {\n        return 'border-red-700';\n      }\n    }\n\n    return '';\n  }\n\n  function acceptGrade() {\n    gradeWithAI = false;\n  }\n  function rejectGrade() {\n    gradeWithAI = false;\n    grade = 0;\n  }\n\n  $: gradeWithAI = isGradeWithAI;\n</script>\n\n<form on:submit|preventDefault={handleFormSubmit}>\n  <div class=\"flex items-center justify-between\">\n    <HtmlRender className=\"mt-4 {typeof grade === 'number' && 'w-4/5'}\" disableMaxWidth>\n      <svelte:fragment slot=\"content\">\n        <QuestionTitle {index} {title} />\n      </svelte:fragment>\n    </HtmlRender>\n    {#if !hideGrading}\n      <Grade {gradeMax} bind:grade {disableGrading} />\n    {/if}\n  </div>\n\n  {#if code}\n    <CodeSnippet {code} />\n  {/if}\n\n  <div class={disableOptContainerMargin ? '' : 'ml-4'}>\n    {#each options as option}\n      <button\n        class=\"cursor-pointer text-left my-2 border-2 border-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-neutral-800 w-full {getValidationClassName(\n          option\n        )}\"\n        type=\"button\"\n      >\n        <RadioItem\n          className=\"p-2\"\n          {name}\n          value={option.value}\n          checked={defaultValue.includes(option.value) && option.is_correct}\n          label={option.label || option.value}\n          {disabled}\n        />\n      </button>\n    {/each}\n  </div>\n  {#if gradeWithAI}\n    <ReasonBox {reason} {isLoading} {acceptGrade} {rejectGrade} />\n  {/if}\n\n  {#if !isPreview}\n    <div class=\"mt-3 flex items-center justify-between w-full\">\n      <PrimaryButton\n        onClick={handlePrevious}\n        label={$t('course.navItem.lessons.exercises.all_exercises.previous')}\n        isDisabled={disablePreviousButton}\n        variant={VARIANTS.OUTLINED}\n      />\n      <PrimaryButton\n        variant={nextButtonProps.isActive ? VARIANTS.CONTAINED : VARIANTS.OUTLINED}\n        type=\"submit\"\n        label={isLast\n          ? $t('course.navItem.lessons.exercises.all_exercises.finish')\n          : $t('course.navItem.lessons.exercises.all_exercises.next')}\n        isDisabled={nextButtonProps.isDisabled}\n        {name}\n      />\n    </div>\n  {/if}\n</form>\n","<script>\n  import TextField from '$lib/components/Form/TextField.svelte';\n\n  export let label = '';\n  export let value = '';\n  export let checked = false;\n  export let name = '';\n  export let isEditable = false;\n  export let disabled = false;\n  export let className = '';\n  export let onChange = () => {};\n</script>\n\n<label\n  class=\"{className} inline-flex items-center w-full {disabled\n    ? 'cursor-not-allowed'\n    : 'cursor-pointer'}\"\n>\n  <input\n    type=\"checkbox\"\n    class=\"rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-offset-0 focus:ring-indigo-200 focus:ring-opacity-50\"\n    {name}\n    {value}\n    disabled={disabled || isEditable}\n    bind:checked\n  />\n  {#if isEditable}\n    <div class=\"w-2/4\">\n      <TextField\n        bind:value={label}\n        placeholder=\"Your option\"\n        className=\"ml-1\"\n        type=\"text\"\n        {onChange}\n      />\n    </div>\n  {:else}\n    <span class=\"dark:text-white ml-2\">{label}</span>\n  {/if}\n\n  <slot name=\"iconbutton\" />\n</label>\n","<script lang=\"ts\">\n  import CodeSnippet from '$lib/components/CodeSnippet/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import Checkbox from '$lib/components/Form/Checkbox.svelte';\n  import HtmlRender from '$lib/components/HTMLRender/HTMLRender.svelte';\n  import Grade from '$lib/components/Question/Grade.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import ReasonBox from '../ReasonBox.svelte';\n  import QuestionTitle from '../QuestionTitle.svelte';\n\n  export let title = '';\n  export let index = 1;\n  export let code;\n  export let name = '';\n  export let options: { value: string; label: string }[] = [];\n  export let onSubmit = (a: string, b: string[]) => {};\n  export let onPrevious = () => {};\n  export let defaultValue: string[] = [];\n  export let disablePreviousButton = false;\n  export let isLast = false;\n  export let disabled = false;\n  export let isPreview = false;\n  export let nextButtonProps = {\n    isDisabled: false,\n    isActive: false\n  };\n  export let grade: number | undefined;\n  export let gradeMax = 0;\n  export let disableGrading = false;\n  export let isGradeWithAI = false;\n  export let reason;\n  export let isLoading = false;\n  export let hideGrading = false;\n\n  let gradeWithAI = false;\n\n  function getVal(form, name) {\n    let values: string[] = [];\n    const checkboxEl = form.elements[name];\n\n    for (let i = 0, len = checkboxEl.length; i < len; i++) {\n      if (checkboxEl[i].checked) {\n        values.push(checkboxEl[i].value);\n      }\n    }\n\n    return values;\n  }\n\n  function handleFormSubmit(event) {\n    if (isPreview) return;\n    const values = getVal(event.target, name);\n    onSubmit(name, values);\n    event.target.reset();\n  }\n\n  function handlePrevious(event) {\n    event.preventDefault();\n    onPrevious();\n  }\n\n  function getValidationClassName(option) {\n    if (defaultValue.includes(option.value)) {\n      if (option.is_correct) {\n        return 'border-green-700';\n      } else {\n        return 'border-red-700';\n      }\n    }\n\n    return '';\n  }\n\n  function acceptGrade() {\n    gradeWithAI = false;\n  }\n  function rejectGrade() {\n    gradeWithAI = false;\n    grade = 0;\n  }\n\n  $: gradeWithAI = isGradeWithAI;\n</script>\n\n<form on:submit|preventDefault={handleFormSubmit}>\n  <div class=\"flex items-center justify-between\">\n    <HtmlRender className=\"mt-4 {typeof grade === 'number' && 'w-4/5'}\" disableMaxWidth>\n      <svelte:fragment slot=\"content\">\n        <QuestionTitle {index} {title} />\n      </svelte:fragment>\n    </HtmlRender>\n    {#if !hideGrading}\n      <Grade {gradeMax} bind:grade {disableGrading} />\n    {/if}\n  </div>\n\n  {#if code}\n    <CodeSnippet {code} />\n  {/if}\n\n  <div class=\"ml-4\">\n    {#each options as option}\n      <button\n        class=\"cursor-pointer text-left my-2 border-2 border-gray-300 rounded-md hover:bg-gray-200 dark:hover:bg-neutral-800 w-full {getValidationClassName(\n          option\n        )}\"\n        type=\"button\"\n      >\n        <Checkbox\n          {name}\n          className=\"p-2\"\n          value={option.value}\n          checked={defaultValue.includes(option.value)}\n          label={option.label || option.value}\n          {disabled}\n        />\n      </button>\n    {/each}\n  </div>\n  {#if gradeWithAI}\n    <ReasonBox {reason} {isLoading} {acceptGrade} {rejectGrade} />\n  {/if}\n\n  {#if !isPreview}\n    <div class=\"mt-3 flex items-center justify-between w-full\">\n      <PrimaryButton\n        onClick={handlePrevious}\n        label={$t('course.navItem.lessons.exercises.all_exercises.previous')}\n        isDisabled={disablePreviousButton}\n        variant={VARIANTS.OUTLINED}\n      />\n      <PrimaryButton\n        variant={nextButtonProps.isActive ? VARIANTS.CONTAINED : VARIANTS.OUTLINED}\n        type=\"submit\"\n        label={isLast\n          ? $t('course.navItem.lessons.exercises.all_exercises.finish')\n          : $t('course.navItem.lessons.exercises.all_exercises.next')}\n        isDisabled={nextButtonProps.isDisabled}\n        {name}\n      />\n    </div>\n  {/if}\n</form>\n","<script lang=\"ts\">\n  import CodeSnippet from '$lib/components/CodeSnippet/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import TextArea from '$lib/components/Form/TextArea.svelte';\n  import HtmlRender from '$lib/components/HTMLRender/HTMLRender.svelte';\n  import Grade from '$lib/components/Question/Grade.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import ReasonBox from '../ReasonBox.svelte';\n  import QuestionTitle from '../QuestionTitle.svelte';\n\n  export let title = '';\n  export let index = 1;\n  export let code = '';\n  export let name = '';\n  export let onSubmit = (a: string, b: string) => {};\n  export let onPrevious = () => {};\n  export let defaultValue = '';\n  export let disablePreviousButton = false;\n  export let isLast = false;\n  export let isPreview = false;\n  export let disabled = false;\n  export let grade: number | undefined;\n  export let gradeMax = 0;\n  export let disableGrading = false;\n  export let isGradeWithAI = false;\n  export let reason;\n  export let isLoading = false;\n  export let hideGrading = false;\n\n  let gradeWithAI = false;\n\n  function handleFormSubmit(event) {\n    if (isPreview) return;\n\n    onSubmit(name, defaultValue);\n    // event.target.reset();\n  }\n\n  function handlePrevious(event) {\n    event.preventDefault();\n    onPrevious();\n  }\n\n  function acceptGrade() {\n    gradeWithAI = false;\n  }\n  function rejectGrade() {\n    gradeWithAI = false;\n    grade = 0;\n  }\n\n  $: gradeWithAI = isGradeWithAI;\n</script>\n\n<form on:submit|preventDefault={handleFormSubmit}>\n  <div class=\"flex items-center justify-between mb-2\">\n    <HtmlRender className=\"mt-4 {typeof grade === 'number' && 'w-4/5'}\" disableMaxWidth>\n      <svelte:fragment slot=\"content\">\n        <QuestionTitle {index} {title} />\n      </svelte:fragment>\n    </HtmlRender>\n    {#if !hideGrading}\n      <Grade {gradeMax} bind:grade {disableGrading} />\n    {/if}\n  </div>\n\n  {#if code}\n    <CodeSnippet {code} />\n  {/if}\n\n  <div class=\"ml-4\">\n    {#if disabled}\n      <div class=\"bg-gray-200 dark:bg-gray-500 py-3 px-5 rounded-md mb-3\">\n        {defaultValue === ''\n          ? $t('course.navItem.lessons.exercises.all_exercises.no_answer')\n          : defaultValue}\n      </div>\n      {#if gradeWithAI}\n        <ReasonBox {reason} {isLoading} {acceptGrade} {rejectGrade} />\n      {/if}\n    {:else}\n      <TextArea\n        bind:value={defaultValue}\n        rows={5}\n        placeholder={$t('course.navItem.lessons.exercises.all_exercises.write_your_answer_here')}\n      />\n    {/if}\n  </div>\n\n  {#if !isPreview}\n    <div class=\"mt-3 flex items-center justify-between w-full\">\n      <PrimaryButton\n        variant={VARIANTS.OUTLINED}\n        onClick={handlePrevious}\n        label={$t('course.navItem.lessons.exercises.all_exercises.previous')}\n        isDisabled={disablePreviousButton}\n      />\n      <PrimaryButton\n        variant={VARIANTS.OUTLINED}\n        type=\"submit\"\n        label={isLast\n          ? $t('course.navItem.lessons.exercises.all_exercises.finish')\n          : $t('course.navItem.lessons.exercises.all_exercises.next')}\n        {name}\n      />\n    </div>\n  {/if}\n</form>\n","import { QUESTION_TYPE } from '$lib/components/Question/constants';\nimport { toggleConfetti } from '$lib/components/Confetti/store';\n\nexport const isAnswerCorrect = (options, answer) => {\n  return options.some((option) => option.is_correct && option.value === answer);\n};\n\n/*\n  GRADING RULES\n  Textarea = no validation\n  Single = only one should be correct\n  Multiple = all should be correct\n*/\nexport function wasCorrectAnswerSelected(currentQuestion, answers, isFinished) {\n  if (currentQuestion.question_type.id === QUESTION_TYPE.TEXTAREA) {\n    return true;\n  }\n\n  const answer = answers[currentQuestion.name];\n\n  const formattedAnswers = typeof answer === 'string' ? [answer] : answer;\n\n  let isCorrect = false;\n\n  if (currentQuestion.question_type.id === QUESTION_TYPE.CHECKBOX) {\n    // Every correct answer should be in the selected answer\n    isCorrect = currentQuestion.options\n      .filter((o) => o.is_correct)\n      .every((option) => formattedAnswers?.includes(option.value));\n  } else if (currentQuestion.question_type.id === QUESTION_TYPE.RADIO) {\n    // At least one correct answer should be selected\n    isCorrect = formattedAnswers?.some((answer) =>\n      isAnswerCorrect(currentQuestion.options, answer)\n    );\n  }\n\n  if (isCorrect && !isFinished) {\n    toggleConfetti();\n\n    setTimeout(toggleConfetti, 100);\n  }\n\n  return isCorrect;\n}\n\nexport function getPropsForQuestion(\n  questions,\n  question,\n  questionnaireMetaData,\n  questionIndex,\n  onSubmit,\n  onPrevious,\n  preview\n) {\n  const { answers, isFinished } = questionnaireMetaData;\n  const isLast = questionIndex === questions.length;\n  const isOpenQuesiton = question.question_type.id === QUESTION_TYPE.TEXTAREA;\n  const isCorrect = wasCorrectAnswerSelected(question, answers, isFinished);\n\n  if (!isCorrect && document && document.getElementById('question')) {\n    const questionElement = document.getElementById('question');\n    // Shake if wrong answer was selected\n    questionElement.classList.toggle('shake');\n\n    setTimeout(() => {\n      // Remove so we can trigger animation again\n      questionElement.classList.toggle('shake');\n    }, 200);\n  }\n\n  return {\n    index: questionIndex + '. ',\n    title: question.title,\n    name: `${question.name}`,\n    options: question.options,\n    code: question.code,\n    defaultValue: isOpenQuesiton ? answers[question.name] || '' : answers[question.name] || [],\n    onSubmit,\n    onPrevious,\n    disablePreviousButton: questionIndex === 1,\n    isLast,\n    isPreview: preview || isFinished,\n    isCorrect,\n    disabled: (isFinished && isCorrect) || isFinished,\n    nextButtonProps: isOpenQuesiton\n      ? {\n          label: 'Next',\n          isActive: true\n        }\n      : isCorrect\n        ? {\n            label: isLast ? 'Finish' : 'Next',\n            isActive: true,\n            disableOptionSelect: true,\n            isDisabled: isLast ? false : true // Disable Next button because auto next is enabled\n          }\n        : {\n            label: 'Check',\n            isActive: false\n          }\n  };\n}\n\nexport function filterOutDeleted(array) {\n  return array.filter((item) => !item.deleted_at);\n}\n","<script>\n  import RadioQuestion from '$lib/components/Question/RadioQuestion/index.svelte';\n  import CheckboxQuestion from '$lib/components/Question/CheckboxQuestion/index.svelte';\n  import TextareaQuestion from '$lib/components/Question/TextareaQuestion/index.svelte';\n  import { QUESTION_TYPE } from '$lib/components/Question/constants';\n  import { getPropsForQuestion } from './functions';\n  import { course } from '$lib/components/Course/store';\n  import { COURSE_TYPE } from '$lib/utils/types';\n\n  export let questions = [];\n  export let questionnaireMetaData = {};\n  export let grades = {};\n  export let onSubmit = () => {};\n  export let onPrevious = () => {};\n  export let handleGrade = () => {};\n  export let disableGrading = true;\n  export let isGradeWithAI = false;\n  export let isLoading = false;\n  export let reasons = {};\n</script>\n\n{#each questions as currentQuestion, currentQuestionIndex}\n  {#if QUESTION_TYPE.RADIO === currentQuestion.question_type.id}\n    <RadioQuestion\n      {...getPropsForQuestion(\n        questions,\n        currentQuestion,\n        questionnaireMetaData,\n        currentQuestionIndex + 1,\n        onSubmit,\n        onPrevious,\n        true\n      )}\n      bind:grade={grades[currentQuestion.id]}\n      bind:isGradeWithAI\n      bind:reason={reasons[currentQuestion.id]}\n      bind:isLoading\n      gradeMax={currentQuestion.points}\n      handleGrade={handleGrade(currentQuestion.id)}\n      {disableGrading}\n      disabled={true}\n      hideGrading={$course.type === COURSE_TYPE.SELF_PACED}\n    />\n  {:else if QUESTION_TYPE.CHECKBOX === currentQuestion.question_type.id}\n    <CheckboxQuestion\n      {...getPropsForQuestion(\n        questions,\n        currentQuestion,\n        questionnaireMetaData,\n        currentQuestionIndex + 1,\n        onSubmit,\n        onPrevious,\n        true\n      )}\n      bind:grade={grades[currentQuestion.id]}\n      bind:isGradeWithAI\n      bind:reason={reasons[currentQuestion.id]}\n      bind:isLoading\n      gradeMax={currentQuestion.points}\n      handleGrade={handleGrade(currentQuestion.id)}\n      {disableGrading}\n      disabled={true}\n      hideGrading={$course.type === COURSE_TYPE.SELF_PACED}\n    />\n  {:else if QUESTION_TYPE.TEXTAREA === currentQuestion.question_type.id}\n    <TextareaQuestion\n      {...getPropsForQuestion(\n        questions,\n        currentQuestion,\n        questionnaireMetaData,\n        currentQuestionIndex + 1,\n        onSubmit,\n        onPrevious,\n        true\n      )}\n      bind:grade={grades[currentQuestion.id]}\n      bind:isGradeWithAI\n      bind:reason={reasons[currentQuestion.id]}\n      bind:isLoading\n      gradeMax={currentQuestion.points}\n      handleGrade={handleGrade(currentQuestion.id)}\n      {disableGrading}\n      disabled={true}\n      hideGrading={$course.type === COURSE_TYPE.SELF_PACED}\n    />\n  {/if}\n{/each}\n","import { supabase } from '$lib/utils/functions/supabase';\nimport type { ExerciseSubmissions } from '$lib/utils/types';\n\nexport function fetchSubmissionStatus() {\n  return supabase.from('submissionstatus').select(`*`);\n}\n\nexport function fetchSubmissions(course_id: string) {\n  return supabase\n    .from('submission')\n    .select(\n      `\n    id,\n    created_at,\n    answers:question_answer(*),\n    exercise:exercise_id(\n      id, title, due_by,\n      lesson:lesson_id(id, title),\n      questions:question(\n        *,\n        options:option(*),\n        question_type:question_type_id(id, label)\n      )\n    ),\n    status_id,\n    feedback,\n    course:course_id(*),\n    groupmember:submitted_by(\n      profile(*)\n    )\n  `\n    )\n    .match({\n      course_id\n    });\n}\n\nexport async function fetchSubmission({\n  courseId,\n  exerciseId,\n  submittedBy\n}: {\n  exerciseId: string;\n  courseId?: string;\n  submittedBy?: string;\n}) {\n  const query: {\n    exercise_id: string;\n    course_id?: string;\n    submitted_by?: string;\n  } = {\n    exercise_id: exerciseId\n  };\n\n  if (courseId) {\n    query.course_id = courseId;\n  }\n  if (submittedBy) {\n    query.submitted_by = submittedBy;\n  }\n\n  return supabase\n    .from('submission')\n    .select(\n      `\n      id,\n      answers:question_answer(*),\n      status_id,\n      feedback,\n      submitted_by:groupmember!inner(\n        profile!inner(\n          id,\n          fullname,\n          avatar_url\n        )\n      )\n    `\n    )\n    .match(query)\n    .returns<ExerciseSubmissions[]>();\n}\n\nexport async function updateSubmission(\n  {\n    id,\n    status_id,\n    total,\n    feedback\n  }: { id: string; status_id?: number; total?: number; feedback?: string },\n  otherArgs?: Record<string, string>\n) {\n  const toUpdate: {\n    status_id?: number;\n    total?: number;\n    feedback?: string;\n  } = {\n    status_id,\n    feedback\n  };\n\n  if (typeof total === 'number') {\n    toUpdate.total = total;\n  }\n\n  return supabase.from('submission').update(toUpdate, otherArgs).match({ id });\n}\n\nexport async function deleteSubmission(id: string) {\n  return supabase.from('submission').delete().match({ id });\n}\n\nexport async function updateQuestionAnswer(\n  update: Record<string, string>,\n  match: Record<string, string>\n) {\n  return supabase.from('question_answer').update(update).match(match);\n}\n"],"names":["STATUS","code","$$props","input","input_disabled_value","ctx","attr","label_1","label_1_class_value","current","dirty","label","value","checked","name","isEditable","disabled","className","textfield_changes","grade","gradeMax","snackbar","VARIANTS","primarybutton0_changes","primarybutton1_changes","reason","isLoading","index","title","button","button_class_value","radioitem_changes","getRadioVal","form","name2","val","i","len","radios","options","onSubmit","a","b","onPrevious","isPreview","event","acceptGrade","rejectGrade","$$invalidate","gradeWithAI","isGradeWithAI","checkbox_changes","getVal","values","checkboxEl","defaultValue","textarea_changes","t0_value","isAnswerCorrect","answer","option","wasCorrectAnswerSelected","currentQuestion","answers","isFinished","QUESTION_TYPE","formattedAnswers","isCorrect","o","answer2","toggleConfetti","getPropsForQuestion","questions","question","questionnaireMetaData","questionIndex","preview","isLast","isOpenQuesiton","questionElement","filterOutDeleted","array","item","COURSE_TYPE","get_spread_object","disableGrading","fetchSubmissions","course_id","supabase","fetchSubmission","courseId","exerciseId","submittedBy","query","updateSubmission","id","status_id","total","feedback","otherArgs","toUpdate","deleteSubmission","updateQuestionAnswer","update","match"],"mappings":"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"}