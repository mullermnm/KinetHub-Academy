{"version":3,"file":"index.90bb86b1.js","sources":["../../../../../../src/lib/utils/services/org/index.ts"],"sourcesContent":["import { get } from 'svelte/store';\nimport type { PostgrestError } from '@supabase/supabase-js';\nimport { goto } from '$app/navigation';\nimport { supabase } from '$lib/utils/functions/supabase';\nimport { orgs, currentOrg, orgAudience, orgTeam } from '$lib/utils/store/org';\nimport { ROLE, ROLE_LABEL } from '$lib/utils/constants/roles';\nimport type { CurrentOrg, OrgTeamMember } from '$lib/utils/types/org';\nimport type { OrganizationPlan } from '$lib/utils/types';\n\nexport async function getOrgTeam(orgId: string) {\n  const { data, error } = await supabase\n    .from('organizationmember')\n    .select(\n      `\n      id,\n      email,\n      verified,\n      role_id,\n      profile(\n        id,\n        fullname,\n        email\n      )\n    `\n    )\n    .eq('organization_id', orgId)\n    .neq('role_id', ROLE.STUDENT)\n    .order('id', { ascending: false })\n    .returns<\n      {\n        id: number;\n        email: string;\n        verified: boolean;\n        role_id: number;\n        profile: {\n          id: string;\n          fullname: string;\n          email: string;\n        };\n      }[]\n    >();\n\n  const team: OrgTeamMember[] = [];\n  if (data?.length) {\n    data.forEach((teamMember) => {\n      team.push({\n        id: teamMember.id,\n        email: teamMember?.profile?.email || teamMember.email,\n        verified: teamMember.verified,\n        profileId: teamMember?.profile?.id,\n        fullname: teamMember?.profile?.fullname || '',\n        role: ROLE_LABEL[teamMember?.role_id] || '',\n        isAdmin: teamMember?.role_id === ROLE.ADMIN\n      });\n    });\n\n    orgTeam.set(team);\n  }\n\n  return {\n    team: get(orgTeam),\n    error\n  };\n}\n\nexport async function getOrganizations(userId: string, isOrgSite?: boolean, orgSiteName?: string) {\n  const { data, error } = await supabase\n    .from('organizationmember')\n    .select(\n      `\n      id,\n      profile_id,\n      role_id,\n      created_at,\n      organization!organizationmember_organization_id_fkey (\n        *,\n        organization_plan(\n          plan_name,\n          is_active,\n          subscriptionId:lmz_data->id\n        )\n      )\n    `\n    )\n    .eq('profile_id', userId)\n    .order('id', { ascending: false })\n    .returns<\n      {\n        id: string;\n        profile_id: string;\n        role_id: string;\n        created_at: string;\n        organization: CurrentOrg;\n      }[]\n    >();\n\n  const orgsArray: CurrentOrg[] = [];\n\n  if (Array.isArray(data) && data.length) {\n    data.forEach((orgMember) => {\n      orgsArray.push({\n        ...(orgMember?.organization || {}),\n        memberId: orgMember?.id,\n        role_id: parseInt(orgMember?.role_id),\n        shortName: orgMember?.organization?.name?.substring(0, 2)?.toUpperCase() || ''\n      });\n    });\n\n    orgs.set(orgsArray);\n\n    // If this is a student dashboard\n    if (isOrgSite && orgSiteName) {\n      const orgData = orgsArray.find((org) => org.siteName === orgSiteName);\n\n      if (orgData) {\n        currentOrg.set(orgData);\n      }\n    } else {\n      // Check if org was last visited in localhost\n      if (localStorage) {\n        const lastOrgSiteName = localStorage.getItem('classroomio_org_sitename');\n\n        const lastOrg = orgsArray.find((org) => org.siteName === lastOrgSiteName);\n\n        if (lastOrg) {\n          currentOrg.set(lastOrg);\n        }\n      }\n\n      // Default to setting the first org in the array of orgs\n      const _currentOrg = get(currentOrg);\n      if (!_currentOrg.siteName) {\n        currentOrg.set(orgsArray[0]);\n      }\n    }\n  }\n\n  return {\n    orgs: orgsArray,\n    currentOrg: get(currentOrg),\n    error\n  };\n}\n\nexport async function getOrgAudience(orgId: string) {\n  // get all students who are participants in any course belonging to an org\n  const { data, error } = await supabase\n    .from('profile')\n    .select(\n      `\n      id,\n      fullname,\n      email,\n      avatar_url,\n      created_at,\n      groupmember!inner(\n        role_id,\n        group_id:group!inner(\n          organization_id\n        )\n      )\n    `\n    )\n    .eq('groupmember.group.organization_id', orgId)\n    .eq('groupmember.role_id', ROLE.STUDENT);\n\n  console.log('data', data);\n\n  const audience = (data || []).map((profile) => ({\n    id: profile.id,\n    name: profile.fullname,\n    email: profile.email,\n    avatar_url: profile.avatar_url,\n    date_joined: new Date(profile.created_at).toDateString()\n  }));\n  orgAudience.set(audience);\n\n  return {\n    audience: audience,\n    error\n  };\n}\n\nexport async function getCourseBySiteName(siteName: string) {\n  const { data, error } = await supabase\n    .from('course')\n    .select(\n      `\n      *,\n      lessons:lesson(count),\n      group!inner(\n        organization!inner(id, name, siteName, avatar_url)\n      )\n    `\n    )\n    .eq('group.organization.siteName', siteName)\n    .eq('status', 'ACTIVE')\n    .eq('is_published', true);\n\n  if (error) {\n    return [];\n  }\n\n  return data;\n}\n\nconst CURRENT_ORG_QUERY = `\n  id,\n  name,\n  siteName,\n  avatar_url,\n  landingpage,\n  is_restricted,\n  customization,\n  theme,\n  favicon,\n  customDomain,\n  isCustomDomainVerified,\n  customCode,\n  organization_plan(\n    plan_name,\n    is_active\n  )\n`;\nexport async function getCurrentOrg(siteName: string, justGet = false, isCustomDomain = false) {\n  let response: { data: CurrentOrg[] | null; error: PostgrestError | null } | null = null;\n\n  if (isCustomDomain) {\n    response = await supabase\n      .from('organization')\n      .select(CURRENT_ORG_QUERY)\n      .eq('customDomain', siteName)\n      .filter('isCustomDomainVerified', 'eq', true)\n      .returns<CurrentOrg[]>();\n  } else {\n    response = await supabase\n      .from('organization')\n      .select(CURRENT_ORG_QUERY)\n      .eq('siteName', siteName)\n      .returns<CurrentOrg[]>();\n  }\n  const { data, error } = response;\n\n  const isDataEmpty = !data?.[0];\n\n  if (!justGet && (error || isDataEmpty)) {\n    console.error('Error getOrganization', error);\n    return goto('/404');\n  }\n\n  if (!justGet) {\n    if (isDataEmpty) return;\n\n    currentOrg.set(data[0]);\n  } else if (!isDataEmpty) {\n    return data[0];\n  }\n}\n\nexport async function createOrgPlan(params: {\n  orgId: string;\n  planName: string;\n  triggeredBy: number;\n  data: OrganizationPlan['lmz_data'];\n  supabase: typeof supabase;\n}) {\n  return await params.supabase.from('organization_plan').insert({\n    activated_at: new Date().toDateString(),\n    org_id: params.orgId,\n    triggered_by: params.triggeredBy,\n    plan_name: params.planName,\n    is_active: true,\n    lmz_data: params.data\n  });\n}\n\nexport async function cancelOrgPlan(params: { orgId: string; planName: string }) {\n  return await supabase\n    .from('organization_plan')\n    .update({\n      is_active: false,\n      deactivated_at: new Date().toDateString()\n    })\n    .match({\n      plan_name: params.planName,\n      org_id: params.orgId\n    });\n}\n"],"names":["getOrgTeam","orgId","data","error","supabase","ROLE","team","teamMember","_a","_b","_c","ROLE_LABEL","orgTeam","get_store_value","getOrganizations","userId","isOrgSite","orgSiteName","orgsArray","orgMember","orgs","orgData","org","currentOrg","lastOrgSiteName","lastOrg","getOrgAudience","audience","profile","orgAudience","getCourseBySiteName","siteName"],"mappings":"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"}