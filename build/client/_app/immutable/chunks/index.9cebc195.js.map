{"version":3,"mappings":"+XAAA,MAAAA,EAAA,6BACA,0BACA,wBACA,sBACA,wBACA,kCACA,oBACA,oBACA,oCACA,gCACA,gCACA,gCACA,kCACA,gCACA,sBACA,kCACA,wBACA,kBACA,wBACA,qBAEA,EAEAC,EAAA,EAAAD,EAAA,8BAAAE,EAAA,miFACA,CAAAF,EAAA,6BAAAE,EAAA,iiFACA,CAAAF,EAAA,4BAAAE,EAAA,+hFACA,CAAAF,EAAA,2BAAAE,EAAA,6hFACA,CAAAF,EAAA,4BAAAE,EAAA,+hFACA,CAAAF,EAAA,iCAAAE,EAAA,yiFACA,CAAAF,EAAA,0BAAAE,EAAA,2hFACA,CAAAF,EAAA,0BAAAE,EAAA,2hFACA,CAAAF,EAAA,kCAAAE,EAAA,2iFACA,CAAAF,EAAA,gCAAAE,EAAA,uiFACA,CAAAF,EAAA,gCAAAE,EAAA,uiFACA,CAAAF,EAAA,gCAAAE,EAAA,uiFACA,CAAAF,EAAA,iCAAAE,EAAA,yiFACA,CAAAF,EAAA,gCAAAE,EAAA,uiFACA,CAAAF,EAAA,2BAAAE,EAAA,6hFACA,CAAAF,EAAA,iCAAAE,EAAA,yiFACA,CAAAF,EAAA,4BAAAE,EAAA,+hFACA,CAAAF,EAAA,yBAAAE,EAAA,uhFACA,CAAAF,EAAA,4BAAAE,EAAA,+hFACA,CAAAF,EAAA,2BAAAE,EAAA,4hFAEA","names":["GIT_IDS","GIT_TEMPLATES","__vitePreload"],"sources":["../../../../../../src/lib/mocks/git/index.ts"],"sourcesContent":["export const GIT_IDS: { [key: string]: string } = {\n  GIT_NEWFILES: 'GIT_NEWFILES',\n  GIT_STAGING: 'GIT_STAGING',\n  GIT_COMMIT: 'GIT_COMMIT',\n  GIT_AMEND: 'GIT_AMEND',\n  GIT_BRANCH: 'GIT_BRANCH',\n  GIT_BRANCHMERGE: 'GIT_BRANCHMERGE',\n  GIT_PULL: 'GIT_PULL',\n  GIT_PUSH: 'GIT_PUSH',\n  GIT_GITHUBBRANCH: 'GIT_GITHUBBRANCH',\n  GIT_BRANCHPULL: 'GIT_BRANCHPULL',\n  GIT_BRANCHPUSH: 'GIT_BRANCHPUSH',\n  GIT_GITHUBFLOW: 'GIT_GITHUBFLOW',\n  GIT_GITHUBPAGES: 'GIT_GITHUBPAGES',\n  GIT_GITHUBFORK: 'GIT_GITHUBFORK',\n  GIT_CLONE: 'GIT_CLONE',\n  GIT_PULLREQUEST: 'GIT_PULLREQUEST',\n  GIT_IGNORE: 'GIT_IGNORE',\n  GIT_SSH: 'GIT_SSH',\n  GIT_REVERT: 'GIT_REVERT',\n  GIT_RESET: 'GIT_RESET'\n};\n\nexport const GIT_TEMPLATES = {\n  [GIT_IDS.GIT_NEWFILES]: async () => (await import('./001_git_newFiles')).default,\n  [GIT_IDS.GIT_STAGING]: async () => (await import('./002_git_staging')).default,\n  [GIT_IDS.GIT_COMMIT]: async () => (await import('./003_git_commit')).default,\n  [GIT_IDS.GIT_AMEND]: async () => (await import('./004_git_amend')).default,\n  [GIT_IDS.GIT_BRANCH]: async () => (await import('./005_git_branch')).default,\n  [GIT_IDS.GIT_BRANCHMERGE]: async () => (await import('./006_git_branchMerge')).default,\n  [GIT_IDS.GIT_PULL]: async () => (await import('./007_git_pull')).default,\n  [GIT_IDS.GIT_PUSH]: async () => (await import('./008_git_push')).default,\n  [GIT_IDS.GIT_GITHUBBRANCH]: async () => (await import('./009_git_githubBranch')).default,\n  [GIT_IDS.GIT_BRANCHPULL]: async () => (await import('./010_git_branchPull')).default,\n  [GIT_IDS.GIT_BRANCHPUSH]: async () => (await import('./011_git_branchPush')).default,\n  [GIT_IDS.GIT_GITHUBFLOW]: async () => (await import('./012_git_githubFlow')).default,\n  [GIT_IDS.GIT_GITHUBPAGES]: async () => (await import('./013_git_githubPages')).default,\n  [GIT_IDS.GIT_GITHUBFORK]: async () => (await import('./014_git_githubFork')).default,\n  [GIT_IDS.GIT_CLONE]: async () => (await import('./015_git_clone')).default,\n  [GIT_IDS.GIT_PULLREQUEST]: async () => (await import('./016_git_pullRequest')).default,\n  [GIT_IDS.GIT_IGNORE]: async () => (await import('./017_git_ignore')).default,\n  [GIT_IDS.GIT_SSH]: async () => (await import('./018_gitSsh')).default,\n  [GIT_IDS.GIT_REVERT]: async () => (await import('./019_git_revert')).default,\n  [GIT_IDS.GIT_RESET]: async () => (await import('./020_git_reset')).default\n};\n"],"file":"_app/immutable/chunks/index.9cebc195.js"}