{"version":3,"file":"index.f39bbea9.js","sources":["../../../../../../src/lib/components/RoleBasedSecurity/index.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { profile } from '$lib/utils/store/user';\n  import { group } from '../Course/store';\n  import type { GroupPerson } from '$lib/utils/types';\n  import { isOrgAdmin } from '$lib/utils/store/org';\n  import { ROLE } from '$lib/utils/constants/roles';\n\n  export let allowedRoles: number[] = [];\n  export let onDenied = () => {};\n  export let onlyStudent = false;\n\n  let userRole: number = 0;\n\n  function isAllowed(userRole) {\n    return allowedRoles.includes(userRole);\n  }\n\n  $: {\n    const user: GroupPerson = $group.people.find((person) => person.profile_id === $profile.id)!;\n\n    userRole = user ? user.role_id : userRole;\n\n    if (!$isOrgAdmin && $group.people.length && !isAllowed(userRole)) {\n      onDenied();\n    }\n  }\n\n  $: show = onlyStudent ? isAllowed(ROLE.STUDENT) : isAllowed(userRole) || $isOrgAdmin;\n</script>\n\n{#if show}\n  <slot />\n{/if}\n"],"names":["allowedRoles","$$props","onDenied","userRole2","user","$group","person","$profile","$isOrgAdmin","isAllowed","userRole","$$invalidate","show","onlyStudent","ROLE"],"mappings":"+vCAOa,CAAA,aAAAA,EAAA,CAAA,CAAA,EAAAC,EACA,CAAA,SAAAC,EAAA,IAAA,6CAMF,OAAAF,EAAA,SAAAG,CAAA,6MAGT,CACQ,MAAAC,EAAAC,EAAA,OAAA,KAAAC,GAAAA,EAAA,aAAAC,EAAA,EAAA,uBAID,CAAAC,GAAAH,EAAA,OAAA,QAAA,CAAAI,EAAAC,CAAA,GACHR,EAAA,iBAIJS,EAAA,EAAAC,EAAAC,EAAwBJ,EAAAK,EAAA,OAAA,EAA0BL,EAAAC,CAAA,GAAAF,CAAA"}