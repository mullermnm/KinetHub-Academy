{"version":3,"file":"purify.es.a24860ce.js","sources":["../../../../../../../../node_modules/.pnpm/dompurify@2.5.7/node_modules/dompurify/dist/purify.es.js"],"sourcesContent":["/*! @license DOMPurify 2.5.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.5.7/LICENSE */\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar hasOwnProperty = Object.hasOwnProperty,\n  setPrototypeOf = Object.setPrototypeOf,\n  isFrozen = Object.isFrozen,\n  getPrototypeOf = Object.getPrototypeOf,\n  getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar freeze = Object.freeze,\n  seal = Object.seal,\n  create = Object.create; // eslint-disable-line import/no-mutable-exports\nvar _ref = typeof Reflect !== 'undefined' && Reflect,\n  apply = _ref.apply,\n  construct = _ref.construct;\nif (!apply) {\n  apply = function apply(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\nif (!freeze) {\n  freeze = function freeze(x) {\n    return x;\n  };\n}\nif (!seal) {\n  seal = function seal(x) {\n    return x;\n  };\n}\nif (!construct) {\n  construct = function construct(Func, args) {\n    return _construct(Func, _toConsumableArray(args));\n  };\n}\nvar arrayForEach = unapply(Array.prototype.forEach);\nvar arrayPop = unapply(Array.prototype.pop);\nvar arrayPush = unapply(Array.prototype.push);\nvar stringToLowerCase = unapply(String.prototype.toLowerCase);\nvar stringToString = unapply(String.prototype.toString);\nvar stringMatch = unapply(String.prototype.match);\nvar stringReplace = unapply(String.prototype.replace);\nvar stringIndexOf = unapply(String.prototype.indexOf);\nvar stringTrim = unapply(String.prototype.trim);\nvar regExpTest = unapply(RegExp.prototype.test);\nvar typeErrorCreate = unconstruct(TypeError);\nfunction unapply(func) {\n  return function (thisArg) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return apply(func, thisArg, args);\n  };\n}\nfunction unconstruct(func) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return construct(func, args);\n  };\n}\n\n/* Add properties to a lookup table */\nfunction addToSet(set, array, transformCaseFunc) {\n  var _transformCaseFunc;\n  transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n  var l = array.length;\n  while (l--) {\n    var element = array[l];\n    if (typeof element === 'string') {\n      var lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n        element = lcElement;\n      }\n    }\n    set[element] = true;\n  }\n  return set;\n}\n\n/* Shallow clone an object */\nfunction clone(object) {\n  var newObject = create(null);\n  var property;\n  for (property in object) {\n    if (apply(hasOwnProperty, object, [property]) === true) {\n      newObject[property] = object[property];\n    }\n  }\n  return newObject;\n}\n\n/* IE10 doesn't support __lookupGetter__ so lets'\n * simulate it. It also automatically checks\n * if the prop is function or getter and behaves\n * accordingly. */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    var desc = getOwnPropertyDescriptor(object, prop);\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n    object = getPrototypeOf(object);\n  }\n  function fallbackValue(element) {\n    console.warn('fallback value for', element);\n    return null;\n  }\n  return fallbackValue;\n}\n\nvar html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\n\n// SVG\nvar svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\nvar svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nvar svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\nvar mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nvar mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\nvar text = freeze(['#text']);\n\nvar html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\nvar svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\nvar mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\nvar xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n// eslint-disable-next-line unicorn/better-regex\nvar MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nvar ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nvar TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\nvar DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\nvar ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nvar IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nvar IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nvar ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nvar DOCTYPE_NAME = seal(/^html$/i);\nvar CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\nvar getGlobal = function getGlobal() {\n  return typeof window === 'undefined' ? null : window;\n};\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {Document} document The document object (to determine policy name suffix)\n * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported).\n */\nvar _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\n  if (_typeof(trustedTypes) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  var suffix = null;\n  var ATTR_NAME = 'data-tt-policy-suffix';\n  if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\n    suffix = document.currentScript.getAttribute(ATTR_NAME);\n  }\n  var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML: function createHTML(html) {\n        return html;\n      },\n      createScriptURL: function createScriptURL(scriptUrl) {\n        return scriptUrl;\n      }\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n    return null;\n  }\n};\nfunction createDOMPurify() {\n  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n  var DOMPurify = function DOMPurify(root) {\n    return createDOMPurify(root);\n  };\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = '2.5.7';\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n  var originalDocument = window.document;\n  var document = window.document;\n  var DocumentFragment = window.DocumentFragment,\n    HTMLTemplateElement = window.HTMLTemplateElement,\n    Node = window.Node,\n    Element = window.Element,\n    NodeFilter = window.NodeFilter,\n    _window$NamedNodeMap = window.NamedNodeMap,\n    NamedNodeMap = _window$NamedNodeMap === void 0 ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n    HTMLFormElement = window.HTMLFormElement,\n    DOMParser = window.DOMParser,\n    trustedTypes = window.trustedTypes;\n  var ElementPrototype = Element.prototype;\n  var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  var getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    var template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n  var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\n  var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';\n  var _document = document,\n    implementation = _document.implementation,\n    createNodeIterator = _document.createNodeIterator,\n    createDocumentFragment = _document.createDocumentFragment,\n    getElementsByTagName = _document.getElementsByTagName;\n  var importNode = originalDocument.importNode;\n  var documentMode = {};\n  try {\n    documentMode = clone(document).documentMode ? document.documentMode : {};\n  } catch (_) {}\n  var hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined && documentMode !== 9;\n  var MUSTACHE_EXPR$1 = MUSTACHE_EXPR,\n    ERB_EXPR$1 = ERB_EXPR,\n    TMPLIT_EXPR$1 = TMPLIT_EXPR,\n    DATA_ATTR$1 = DATA_ATTR,\n    ARIA_ATTR$1 = ARIA_ATTR,\n    IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE$1 = ATTR_WHITESPACE,\n    CUSTOM_ELEMENT$1 = CUSTOM_ELEMENT;\n  var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  var ALLOWED_TAGS = null;\n  var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));\n\n  /* Allowed attribute names */\n  var ALLOWED_ATTR = null;\n  var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));\n\n  /*\n   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {\n    tagNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: false\n    }\n  }));\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  var FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  var FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  var ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  var ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  var ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  var ALLOW_SELF_CLOSE_IN_ATTR = true;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  var SAFE_FOR_TEMPLATES = false;\n\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  var SAFE_FOR_XML = true;\n\n  /* Decide if document with <html>... should be returned */\n  var WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  var SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  var FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  var RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  var RETURN_DOM_FRAGMENT = false;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  var RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  var SANITIZE_DOM = true;\n\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  var SANITIZE_NAMED_PROPS = false;\n  var SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n\n  /* Keep element content when removing element? */\n  var KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  var IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  var USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  var FORBID_CONTENTS = null;\n  var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n\n  /* Tags that are safe for data: URIs */\n  var DATA_URI_TAGS = null;\n  var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n\n  /* Attributes safe for values like \"javascript:\" */\n  var URI_SAFE_ATTRIBUTES = null;\n  var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n  var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  var NAMESPACE = HTML_NAMESPACE;\n  var IS_EMPTY_INPUT = false;\n\n  /* Allowed XHTML+XML namespaces */\n  var ALLOWED_NAMESPACES = null;\n  var DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n\n  /* Parsing of strict XHTML documents */\n  var PARSER_MEDIA_TYPE;\n  var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  var transformCaseFunc;\n\n  /* Keep a reference to config to pass to hooks */\n  var CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  var formElement = document.createElement('form');\n  var isRegexOrFunction = function isRegexOrFunction(testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  var _parseConfig = function _parseConfig(cfg) {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || _typeof(cfg) !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n    PARSER_MEDIA_TYPE =\n    // eslint-disable-next-line unicorn/prefer-includes\n    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;\n\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES),\n    // eslint-disable-line indent\n    cfg.ADD_URI_SAFE_ATTR,\n    // eslint-disable-line indent\n    transformCaseFunc // eslint-disable-line indent\n    ) // eslint-disable-line indent\n    : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS),\n    // eslint-disable-line indent\n    cfg.ADD_DATA_URI_TAGS,\n    // eslint-disable-line indent\n    transformCaseFunc // eslint-disable-line indent\n    ) // eslint-disable-line indent\n    : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html$1);\n        addToSet(ALLOWED_ATTR, html);\n      }\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg$1);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl$1);\n        addToSet(ALLOWED_ATTR, mathMl);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n    CONFIG = cfg;\n  };\n  var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n  var HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);\n\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  var ALL_SVG_TAGS = addToSet({}, svg$1);\n  addToSet(ALL_SVG_TAGS, svgFilters);\n  addToSet(ALL_SVG_TAGS, svgDisallowed);\n  var ALL_MATHML_TAGS = addToSet({}, mathMl$1);\n  addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n\n  /**\n   *\n   *\n   * @param  {Element} element a DOM element whose namespace is being checked\n   * @returns {boolean} Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  var _checkValidNamespace = function _checkValidNamespace(element) {\n    var parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template'\n      };\n    }\n    var tagName = stringToLowerCase(element.tagName);\n    var parentTagName = stringToLowerCase(parent.tagName);\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n    }\n\n    // For XHTML and XML documents that support custom namespaces\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return true;\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  var _forceRemove = function _forceRemove(node) {\n    arrayPush(DOMPurify.removed, {\n      element: node\n    });\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      node.parentNode.removeChild(node);\n    } catch (_) {\n      try {\n        node.outerHTML = emptyHTML;\n      } catch (_) {\n        node.remove();\n      }\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  var _removeAttribute = function _removeAttribute(name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node\n      });\n    }\n    node.removeAttribute(name);\n\n    // We void attribute values for unremovable \"is\"\" attributes\n    if (name === 'is' && !ALLOWED_ATTR[name]) {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(node);\n        } catch (_) {}\n      } else {\n        try {\n          node.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  var _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    var doc;\n    var leadingWhitespace;\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      var matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n    }\n    var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n    var body = doc.body || doc.documentElement;\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n    }\n\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n\n  /**\n   * _createIterator\n   *\n   * @param  {Document} root document/fragment to create iterator for\n   * @return {Iterator} iterator instance\n   */\n  var _createIterator = function _createIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root,\n    // eslint-disable-next-line no-bitwise\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null, false);\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  var _isClobbered = function _isClobbered(elm) {\n    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');\n  };\n\n  /**\n   * _isNode\n   *\n   * @param  {Node} obj object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  var _isNode = function _isNode(object) {\n    return _typeof(Node) === 'object' ? object instanceof Node : object && _typeof(object) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n    arrayForEach(hooks[entryPoint], function (hook) {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  var _sanitizeElements = function _sanitizeElements(currentNode) {\n    var content;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check if tagname contains Unicode */\n    if (regExpTest(/[\\u0080-\\uFFFF]/, currentNode.nodeName)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    var tagName = transformCaseFunc(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName: tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Mitigate a problem with templates inside select */\n    if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any ocurrence of processing instructions */\n    if (currentNode.nodeType === 7) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any kind of possibly harmful comments */\n    if (SAFE_FOR_XML && currentNode.nodeType === 8 && regExpTest(/<[/\\w]/g, currentNode.data)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n      }\n\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        var parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        var childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n        if (childNodes && parentNode) {\n          var childCount = childNodes.length;\n          for (var i = childCount - 1; i >= 0; --i) {\n            var childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      content = stringReplace(content, MUSTACHE_EXPR$1, ' ');\n      content = stringReplace(content, ERB_EXPR$1, ' ');\n      content = stringReplace(content, TMPLIT_EXPR$1, ' ');\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n      // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n      _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n      // Alternative, second condition checks if it's an `is`-attribute, AND\n      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if (value) {\n      return false;\n    } else ;\n    return true;\n  };\n\n  /**\n   * _basicCustomElementCheck\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   * @param {string} tagName name of the tag of the node to sanitize\n   */\n  var _basicCustomElementTest = function _basicCustomElementTest(tagName) {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT$1);\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n  var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    var attr;\n    var value;\n    var lcName;\n    var l;\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n    var attributes = currentNode.attributes;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes) {\n      return;\n    }\n    var hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR\n    };\n    l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      attr = attributes[l];\n      var _attr = attr,\n        name = _attr.name,\n        namespaceURI = _attr.namespaceURI;\n      value = name === 'value' ? attr.value : stringTrim(attr.value);\n      lcName = transformCaseFunc(name);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        value = stringReplace(value, MUSTACHE_EXPR$1, ' ');\n        value = stringReplace(value, ERB_EXPR$1, ' ');\n        value = stringReplace(value, TMPLIT_EXPR$1, ' ');\n      }\n\n      /* Is `value` valid for this attribute? */\n      var lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Handle attributes that require Trusted Types */\n      if (trustedTypesPolicy && _typeof(trustedTypes) === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n        if (namespaceURI) ; else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML':\n              {\n                value = trustedTypesPolicy.createHTML(value);\n                break;\n              }\n            case 'TrustedScriptURL':\n              {\n                value = trustedTypesPolicy.createScriptURL(value);\n                break;\n              }\n          }\n        }\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n        if (_isClobbered(currentNode)) {\n          _forceRemove(currentNode);\n        } else {\n          arrayPop(DOMPurify.removed);\n        }\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    var shadowNode;\n    var shadowIterator = _createIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} configuration object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty) {\n    var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var body;\n    var importedNode;\n    var currentNode;\n    var oldNode;\n    var returnNode;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n\n    /* Check we can run. Otherwise fall back or ignore */\n    if (!DOMPurify.isSupported) {\n      if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n        if (typeof dirty === 'string') {\n          return window.toStaticHTML(dirty);\n        }\n        if (_isNode(dirty)) {\n          return window.toStaticHTML(dirty.outerHTML);\n        }\n      }\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        var tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n      // eslint-disable-next-line unicorn/prefer-includes\n      dirty.indexOf('<') === -1) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Fix IE's strange behavior with manipulated textNodes #89 */\n      if (currentNode.nodeType === 3 && currentNode === oldNode) {\n        continue;\n      }\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n      oldNode = currentNode;\n    }\n    oldNode = null;\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n      return returnNode;\n    }\n    var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Serialize doctype if allowed */\n    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, ' ');\n      serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, ' ');\n      serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR$1, ' ');\n    }\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function (cfg) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {string} tag Tag name of containing element.\n   * @param  {string} attr Attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n    var lcTag = transformCaseFunc(tag);\n    var lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   * @return {Function} removed(popped) hook\n   */\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      return arrayPop(hooks[entryPoint]);\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   *\n   */\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n  return DOMPurify;\n}\nvar purify = createDOMPurify();\n\nexport { purify as default };\n//# sourceMappingURL=purify.es.js.map\n"],"names":["e","_typeof","obj","_setPrototypeOf","o","p","_isNativeReflectConstruct","_construct","Parent","args","Class","a","Constructor","instance","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_arrayLikeToArray","iter","minLen","n","len","i","arr2","hasOwnProperty","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","freeze","seal","create","_ref","apply","construct","fun","thisValue","x","Func","arrayForEach","unapply","arrayPop","arrayPush","stringToLowerCase","stringToString","stringMatch","stringReplace","stringIndexOf","stringTrim","regExpTest","typeErrorCreate","unconstruct","func","thisArg","_len","_key","_len2","_key2","addToSet","set","array","transformCaseFunc","_transformCaseFunc","l","element","lcElement","clone","object","newObject","property","lookupGetter","prop","desc","fallbackValue","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","text","html","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","CUSTOM_ELEMENT","getGlobal","_createTrustedTypesPolicy","trustedTypes","document","suffix","ATTR_NAME","policyName","scriptUrl","createDOMPurify","window","DOMPurify","root","originalDocument","DocumentFragment","HTMLTemplateElement","Node","Element","NodeFilter","_window$NamedNodeMap","NamedNodeMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","getNextSibling","getChildNodes","getParentNode","template","trustedTypesPolicy","emptyHTML","_document","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","documentMode","hooks","MUSTACHE_EXPR$1","ERB_EXPR$1","TMPLIT_EXPR$1","DATA_ATTR$1","ARIA_ATTR$1","IS_SCRIPT_OR_DATA$1","ATTR_WHITESPACE$1","CUSTOM_ELEMENT$1","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","SANITIZE_NAMED_PROPS_PREFIX","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","DEFAULT_PARSER_MEDIA_TYPE","CONFIG","formElement","isRegexOrFunction","testValue","_parseConfig","cfg","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","ALL_SVG_TAGS","ALL_MATHML_TAGS","_checkValidNamespace","parent","tagName","parentTagName","_forceRemove","node","_removeAttribute","name","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","body","_createIterator","_isClobbered","elm","_isNode","_executeHook","entryPoint","currentNode","data","hook","_sanitizeElements","content","_basicCustomElementTest","parentNode","childNodes","childCount","childClone","_isValidAttribute","lcTag","lcName","value","_sanitizeAttributes","attr","attributes","hookEvent","_attr","namespaceURI","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","importedNode","oldNode","returnNode","nodeIterator","serializedHTML","tag","hookFunction","purify"],"mappings":"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","x_google_ignoreList":[0]}