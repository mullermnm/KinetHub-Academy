{"version":3,"file":"store.f203a796.js","sources":["../../../../../../src/lib/components/Course/components/Lesson/store/lessons.ts","../../../../../../src/lib/components/Course/store.ts"],"sourcesContent":["import { writable } from 'svelte/store';\nimport type { Writable, Updater } from 'svelte/store';\nimport {\n  createLesson,\n  updateLesson,\n  deleteLesson,\n  createLessonSection,\n  updateLessonSection,\n  deleteLessonSection\n} from '$lib/utils/services/courses';\nimport type { Lesson, Course, LessonPage, LessonComment, LessonSection } from '$lib/utils/types';\nimport { LOCALE } from '$lib/utils/types';\nimport { snackbar } from '$lib/components/Snackbar/store';\nimport { lessonValidation } from '$lib/utils/functions/validator';\n\nexport const uploadCourseVideoStore = writable({\n  isModalOpen: false\n});\n\nexport const lessons: Writable<Lesson[]> = writable([]);\n\nexport const lessonSections: Writable<LessonSection[]> = writable([]);\n\nexport const lesson = writable<LessonPage>({\n  id: null,\n  locale: LOCALE.EN,\n  title: '',\n  totalExercises: 0,\n  totalComments: 0,\n  isSaving: false,\n  isFetching: false,\n  materials: {\n    note: '',\n    slide_url: '',\n    videos: []\n  },\n  exercises: [],\n  lesson_completion: []\n});\n\nexport const lessonByTranslation = writable<{\n  [key: string]: Record<LOCALE, string>;\n}>({});\n\nexport const lessonComments = writable<LessonComment[]>([]);\n\nexport const isLessonDirty = writable(false);\n\nexport function handleAddLesson() {\n  lessons.update(((_lessons) => {\n    return [\n      ..._lessons,\n      {\n        id: null,\n        title: 'Untitled lesson',\n        // profile: undefined,\n        call_url: undefined,\n        lesson_at: new Date(),\n        is_unlocked: false\n      }\n    ];\n  }) as Updater<any>);\n}\n\nexport async function handleDelete(lessonId: Lesson['id'] | undefined) {\n  // Need to implement soft delete\n  if (!lessonId) {\n    return;\n  }\n  const { error } = await deleteLesson(lessonId);\n\n  if (error) {\n    snackbar.error(error.message);\n    return console.error('Error deleting course', error);\n  }\n\n  lessons.update((_lessons) => _lessons.filter((lesson) => lesson.id !== lessonId));\n  lessonSections.update((_sections) =>\n    _sections.map((section) => {\n      section.lessons = section.lessons.filter((lesson) => lesson.id !== lessonId);\n      return section;\n    })\n  );\n\n  snackbar.success('snackbar.generic.success_delete');\n\n  console.log(`lessonId`, lessonId);\n}\n\nexport async function handleDeleteSection(sectionId: LessonSection['id'] | undefined) {\n  // Need to implement soft delete\n  if (!sectionId) {\n    return;\n  }\n  const { error } = await deleteLessonSection(sectionId);\n\n  if (error) {\n    snackbar.error(error.message);\n    return console.error('Error deleting course', error);\n  }\n\n  lessonSections.update((_sections) => _sections.filter((section) => section.id !== sectionId));\n  lessons.update((_lessons) => _lessons.filter((lesson) => lesson.section_id !== sectionId));\n\n  snackbar.success('snackbar.generic.success_delete');\n\n  console.log(`sectionId`, sectionId);\n}\n\nexport async function handleSaveLesson(lesson: Lesson, courseId: Course['id']) {\n  const result = lessonValidation(lesson);\n\n  if (Object.keys(result).length) {\n    return result;\n  }\n\n  console.log(`handleSaveLesson lesson`, lesson);\n  const newLesson = {\n    title: lesson.title,\n    lesson_at: lesson?.lesson_at,\n    call_url: lesson?.call_url,\n    teacher_id: lesson?.profile ? lesson?.profile.id : undefined,\n    course_id: courseId,\n    is_unlocked: lesson.is_unlocked,\n    section_id: lesson.section_id\n  };\n\n  let newLessonData: any[] | null = null;\n\n  if (lesson.id) {\n    // No need to get the result of update cause we have all in local state\n    await updateLesson(newLesson, lesson.id);\n  } else {\n    const { data } = await createLesson(newLesson);\n\n    newLessonData = data;\n  }\n  return newLessonData;\n}\nexport async function handleSaveLessonSection(\n  section: Partial<LessonSection>,\n  courseId: Course['id']\n) {\n  const result = lessonValidation(section);\n\n  if (Object.keys(result).length) {\n    return result;\n  }\n  console.log(`handleSaveLessonSection lesson`, section);\n\n  const newSection: Partial<LessonSection> = {\n    id: section.id,\n    title: section.title,\n    course_id: courseId\n  };\n\n  let newSectionData: any[] | null = null;\n\n  if (newSection.id) {\n    // No need to get the result of update cause we have all in local state\n    await updateLessonSection(newSection, newSection.id);\n  } else {\n    const { data } = await createLessonSection(newSection);\n\n    newSectionData = data;\n  }\n\n  return newSectionData;\n}\n\nexport async function handleUpdateLessonMaterials(lesson: any, lessonId: Lesson['id']) {\n  const materials = {\n    ...lesson.materials\n  };\n  delete materials.lesson_completion;\n  delete materials.profile;\n\n  return await updateLesson(materials, lessonId);\n}\n\nexport const deleteLessonVideo = (index: any) => {\n  lesson.update((currentLesson) => ({\n    ...currentLesson,\n    materials: {\n      ...currentLesson.materials,\n      videos: currentLesson.materials.videos.filter((video, i) => i !== index)\n    }\n  }));\n};\n","import { writable } from 'svelte/store';\nimport type { Writable } from 'svelte/store';\nimport { lessons, lessonSections } from './components/Lesson/store/lessons';\nimport { ROLE } from '$lib/utils/constants/roles';\nimport type { Course, GroupPerson, Lesson, LessonSection } from '$lib/utils/types';\nimport { COURSE_TYPE, COURSE_VERSION } from '$lib/utils/types';\n\nexport const defaultCourse: Course = {\n  id: '',\n  title: '',\n  description: '',\n  type: COURSE_TYPE.LIVE_CLASS,\n  cost: 0,\n  currency: '',\n  status: 'ACTIVE',\n  is_certificate_downloadable: false,\n  certificate_theme: 'professional',\n  is_published: false,\n  created_at: new Date().toDateString(),\n  updated_at: new Date().toDateString(),\n  attendance: [],\n  polls: [],\n  version: COURSE_VERSION.V2,\n  metadata: {\n    requirements: '',\n    description: '',\n    goals: '',\n    videoUrl: '',\n    showDiscount: false,\n    discount: 0,\n    paymentLink: '',\n    reward: {\n      show: false,\n      description: ''\n    },\n    instructor: {\n      name: '',\n      role: '',\n      coursesNo: 0,\n      description: '',\n      imgUrl: ''\n    },\n    lessonTabsOrder: [\n      { id: 1, name: 'course.navItem.lessons.materials.tabs.note.title' },\n      { id: 2, name: 'course.navItem.lessons.materials.tabs.slide.title' },\n      { id: 3, name: 'course.navItem.lessons.materials.tabs.video.title' }\n    ],\n    grading: false,\n    lessonDownload: true,\n    allowNewStudent: false\n  }\n};\n\nexport const course: Writable<Course> = writable({ ...defaultCourse });\n\nexport const mockGroupMember = {\n  id: '434534534535',\n  group_id: '434534534535',\n  role_id: 1,\n  profile_id: 'vcvbcvbcvbb----434534534535',\n  email: null,\n  profile: {\n    id: 'vcvbcvbcvbb----434534534535',\n    fullname: 'Rotimi Best',\n    username: 'robertblake',\n    avatar_url: '',\n    created_at: '2021-08-08T13:42:13+00:00',\n    updated_at: '2021-08-08T13:42:13+00:00'\n  }\n};\n\ntype GroupStore = {\n  id: string;\n  tutors: GroupPerson[];\n  students: GroupPerson[];\n  people: GroupPerson[];\n  members?: GroupPerson[];\n  memberId?: string;\n};\n\nexport const group = writable<GroupStore>({\n  id: '',\n  tutors: [],\n  students: [],\n  people: []\n});\n\nexport async function setCourse(data: Course, setLesson = true) {\n  if (!data || !(Object.values(data) && Object.values(data).length)) return;\n  // const tutorsById = {};\n\n  if (data.group) {\n    const groupData = Object.assign(data.group, {\n      tutors: [],\n      students: [],\n      people: []\n    }) as GroupStore;\n\n    if (Array.isArray(groupData.members)) {\n      for (const member of groupData.members) {\n        if (member.role_id === ROLE.STUDENT) {\n          groupData.students.push(member);\n        } else if (member.profile) {\n          groupData.tutors.push({\n            ...member.profile,\n            memberId: member.id\n          });\n        }\n      }\n\n      groupData.people = groupData.members;\n    }\n\n    delete groupData.members;\n\n    group.set(groupData);\n  }\n\n  if (setLesson) {\n    const orderedLessons = sortLesson(data.lessons);\n    lessons.set(orderedLessons);\n\n    if (data.lesson_section) {\n      const sections = data.lesson_section?.map((section) => {\n        const lessons = (data.lessons || []).filter((lesson) => lesson.section_id === section.id);\n        section.lessons = sortLesson(lessons);\n        return section;\n      });\n\n      lessonSections.set(sortLessonSection(sections));\n    }\n  }\n\n  delete data.lessons;\n  delete data?.lesson_section;\n\n  if (data.metadata && !Object.values(data.metadata)) {\n    data.metadata = {\n      requirements: '',\n      description: '',\n      goals: '',\n      videoUrl: '',\n      showDiscount: false,\n      discount: 0,\n      reward: {\n        show: false,\n        description: ''\n      },\n      instructor: {\n        name: '',\n        role: '',\n        coursesNo: 0,\n        description: '',\n        imgUrl: ''\n      },\n      allowNewStudent: false\n    };\n  }\n\n  if (!data.certificate_theme) {\n    data.certificate_theme = 'professional';\n  }\n  course.set(data);\n}\n\nfunction sortLesson(lessons: Lesson[] = []) {\n  return lessons\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n    .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));\n}\n\nfunction sortLessonSection(sections: LessonSection[] = []) {\n  return sections\n    .sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\n    .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));\n}\n"],"names":["uploadCourseVideoStore","writable","lessons","lessonSections","lesson","LOCALE","lessonByTranslation","isLessonDirty","handleDelete","lessonId","error","deleteLesson","snackbar","_lessons","lesson2","_sections","section","handleDeleteSection","sectionId","deleteLessonSection","handleSaveLesson","courseId","result","lessonValidation","newLesson","newLessonData","updateLesson","data","createLesson","handleSaveLessonSection","newSection","newSectionData","updateLessonSection","createLessonSection","handleUpdateLessonMaterials","materials","deleteLessonVideo","index","currentLesson","video","i","defaultCourse","COURSE_TYPE","COURSE_VERSION","course","group","setCourse","setLesson","groupData","member","ROLE","orderedLessons","sortLesson","sections","_a","lessons2","sortLessonSection","a","b"],"mappings":"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"}