{"version":3,"file":"theme.5ef85a9d.js","sources":["../../../../../../src/lib/utils/functions/trycatch.ts","../../../../../../../../node_modules/.pnpm/color2k@2.0.3/node_modules/color2k/dist/index.exports.import.es.mjs","../../../../../../src/lib/utils/functions/theme.ts"],"sourcesContent":["export function tc<T>(tryFunc: () => T, catchFunc: T | ((e?: Error) => T)) {\n  let val: T;\n  try {\n    val = tryFunc();\n  } catch (e: unknown) {\n    if (typeof catchFunc === 'function') {\n      // @ts-ignore\n      val = catchFunc(e);\n    } else {\n      val = catchFunc;\n    }\n  }\n  return val;\n}\n","/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */\nfunction guard(low, high, value) {\n  return Math.min(Math.max(low, value), high);\n}\n\nclass ColorError extends Error {\n  constructor(color) {\n    super(`Failed to parse color: \"${color}\"`);\n  }\n}\nvar ColorError$1 = ColorError;\n\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */\nfunction parseToRgba(color) {\n  if (typeof color !== 'string') throw new ColorError$1(color);\n  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];\n  let normalizedColor = color.trim();\n  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n  if (reducedHexMatch) {\n    const arr = Array.from(reducedHexMatch).slice(1);\n    return [...arr.slice(0, 3).map(x => parseInt(r(x, 2), 16)), parseInt(r(arr[3] || 'f', 2), 16) / 255];\n  }\n  const hexMatch = hexRegex.exec(normalizedColor);\n  if (hexMatch) {\n    const arr = Array.from(hexMatch).slice(1);\n    return [...arr.slice(0, 3).map(x => parseInt(x, 16)), parseInt(arr[3] || 'ff', 16) / 255];\n  }\n  const rgbaMatch = rgbaRegex.exec(normalizedColor);\n  if (rgbaMatch) {\n    const arr = Array.from(rgbaMatch).slice(1);\n    return [...arr.slice(0, 3).map(x => parseInt(x, 10)), parseFloat(arr[3] || '1')];\n  }\n  const hslaMatch = hslaRegex.exec(normalizedColor);\n  if (hslaMatch) {\n    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n    if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n    if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a];\n  }\n  throw new ColorError$1(color);\n}\nfunction hash(str) {\n  let hash = 5381;\n  let i = str.length;\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return (hash >>> 0) % 2341;\n}\nconst colorToInt = x => parseInt(x.replace(/_/g, ''), 36);\nconst compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'.split(' ').reduce((acc, next) => {\n  const key = colorToInt(next.substring(0, 3));\n  const hex = colorToInt(next.substring(3)).toString(16);\n\n  // NOTE: padStart could be used here but it breaks Node 6 compat\n  // https://github.com/ricokahler/color2k/issues/351\n  let prefix = '';\n  for (let i = 0; i < 6 - hex.length; i++) {\n    prefix += '0';\n  }\n  acc[key] = `${prefix}${hex}`;\n  return acc;\n}, {});\n\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */\nfunction nameToHex(color) {\n  const normalizedColorName = color.toLowerCase().trim();\n  const result = compressedColorMap[hash(normalizedColorName)];\n  if (!result) throw new ColorError$1(color);\n  return `#${result}`;\n}\nconst r = (str, amount) => Array.from(Array(amount)).map(() => str).join('');\nconst reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');\nconst hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');\nconst rgbaRegex = new RegExp(`^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(',\\\\s*(\\\\d+)\\\\s*', 2)}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`, 'i');\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\nconst roundColor = color => {\n  return Math.round(color * 255);\n};\nconst hslToRgb = (hue, saturation, lightness) => {\n  let l = lightness / 100;\n  if (saturation === 0) {\n    // achromatic\n    return [l, l, l].map(roundColor);\n  }\n\n  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n  const huePrime = (hue % 360 + 360) % 360 / 60;\n  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n  if (huePrime >= 0 && huePrime < 1) {\n    red = chroma;\n    green = secondComponent;\n  } else if (huePrime >= 1 && huePrime < 2) {\n    red = secondComponent;\n    green = chroma;\n  } else if (huePrime >= 2 && huePrime < 3) {\n    green = chroma;\n    blue = secondComponent;\n  } else if (huePrime >= 3 && huePrime < 4) {\n    green = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 4 && huePrime < 5) {\n    red = secondComponent;\n    blue = chroma;\n  } else if (huePrime >= 5 && huePrime < 6) {\n    red = chroma;\n    blue = secondComponent;\n  }\n  const lightnessModification = l - chroma / 2;\n  const finalRed = red + lightnessModification;\n  const finalGreen = green + lightnessModification;\n  const finalBlue = blue + lightnessModification;\n  return [finalRed, finalGreen, finalBlue].map(roundColor);\n};\n\n// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\n\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */\nfunction parseToHsla(color) {\n  const [red, green, blue, alpha] = parseToRgba(color).map((value, index) =>\n  // 3rd index is alpha channel which is already normalized\n  index === 3 ? value : value / 255);\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const lightness = (max + min) / 2;\n\n  // achromatic\n  if (max === min) return [0, 0, lightness, alpha];\n  const delta = max - min;\n  const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  const hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n  return [hue, saturation, lightness, alpha];\n}\n\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction hsla(hue, saturation, lightness, alpha) {\n  return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */\nfunction adjustHue(color, degrees) {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h + degrees, s, l, a);\n}\n\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction darken(color, amount) {\n  const [hue, saturation, lightness, alpha] = parseToHsla(color);\n  return hsla(hue, saturation, lightness - amount, alpha);\n}\n\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */\nfunction desaturate(color, amount) {\n  const [h, s, l, a] = parseToHsla(color);\n  return hsla(h, s - amount, l, a);\n}\n\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n\n/**\n * Returns a number (float) representing the luminance of a color.\n */\nfunction getLuminance(color) {\n  if (color === 'transparent') return 0;\n  function f(x) {\n    const channel = x / 255;\n    return channel <= 0.04045 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n  }\n  const [r, g, b] = parseToRgba(color);\n  return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\n\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */\nfunction getContrast(color1, color2) {\n  const luminance1 = getLuminance(color1);\n  const luminance2 = getLuminance(color2);\n  return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */\nfunction rgba(red, green, blue, alpha) {\n  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */\nfunction mix(color1, color2, weight) {\n  const normalize = (n, index) =>\n  // 3rd index is alpha channel which is already normalized\n  index === 3 ? n : n / 255;\n  const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n  const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n\n  // The formula is copied from the original Sass implementation:\n  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n  const alphaDelta = a2 - a1;\n  const normalizedWeight = weight * 2 - 1;\n  const combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n  const weight2 = (combinedWeight + 1) / 2;\n  const weight1 = 1 - weight2;\n  const r = (r1 * weight1 + r2 * weight2) * 255;\n  const g = (g1 * weight1 + g2 * weight2) * 255;\n  const b = (b1 * weight1 + b2 * weight2) * 255;\n  const a = a2 * weight + a1 * (1 - weight);\n  return rgba(r, g, b, a);\n}\n\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */\nfunction getScale(...colors) {\n  return n => {\n    const lastIndex = colors.length - 1;\n    const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n    const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n    const color1 = colors[lowIndex];\n    const color2 = colors[highIndex];\n    const unit = 1 / lastIndex;\n    const weight = (n - unit * lowIndex) / unit;\n    return mix(color1, color2, weight);\n  };\n}\n\nconst guidelines = {\n  decorative: 1.5,\n  readable: 3,\n  aa: 4.5,\n  aaa: 7\n};\n\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */\nfunction hasBadContrast(color, standard = 'aa', background = '#fff') {\n  return getContrast(color, background) < guidelines[standard];\n}\n\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction lighten(color, amount) {\n  return darken(color, -amount);\n}\n\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */\nfunction transparentize(color, amount) {\n  const [r, g, b, a] = parseToRgba(color);\n  return rgba(r, g, b, a - amount);\n}\n\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */\nfunction opacify(color, amount) {\n  return transparentize(color, -amount);\n}\n\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */\nfunction readableColorIsBlack(color) {\n  return getLuminance(color) > 0.179;\n}\n\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */\nfunction readableColor(color) {\n  return readableColorIsBlack(color) ? '#000' : '#fff';\n}\n\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */\nfunction saturate(color, amount) {\n  return desaturate(color, -amount);\n}\n\n/**\n * Takes in any color and returns it as a hex code.\n */\nfunction toHex(color) {\n  const [r, g, b, a] = parseToRgba(color);\n  let hex = x => {\n    const h = guard(0, 255, x).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    return h.length === 1 ? `0${h}` : h;\n  };\n  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;\n}\n\n/**\n * Takes in any color and returns it as an rgba string.\n */\nfunction toRgba(color) {\n  return rgba(...parseToRgba(color));\n}\n\n/**\n * Takes in any color and returns it as an hsla string.\n */\nfunction toHsla(color) {\n  return hsla(...parseToHsla(color));\n}\n\nexport { ColorError$1 as ColorError, adjustHue, darken, desaturate, getContrast, getLuminance, getScale, guard, hasBadContrast, hsla, lighten, mix, opacify, parseToHsla, parseToRgba, readableColor, readableColorIsBlack, rgba, saturate, toHex, toHsla, toRgba, transparentize };\n//# sourceMappingURL=index.exports.import.es.mjs.map\n","import { tc } from '$lib/utils/functions/trycatch';\nimport { darken, lighten } from 'color2k';\n\nfunction updateThemeClassInBody(newClass: string, customRegex?: string) {\n  const regex = /theme-[\\w]+/gi;\n  document.body.className = document.body.className.replace(customRegex ?? regex, newClass);\n}\n\nexport function setTheme(theme: string) {\n  const _theme = theme || '';\n\n  // this condition checks if it's a hex code from the db or a specified theme\n  if (theme && !theme.includes('theme-')) {\n    // add the \"custom-theme\" styles to the head tag\n    injectCustomTheme(theme);\n\n    // add the \"custom-theme\" classname to the head tag\n    setCustomTheme('theme-custom');\n  } else if (!theme && document.body.className.includes('theme-')) {\n    // if no theme and a theme is already applied, remove it\n    updateThemeClassInBody(_theme);\n\n    return;\n  }\n\n  // In case theme already exists in dom, don't add\n  if (document.body.className.includes(_theme)) return;\n\n  // set the new theme\n  localStorage.setItem('theme', _theme);\n  document.body.className = document.body.className.concat(' ', _theme);\n}\n\nexport function setCustomTheme(theme?: string) {\n  // In case the default theme is added but another theme exists\n  if (!theme && document.body.className.includes('theme-')) {\n    updateThemeClassInBody(theme || '');\n    return;\n  }\n\n  // Remove any class starting with \"theme-\"\n  updateThemeClassInBody('');\n\n  const _theme = theme || '';\n  // Add the new theme if it doesn't already exist\n  if (!document.body.className.includes(_theme)) {\n    localStorage.setItem('theme', _theme);\n    document.body.className = document.body.className.concat(' ', _theme);\n  }\n}\n\n// Handle this functions in a try catch if hex is not valid.\nconst _lighten = (hex: string, no: number) => tc(() => lighten(hex, no), hex);\nconst _darken = (hex: string, no: number) => tc(() => darken(hex, no), hex);\n\nexport function injectCustomTheme(hex: string) {\n  const styleId = 'theme-custom';\n  let styleElement = document.getElementById(styleId);\n\n  // generate shades using color2k's lighten function\n  const shades = {\n    50: _lighten(hex, 0.7),\n    100: _lighten(hex, 0.6),\n    200: _lighten(hex, 0.5),\n    300: _lighten(hex, 0.4),\n    400: _lighten(hex, 0.3),\n    500: _lighten(hex, 0.2),\n    600: _lighten(hex, 0.1),\n    700: hex,\n    800: _darken(hex, 0.1),\n    900: _darken(hex, 0.2)\n  };\n\n  const styleContent = `\n    .theme-custom .bg-primary-50 { background-color: ${shades[50]} !important; }\n    .theme-custom .bg-primary-100 { background-color: ${shades[100]} !important; }\n    .theme-custom .bg-primary-200 { background-color: ${shades[200]} !important; }\n    .theme-custom .bg-primary-300 { background-color: ${shades[300]} !important; }\n    .theme-custom .bg-primary-400 { background-color: ${shades[400]} !important; }\n    .theme-custom .bg-primary-500 { background-color: ${shades[500]} !important; }\n    .theme-custom .bg-primary-600 { background-color: ${shades[600]} !important; }\n    .theme-custom .bg-primary-700 { background-color: ${shades[700]} !important; }\n    .theme-custom .bg-primary-800 { background-color: ${shades[800]} !important; }\n    .theme-custom .bg-primary-900 { background-color: ${shades[900]} !important; }\n\n    .theme-custom .text-primary-50 { color: ${shades[50]} !important; }\n    .theme-custom .text-primary-100 { color: ${shades[100]} !important; }\n    .theme-custom .text-primary-200 { color: ${shades[200]} !important; }\n    .theme-custom .text-primary-300 { color: ${shades[300]} !important; }\n    .theme-custom .text-primary-400 { color: ${shades[400]} !important; }\n    .theme-custom .text-primary-500 { color: ${shades[500]} !important; }\n    .theme-custom .text-primary-600 { color: ${shades[600]} !important; }\n    .theme-custom .text-primary-700 { color: ${shades[700]} !important; }\n    .theme-custom .text-primary-800 { color: ${shades[800]} !important; }\n    .theme-custom .text-primary-900 { color: ${shades[900]} !important; }\n\n    .theme-custom .border-primary-50 { border-color: ${shades[50]} !important; }\n    .theme-custom .border-primary-100 { border-color: ${shades[100]} !important; }\n    .theme-custom .border-primary-200 { border-color: ${shades[200]} !important; }\n    .theme-custom .border-primary-300 { border-color: ${shades[300]} !important; }\n    .theme-custom .border-primary-400 { border-color: ${shades[400]} !important; }\n    .theme-custom .border-primary-500 { border-color: ${shades[500]} !important; }\n    .theme-custom .border-primary-600 { border-color: ${shades[600]} !important; }\n    .theme-custom .border-primary-700 { border-color: ${shades[700]} !important; }\n    .theme-custom .border-primary-800 { border-color: ${shades[800]} !important; }\n    .theme-custom .border-primary-900 { border-color: ${shades[900]} !important; }\n  `;\n\n  if (styleElement) {\n    styleElement.innerHTML = styleContent;\n  } else {\n    styleElement = document.createElement('style');\n    styleElement.id = styleId;\n    styleElement.innerHTML = styleContent;\n    document.head.appendChild(styleElement);\n  }\n}\n"],"names":["tc","tryFunc","catchFunc","val","e","guard","low","high","value","ColorError","color","ColorError$1","parseToRgba","normalizedColor","namedColorRegex","nameToHex","reducedHexMatch","reducedHexRegex","arr","x","r","hexMatch","hexRegex","rgbaMatch","rgbaRegex","hslaMatch","hslaRegex","h","s","l","a","hslToRgb","hash","str","i","colorToInt","compressedColorMap","acc","next","key","hex","prefix","normalizedColorName","result","amount","roundColor","hue","saturation","lightness","huePrime","chroma","secondComponent","red","green","blue","lightnessModification","finalRed","finalGreen","finalBlue","parseToHsla","alpha","index","max","min","delta","hsla","darken","lighten","updateThemeClassInBody","newClass","customRegex","regex","setTheme","theme","_theme","injectCustomTheme","setCustomTheme","_lighten","no","_darken","styleId","styleElement","shades","styleContent"],"mappings":"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","x_google_ignoreList":[1]}