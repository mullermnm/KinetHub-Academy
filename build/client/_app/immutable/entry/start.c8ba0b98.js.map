{"version":3,"file":"start.c8ba0b98.js","sources":["../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/utils/url.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/client/session-storage.js","../../../../../../../../node_modules/.pnpm/devalue@4.3.3/node_modules/devalue/src/constants.js","../../../../../../../../node_modules/.pnpm/devalue@4.3.3/node_modules/devalue/src/parse.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/utils/array.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/utils/exports.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/utils/promises.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/control.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/shared.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/client/client.js","../../../../../../../../node_modules/.pnpm/@sveltejs+kit@1.29.0_svelte@4.1.2_vite@4.4.8_@types+node@18.11.10_sass@1.64.2_terser@5.34.1_/node_modules/@sveltejs/kit/src/runtime/client/start.js"],"sourcesContent":["import { BROWSER } from 'esm-env';\n\n/**\n * Matches a URI scheme. See https://www.rfc-editor.org/rfc/rfc3986#section-3.1\n * @type {RegExp}\n */\nexport const SCHEME = /^[a-z][a-z\\d+\\-.]+:/i;\n\nconst absolute = /^([a-z]+:)?\\/?\\//;\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\tif (SCHEME.test(path)) return path;\n\tif (path[0] === '#') return base + path;\n\n\tconst base_match = absolute.exec(base);\n\tconst path_match = absolute.exec(path);\n\n\tif (!base_match) {\n\t\tthrow new Error(`bad base path: \"${base}\"`);\n\t}\n\n\tconst baseparts = path_match ? [] : base.slice(base_match[0].length).split('/');\n\tconst pathparts = path_match ? path.slice(path_match[0].length).split('/') : path.split('/');\n\n\tbaseparts.pop();\n\n\tfor (let i = 0; i < pathparts.length; i += 1) {\n\t\tconst part = pathparts[i];\n\t\tif (part === '.') continue;\n\t\telse if (part === '..') baseparts.pop();\n\t\telse baseparts.push(part);\n\t}\n\n\tconst prefix = (path_match && path_match[0]) || (base_match && base_match[0]) || '';\n\n\treturn `${prefix}${baseparts.join('/')}`;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/**\n * Decode pathname excluding %25 to prevent further double decoding of params\n * @param {string} pathname\n */\nexport function decode_pathname(pathname) {\n\treturn pathname.split('%25').map(decodeURI).join('%25');\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest\n\t\tparams[key] = decodeURIComponent(params[key]);\n\t}\n\n\treturn params;\n}\n\n/**\n * The error when a URL is malformed is not very helpful, so we augment it with the URI\n * @param {string} uri\n */\nexport function decode_uri(uri) {\n\ttry {\n\t\treturn decodeURI(uri);\n\t} catch (e) {\n\t\tif (e instanceof Error) {\n\t\t\te.message = `Failed to decode URI: ${uri}\\n` + e.message;\n\t\t}\n\t\tthrow e;\n\t}\n}\n\n/**\n * URL properties that could change during the lifetime of the page,\n * which excludes things like `origin`\n */\nconst tracked_url_properties = /** @type {const} */ ([\n\t'href',\n\t'pathname',\n\t'search',\n\t'searchParams',\n\t'toString',\n\t'toJSON'\n]);\n\n/**\n * @param {URL} url\n * @param {() => void} callback\n */\nexport function make_trackable(url, callback) {\n\tconst tracked = new URL(url);\n\n\tfor (const property of tracked_url_properties) {\n\t\tObject.defineProperty(tracked, property, {\n\t\t\tget() {\n\t\t\t\tcallback();\n\t\t\t\treturn url[property];\n\t\t\t},\n\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true\n\t\t});\n\t}\n\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\ttracked[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(url, opts);\n\t\t};\n\t}\n\n\tdisable_hash(tracked);\n\n\treturn tracked;\n}\n\n/**\n * Disallow access to `url.hash` on the server and in `load`\n * @param {URL} url\n */\nexport function disable_hash(url) {\n\tallow_nodejs_console_log(url);\n\n\tObject.defineProperty(url, 'hash', {\n\t\tget() {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot access event.url.hash. Consider using `$page.url.hash` inside a component instead'\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Disallow access to `url.search` and `url.searchParams` during prerendering\n * @param {URL} url\n */\nexport function disable_search(url) {\n\tallow_nodejs_console_log(url);\n\n\tfor (const property of ['search', 'searchParams']) {\n\t\tObject.defineProperty(url, property, {\n\t\t\tget() {\n\t\t\t\tthrow new Error(`Cannot access url.${property} on a page with prerendering enabled`);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Allow URL to be console logged, bypassing disabled properties.\n * @param {URL} url\n */\nfunction allow_nodejs_console_log(url) {\n\tif (!BROWSER) {\n\t\t// @ts-ignore\n\t\turl[Symbol.for('nodejs.util.inspect.custom')] = (depth, opts, inspect) => {\n\t\t\treturn inspect(new URL(url), opts);\n\t\t};\n\t}\n}\n\nconst DATA_SUFFIX = '/__data.json';\n\n/** @param {string} pathname */\nexport function has_data_suffix(pathname) {\n\treturn pathname.endsWith(DATA_SUFFIX);\n}\n\n/** @param {string} pathname */\nexport function add_data_suffix(pathname) {\n\treturn pathname.replace(/\\/$/, '') + DATA_SUFFIX;\n}\n\n/** @param {string} pathname */\nexport function strip_data_suffix(pathname) {\n\treturn pathname.slice(0, -DATA_SUFFIX.length);\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody[]} values\n */\nexport function hash(...values) {\n\tlet hash = 5381;\n\n\tfor (const value of values) {\n\t\tif (typeof value === 'string') {\n\t\t\tlet i = value.length;\n\t\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t\t} else if (ArrayBuffer.isView(value)) {\n\t\t\tconst buffer = new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\n\t\t\tlet i = buffer.length;\n\t\t\twhile (i) hash = (hash * 33) ^ buffer[--i];\n\t\t} else {\n\t\t\tthrow new TypeError('value must be a string or TypedArray');\n\t\t}\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","import { DEV } from 'esm-env';\nimport { hash } from '../hash.js';\n\nlet loading = 0;\n\nexport const native_fetch = window.fetch;\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (DEV) {\n\tlet can_inspect_stack_trace = false;\n\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tcheck_stack_trace();\n\n\t/**\n\t * @param {RequestInfo | URL} input\n\t * @param {RequestInit & Record<string, any> | undefined} init\n\t */\n\twindow.fetch = (input, init) => {\n\t\t// Check if fetch was called via load_node. the lock method only checks if it was called at the\n\t\t// same time, but not necessarily if it was called from `load`.\n\t\t// We use just the filename as the method name sometimes does not appear on the CI.\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack_array = /** @type {string} */ (new Error().stack).split('\\n');\n\t\t// We need to do a cutoff because Safari and Firefox maintain the stack\n\t\t// across events and for example traces a `fetch` call triggered from a button\n\t\t// back to the creation of the event listener and the element creation itself,\n\t\t// where at some point client.js will show up, leading to false positives.\n\t\tconst cutoff = stack_array.findIndex((a) => a.includes('load@') || a.includes('at load'));\n\t\tconst stack = stack_array.slice(0, cutoff + 2).join('\\n');\n\n\t\tconst in_load_heuristic = can_inspect_stack_trace\n\t\t\t? stack.includes('src/runtime/client/client.js')\n\t\t\t: loading;\n\n\t\t// This flag is set in initial_fetch and subsequent_fetch\n\t\tconst used_kit_fetch = init?.__sveltekit_fetch__;\n\n\t\tif (in_load_heuristic && !used_kit_fetch) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://kit.svelte.dev/docs/load#making-fetch-requests`\n\t\t\t);\n\t\t}\n\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n} else {\n\twindow.fetch = (input, init) => {\n\t\tconst method = input instanceof Request ? input.method : init?.method || 'GET';\n\n\t\tif (method !== 'GET') {\n\t\t\tcache.delete(build_selector(input));\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\nconst cache = new Map();\n\n/**\n * Should be called on the initial run of load functions that hydrate the page.\n * Saves any requests with cache-control max-age to the cache.\n * @param {URL | string} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst selector = build_selector(resource, opts);\n\n\tconst script = document.querySelector(selector);\n\tif (script?.textContent) {\n\t\tconst { body, ...init } = JSON.parse(script.textContent);\n\n\t\tconst ttl = script.getAttribute('data-ttl');\n\t\tif (ttl) cache.set(selector, { body, init, ttl: 1000 * Number(ttl) });\n\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn DEV ? dev_fetch(resource, opts) : window.fetch(resource, opts);\n}\n\n/**\n * Tries to get the response from the cache, if max-age allows it, else does a fetch.\n * @param {URL | string} resource\n * @param {string} resolved\n * @param {RequestInit} [opts]\n */\nexport function subsequent_fetch(resource, resolved, opts) {\n\tif (cache.size > 0) {\n\t\tconst selector = build_selector(resource, opts);\n\t\tconst cached = cache.get(selector);\n\t\tif (cached) {\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Request/cache#value\n\t\t\tif (\n\t\t\t\tperformance.now() < cached.ttl &&\n\t\t\t\t['default', 'force-cache', 'only-if-cached', undefined].includes(opts?.cache)\n\t\t\t) {\n\t\t\t\treturn new Response(cached.body, cached.init);\n\t\t\t}\n\n\t\t\tcache.delete(selector);\n\t\t}\n\t}\n\n\treturn DEV ? dev_fetch(resolved, opts) : window.fetch(resolved, opts);\n}\n\n/**\n * @param {RequestInfo | URL} resource\n * @param {RequestInit & Record<string, any> | undefined} opts\n */\nfunction dev_fetch(resource, opts) {\n\tconst patched_opts = { ...opts };\n\t// This assigns the __sveltekit_fetch__ flag and makes it non-enumerable\n\tObject.defineProperty(patched_opts, '__sveltekit_fetch__', {\n\t\tvalue: true,\n\t\twritable: true,\n\t\tconfigurable: true\n\t});\n\treturn window.fetch(resource, patched_opts);\n}\n\n/**\n * Build the cache key for a given request\n * @param {URL | RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nfunction build_selector(resource, opts) {\n\tconst url = JSON.stringify(resource instanceof Request ? resource.url : resource);\n\n\tlet selector = `script[data-sveltekit-fetched][data-url=${url}]`;\n\n\tif (opts?.headers || opts?.body) {\n\t\t/** @type {import('types').StrictBody[]} */\n\t\tconst values = [];\n\n\t\tif (opts.headers) {\n\t\t\tvalues.push([...new Headers(opts.headers)].join(','));\n\t\t}\n\n\t\tif (opts.body && (typeof opts.body === 'string' || ArrayBuffer.isView(opts.body))) {\n\t\t\tvalues.push(opts.body);\n\t\t}\n\n\t\tselector += `[data-hash=\"${hash(...values)}\"]`;\n\t}\n\n\treturn selector;\n}\n","const param_pattern = /^(\\[)?(\\.\\.\\.)?(\\w+)(?:=(\\w+))?(\\])?$/;\n\n/**\n * Creates the regex pattern, extracts parameter names, and generates types for a route\n * @param {string} id\n */\nexport function parse_route_id(id) {\n\t/** @type {import('types').RouteParam[]} */\n\tconst params = [];\n\n\tconst pattern =\n\t\tid === '/'\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${get_route_segments(id)\n\t\t\t\t\t\t.map((segment) => {\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst rest_match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (rest_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: rest_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: rest_match[2],\n\t\t\t\t\t\t\t\t\toptional: false,\n\t\t\t\t\t\t\t\t\trest: true,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// special case — /[[optional]]/ could contain zero segments\n\t\t\t\t\t\t\tconst optional_match = /^\\[\\[(\\w+)(?:=(\\w+))?\\]\\]$/.exec(segment);\n\t\t\t\t\t\t\tif (optional_match) {\n\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\tname: optional_match[1],\n\t\t\t\t\t\t\t\t\tmatcher: optional_match[2],\n\t\t\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\t\t\trest: false,\n\t\t\t\t\t\t\t\t\tchained: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn '(?:/([^/]+))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst parts = segment.split(/\\[(.+?)\\](?!\\])/);\n\t\t\t\t\t\t\tconst result = parts\n\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('x+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(String.fromCharCode(parseInt(content.slice(2), 16)));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (content.startsWith('u+')) {\n\t\t\t\t\t\t\t\t\t\t\treturn escape(\n\t\t\t\t\t\t\t\t\t\t\t\tString.fromCharCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t...content\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.slice(2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.map((code) => parseInt(code, 16))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst match = param_pattern.exec(content);\n\t\t\t\t\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst [, is_optional, is_rest, name, matcher] = match;\n\t\t\t\t\t\t\t\t\t\t// It's assumed that the following invalid route id cases are already checked\n\t\t\t\t\t\t\t\t\t\t// - unbalanced brackets\n\t\t\t\t\t\t\t\t\t\t// - optional param following rest param\n\n\t\t\t\t\t\t\t\t\t\tparams.push({\n\t\t\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t\t\t\tmatcher,\n\t\t\t\t\t\t\t\t\t\t\toptional: !!is_optional,\n\t\t\t\t\t\t\t\t\t\t\trest: !!is_rest,\n\t\t\t\t\t\t\t\t\t\t\tchained: is_rest ? i === 1 && parts[0] === '' : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\treturn is_rest ? '(.*?)' : is_optional ? '([^/]*)?' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn escape(content);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.join('');\n\n\t\t\t\t\t\t\treturn '/' + result;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}/?$`\n\t\t\t  );\n\n\treturn { pattern, params };\n}\n\nconst optional_param_regex = /\\/\\[\\[\\w+?(?:=\\w+)?\\]\\]/;\n\n/**\n * Removes optional params from a route ID.\n * @param {string} id\n * @returns The route id with optional params removed\n */\nexport function remove_optional_params(id) {\n\treturn id.replace(optional_param_regex, '');\n}\n\n/**\n * Returns `false` for `(group)` segments\n * @param {string} segment\n */\nfunction affects_path(segment) {\n\treturn !/^\\([^)]+\\)$/.test(segment);\n}\n\n/**\n * Splits a route id into its segments, removing segments that\n * don't affect the path (i.e. groups). The root route is represented by `/`\n * and will be returned as `['']`.\n * @param {string} route\n * @returns string[]\n */\nexport function get_route_segments(route) {\n\treturn route.slice(1).split('/').filter(affects_path);\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {import('types').RouteParam[]} params\n * @param {Record<string, import('@sveltejs/kit').ParamMatcher>} matchers\n */\nexport function exec(match, params, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst result = {};\n\n\tconst values = match.slice(1);\n\tconst values_needing_match = values.filter((value) => value !== undefined);\n\n\tlet buffered = 0;\n\n\tfor (let i = 0; i < params.length; i += 1) {\n\t\tconst param = params[i];\n\t\tlet value = values[i - buffered];\n\n\t\t// in the `[[a=b]]/.../[...rest]` case, if one or more optional parameters\n\t\t// weren't matched, roll the skipped values into the rest\n\t\tif (param.chained && param.rest && buffered) {\n\t\t\tvalue = values\n\t\t\t\t.slice(i - buffered, i + 1)\n\t\t\t\t.filter((s) => s)\n\t\t\t\t.join('/');\n\n\t\t\tbuffered = 0;\n\t\t}\n\n\t\t// if `value` is undefined, it means this is an optional or rest parameter\n\t\tif (value === undefined) {\n\t\t\tif (param.rest) result[param.name] = '';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!param.matcher || matchers[param.matcher](value)) {\n\t\t\tresult[param.name] = value;\n\n\t\t\t// Now that the params match, reset the buffer if the next param isn't the [...rest]\n\t\t\t// and the next value is defined, otherwise the buffer will cause us to skip values\n\t\t\tconst next_param = params[i + 1];\n\t\t\tconst next_value = values[i + 1];\n\t\t\tif (next_param && !next_param.rest && next_param.optional && next_value && param.chained) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\n\t\t\t// There are no more params and no more values, but all non-empty values have been matched\n\t\t\tif (\n\t\t\t\t!next_param &&\n\t\t\t\t!next_value &&\n\t\t\t\tObject.keys(result).length === values_needing_match.length\n\t\t\t) {\n\t\t\t\tbuffered = 0;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\t// in the `/[[a=b]]/...` case, if the value didn't satisfy the matcher,\n\t\t// keep track of the number of skipped optional parameters and continue\n\t\tif (param.optional && param.chained) {\n\t\t\tbuffered++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// otherwise, if the matcher returns `false`, the route did not match\n\t\treturn;\n\t}\n\n\tif (buffered) return;\n\treturn result;\n}\n\n/** @param {string} str */\nfunction escape(str) {\n\treturn (\n\t\tstr\n\t\t\t.normalize()\n\t\t\t// escape [ and ] before escaping other characters, since they are used in the replacements\n\t\t\t.replace(/[[\\]]/g, '\\\\$&')\n\t\t\t// replace %, /, ? and # with their encoded versions because decode_pathname leaves them untouched\n\t\t\t.replace(/%/g, '%25')\n\t\t\t.replace(/\\//g, '%2[Ff]')\n\t\t\t.replace(/\\?/g, '%3[Ff]')\n\t\t\t.replace(/#/g, '%23')\n\t\t\t// escape characters that have special meaning in regex\n\t\t\t.replace(/[.*+?^${}()|\\\\]/g, '\\\\$&')\n\t);\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse({ nodes, server_loads, dictionary, matchers }) {\n\tconst layouts_with_server_load = new Set(server_loads);\n\n\treturn Object.entries(dictionary).map(([id, [leaf, layouts, errors]]) => {\n\t\tconst { pattern, params } = parse_route_id(id);\n\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, params, matchers);\n\t\t\t},\n\t\t\terrors: [1, ...(errors || [])].map((n) => nodes[n]),\n\t\t\tlayouts: [0, ...(layouts || [])].map(create_layout_loader),\n\t\t\tleaf: create_leaf_loader(leaf)\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n\n\t/**\n\t * @param {number} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader]}\n\t */\n\tfunction create_leaf_loader(id) {\n\t\t// whether or not the route uses the server data is\n\t\t// encoded using the ones' complement, to save space\n\t\tconst uses_server_data = id < 0;\n\t\tif (uses_server_data) id = ~id;\n\t\treturn [uses_server_data, nodes[id]];\n\t}\n\n\t/**\n\t * @param {number | undefined} id\n\t * @returns {[boolean, import('types').CSRPageNodeLoader] | undefined}\n\t */\n\tfunction create_layout_loader(id) {\n\t\t// whether or not the layout uses the server data is\n\t\t// encoded in the layouts array, to save space\n\t\treturn id === undefined ? id : [layouts_with_server_load.has(id), nodes[id]];\n\t}\n}\n","/**\n * Read a value from `sessionStorage`\n * @param {string} key\n */\nexport function get(key) {\n\ttry {\n\t\treturn JSON.parse(sessionStorage[key]);\n\t} catch {\n\t\t// do nothing\n\t}\n}\n\n/**\n * Write a value to `sessionStorage`\n * @param {string} key\n * @param {any} value\n */\nexport function set(key, value) {\n\tconst json = JSON.stringify(value);\n\ttry {\n\t\tsessionStorage[key] = json;\n\t} catch {\n\t\t// do nothing\n\t}\n}\n","export const UNDEFINED = -1;\nexport const HOLE = -2;\nexport const NAN = -3;\nexport const POSITIVE_INFINITY = -4;\nexport const NEGATIVE_INFINITY = -5;\nexport const NEGATIVE_ZERO = -6;\n","import {\n\tHOLE,\n\tNAN,\n\tNEGATIVE_INFINITY,\n\tNEGATIVE_ZERO,\n\tPOSITIVE_INFINITY,\n\tUNDEFINED\n} from './constants.js';\n\n/**\n * Revive a value serialized with `devalue.stringify`\n * @param {string} serialized\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function parse(serialized, revivers) {\n\treturn unflatten(JSON.parse(serialized), revivers);\n}\n\n/**\n * Revive a value flattened with `devalue.stringify`\n * @param {number | any[]} parsed\n * @param {Record<string, (value: any) => any>} [revivers]\n */\nexport function unflatten(parsed, revivers) {\n\tif (typeof parsed === 'number') return hydrate(parsed, true);\n\n\tif (!Array.isArray(parsed) || parsed.length === 0) {\n\t\tthrow new Error('Invalid input');\n\t}\n\n\tconst values = /** @type {any[]} */ (parsed);\n\n\tconst hydrated = Array(values.length);\n\n\t/**\n\t * @param {number} index\n\t * @returns {any}\n\t */\n\tfunction hydrate(index, standalone = false) {\n\t\tif (index === UNDEFINED) return undefined;\n\t\tif (index === NAN) return NaN;\n\t\tif (index === POSITIVE_INFINITY) return Infinity;\n\t\tif (index === NEGATIVE_INFINITY) return -Infinity;\n\t\tif (index === NEGATIVE_ZERO) return -0;\n\n\t\tif (standalone) throw new Error(`Invalid input`);\n\n\t\tif (index in hydrated) return hydrated[index];\n\n\t\tconst value = values[index];\n\n\t\tif (!value || typeof value !== 'object') {\n\t\t\thydrated[index] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tif (typeof value[0] === 'string') {\n\t\t\t\tconst type = value[0];\n\n\t\t\t\tconst reviver = revivers?.[type];\n\t\t\t\tif (reviver) {\n\t\t\t\t\treturn (hydrated[index] = reviver(hydrate(value[1])));\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Date':\n\t\t\t\t\t\thydrated[index] = new Date(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Set':\n\t\t\t\t\t\tconst set = new Set();\n\t\t\t\t\t\thydrated[index] = set;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 1) {\n\t\t\t\t\t\t\tset.add(hydrate(value[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Map':\n\t\t\t\t\t\tconst map = new Map();\n\t\t\t\t\t\thydrated[index] = map;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tmap.set(hydrate(value[i]), hydrate(value[i + 1]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RegExp':\n\t\t\t\t\t\thydrated[index] = new RegExp(value[1], value[2]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\thydrated[index] = Object(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BigInt':\n\t\t\t\t\t\thydrated[index] = BigInt(value[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'null':\n\t\t\t\t\t\tconst obj = Object.create(null);\n\t\t\t\t\t\thydrated[index] = obj;\n\t\t\t\t\t\tfor (let i = 1; i < value.length; i += 2) {\n\t\t\t\t\t\t\tobj[value[i]] = hydrate(value[i + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown type ${type}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst array = new Array(value.length);\n\t\t\t\thydrated[index] = array;\n\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\tconst n = value[i];\n\t\t\t\t\tif (n === HOLE) continue;\n\n\t\t\t\t\tarray[i] = hydrate(n);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/** @type {Record<string, any>} */\n\t\t\tconst object = {};\n\t\t\thydrated[index] = object;\n\n\t\t\tfor (const key in value) {\n\t\t\t\tconst n = value[key];\n\t\t\t\tobject[key] = hydrate(n);\n\t\t\t}\n\t\t}\n\n\t\treturn hydrated[index];\n\t}\n\n\treturn hydrate(0);\n}\n","/**\n * Removes nullish values from an array.\n *\n * @template T\n * @param {Array<T>} arr\n */\nexport function compact(arr) {\n\treturn arr.filter(/** @returns {val is NonNullable<T>} */ (val) => val != null);\n}\n","/**\n * @param {Set<string>} expected\n */\nfunction validator(expected) {\n\t/**\n\t * @param {any} module\n\t * @param {string} [file]\n\t */\n\tfunction validate(module, file) {\n\t\tif (!module) return;\n\n\t\tfor (const key in module) {\n\t\t\tif (key[0] === '_' || expected.has(key)) continue; // key is valid in this module\n\n\t\t\tconst values = [...expected.values()];\n\n\t\t\tconst hint =\n\t\t\t\thint_for_supported_files(key, file?.slice(file.lastIndexOf('.'))) ??\n\t\t\t\t`valid exports are ${values.join(', ')}, or anything with a '_' prefix`;\n\n\t\t\tthrow new Error(`Invalid export '${key}'${file ? ` in ${file}` : ''} (${hint})`);\n\t\t}\n\t}\n\n\treturn validate;\n}\n\n/**\n * @param {string} key\n * @param {string} ext\n * @returns {string | void}\n */\nfunction hint_for_supported_files(key, ext = '.js') {\n\tconst supported_files = [];\n\n\tif (valid_layout_exports.has(key)) {\n\t\tsupported_files.push(`+layout${ext}`);\n\t}\n\n\tif (valid_page_exports.has(key)) {\n\t\tsupported_files.push(`+page${ext}`);\n\t}\n\n\tif (valid_layout_server_exports.has(key)) {\n\t\tsupported_files.push(`+layout.server${ext}`);\n\t}\n\n\tif (valid_page_server_exports.has(key)) {\n\t\tsupported_files.push(`+page.server${ext}`);\n\t}\n\n\tif (valid_server_exports.has(key)) {\n\t\tsupported_files.push(`+server${ext}`);\n\t}\n\n\tif (supported_files.length > 0) {\n\t\treturn `'${key}' is a valid export in ${supported_files.slice(0, -1).join(', ')}${\n\t\t\tsupported_files.length > 1 ? ' or ' : ''\n\t\t}${supported_files.at(-1)}`;\n\t}\n}\n\nconst valid_layout_exports = new Set([\n\t'load',\n\t'prerender',\n\t'csr',\n\t'ssr',\n\t'trailingSlash',\n\t'config'\n]);\nconst valid_page_exports = new Set([...valid_layout_exports, 'entries']);\nconst valid_layout_server_exports = new Set([...valid_layout_exports]);\nconst valid_page_server_exports = new Set([...valid_layout_server_exports, 'actions', 'entries']);\nconst valid_server_exports = new Set([\n\t'GET',\n\t'POST',\n\t'PATCH',\n\t'PUT',\n\t'DELETE',\n\t'OPTIONS',\n\t'HEAD',\n\t'fallback',\n\t'prerender',\n\t'trailingSlash',\n\t'config',\n\t'entries'\n]);\n\nexport const validate_layout_exports = validator(valid_layout_exports);\nexport const validate_page_exports = validator(valid_page_exports);\nexport const validate_layout_server_exports = validator(valid_layout_server_exports);\nexport const validate_page_server_exports = validator(valid_page_server_exports);\nexport const validate_server_exports = validator(valid_server_exports);\n","import { DEV } from 'esm-env';\n\n/** @type {Set<string> | null} */\nlet warned = null;\n\n// TODO v2: remove all references to unwrap_promises\n\n/**\n * Given an object, return a new object where all top level values are awaited\n *\n * @param {Record<string, any>} object\n * @param {string | null} [id]\n * @returns {Promise<Record<string, any>>}\n */\nexport async function unwrap_promises(object, id) {\n\tif (DEV) {\n\t\t/** @type {string[]} */\n\t\tconst promises = [];\n\n\t\tfor (const key in object) {\n\t\t\tif (typeof object[key]?.then === 'function') {\n\t\t\t\tpromises.push(key);\n\t\t\t}\n\t\t}\n\n\t\tif (promises.length > 0) {\n\t\t\tif (!warned) warned = new Set();\n\n\t\t\tconst last = promises.pop();\n\n\t\t\tconst properties =\n\t\t\t\tpromises.length > 0\n\t\t\t\t\t? `${promises.map((p) => `\"${p}\"`).join(', ')} and \"${last}\" properties`\n\t\t\t\t\t: `\"${last}\" property`;\n\n\t\t\tconst location = id ? `the \\`load\\` function in ${id}` : 'a `load` function';\n\n\t\t\tconst description = promises.length > 0 ? 'are promises' : 'is a promise';\n\n\t\t\tconst message = `The top-level ${properties} returned from ${location} ${description}.`;\n\n\t\t\tif (!warned.has(message)) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`\\n${message}\\n\\nIn SvelteKit 2.0, these will longer be awaited automatically. To get rid of this warning, await all promises included as top-level properties in \\`load\\` return values.\\n`\n\t\t\t\t);\n\n\t\t\t\twarned.add(message);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const key in object) {\n\t\tif (typeof object[key]?.then === 'function') {\n\t\t\treturn Object.fromEntries(\n\t\t\t\tawait Promise.all(Object.entries(object).map(async ([key, value]) => [key, await value]))\n\t\t\t);\n\t\t}\n\t}\n\n\treturn object;\n}\n","export class HttpError {\n\t/**\n\t * @param {number} status\n\t * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body\n\t */\n\tconstructor(status, body) {\n\t\tthis.status = status;\n\t\tif (typeof body === 'string') {\n\t\t\tthis.body = { message: body };\n\t\t} else if (body) {\n\t\t\tthis.body = body;\n\t\t} else {\n\t\t\tthis.body = { message: `Error: ${status}` };\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn JSON.stringify(this.body);\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n\n/**\n * @template {Record<string, unknown> | undefined} [T=undefined]\n */\nexport class ActionFailure {\n\t/**\n\t * @param {number} status\n\t * @param {T} [data]\n\t */\n\tconstructor(status, data) {\n\t\tthis.status = status;\n\t\tthis.data = data;\n\t}\n}\n\n/**\n * This is a grotesque hack that, in dev, allows us to replace the implementations\n * of these classes that you'd get by importing them from `@sveltejs/kit` with the\n * ones that are imported via Vite and loaded internally, so that instanceof\n * checks work even though SvelteKit imports this module via Vite and consumers\n * import it via Node\n * @param {{\n *   ActionFailure: typeof ActionFailure;\n *   HttpError: typeof HttpError;\n *   Redirect: typeof Redirect;\n * }} implementations\n */\nexport function replace_implementations(implementations) {\n\t// @ts-expect-error\n\tActionFailure = implementations.ActionFailure; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tHttpError = implementations.HttpError; // eslint-disable-line no-class-assign\n\t// @ts-expect-error\n\tRedirect = implementations.Redirect; // eslint-disable-line no-class-assign\n}\n","/**\n * @param {string} route_id\n * @param {string} dep\n */\nexport function validate_depends(route_id, dep) {\n\tconst match = /^(moz-icon|view-source|jar):/.exec(dep);\n\tif (match) {\n\t\tconsole.warn(\n\t\t\t`${route_id}: Calling \\`depends('${dep}')\\` will throw an error in Firefox because \\`${match[1]}\\` is a special URI scheme`\n\t\t);\n\t}\n}\n\nexport const INVALIDATED_PARAM = 'x-sveltekit-invalidated';\n\nexport const TRAILING_SLASH_PARAM = 'x-sveltekit-trailing-slash';\n","import { DEV } from 'esm-env';\nimport { onMount, tick } from 'svelte';\nimport {\n\tadd_data_suffix,\n\tdecode_params,\n\tdecode_pathname,\n\tmake_trackable,\n\tnormalize_path\n} from '../../utils/url.js';\nimport {\n\tinitial_fetch,\n\tlock_fetch,\n\tnative_fetch,\n\tsubsequent_fetch,\n\tunlock_fetch\n} from './fetcher.js';\nimport { parse } from './parse.js';\nimport * as storage from './session-storage.js';\nimport {\n\tfind_anchor,\n\tget_base_uri,\n\tget_link_info,\n\tget_router_options,\n\tis_external_url,\n\tscroll_state,\n\torigin\n} from './utils.js';\n\nimport { base } from '__sveltekit/paths';\nimport * as devalue from 'devalue';\nimport { compact } from '../../utils/array.js';\nimport { validate_page_exports } from '../../utils/exports.js';\nimport { unwrap_promises } from '../../utils/promises.js';\nimport { HttpError, Redirect } from '../control.js';\nimport { INVALIDATED_PARAM, TRAILING_SLASH_PARAM, validate_depends } from '../shared.js';\nimport { INDEX_KEY, PRELOAD_PRIORITIES, SCROLL_KEY, SNAPSHOT_KEY } from './constants.js';\nimport { stores } from './singletons.js';\n\nlet errored = false;\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n\n/** @typedef {{ x: number, y: number }} ScrollPosition */\n/** @type {Record<number, ScrollPosition>} */\nconst scroll_positions = storage.get(SCROLL_KEY) ?? {};\n\n/** @type {Record<string, any[]>} */\nconst snapshots = storage.get(SNAPSHOT_KEY) ?? {};\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * Loads `href` the old-fashioned way, with a full page reload.\n * Returns a `Promise` that never resolves (to prevent any\n * subsequent work, e.g. history manipulation, from happening)\n * @param {URL} url\n */\nfunction native_navigation(url) {\n\tlocation.href = url.href;\n\treturn new Promise(() => {});\n}\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @param {HTMLElement} target\n * @returns {import('./types.js').Client}\n */\nexport function create_client(app, target) {\n\tconst routes = parse(app);\n\n\tconst default_layout_loader = app.nodes[0];\n\tconst default_error_loader = app.nodes[1];\n\n\t// we import the root layout/error nodes eagerly, so that\n\t// connectivity errors after initialisation don't nuke the app\n\tdefault_layout_loader();\n\tdefault_error_loader();\n\n\tconst container = __SVELTEKIT_EMBEDDED__ ? target : document.documentElement;\n\t/** @type {Array<((url: URL) => boolean)>} */\n\tconst invalidated = [];\n\n\t/**\n\t * An array of the `+layout.svelte` and `+page.svelte` component instances\n\t * that currently live on the page — used for capturing and restoring snapshots.\n\t * It's updated/manipulated through `bind:this` in `Root.svelte`.\n\t * @type {import('svelte').SvelteComponent[]}\n\t */\n\tconst components = [];\n\n\t/** @type {{id: string, promise: Promise<import('./types.js').NavigationResult>} | null} */\n\tlet load_cache = null;\n\n\tconst callbacks = {\n\t\t/** @type {Array<(navigation: import('@sveltejs/kit').BeforeNavigate) => void>} */\n\t\tbefore_navigate: [],\n\n\t\t/** @type {Array<(navigation: import('@sveltejs/kit').OnNavigate) => import('types').MaybePromise<(() => void) | void>>} */\n\t\ton_navigate: [],\n\n\t\t/** @type {Array<(navigation: import('@sveltejs/kit').AfterNavigate) => void>} */\n\t\tafter_navigate: []\n\t};\n\n\t/** @type {import('./types.js').NavigationState} */\n\tlet current = {\n\t\tbranch: [],\n\t\terror: null,\n\t\t// @ts-ignore - we need the initial value to be null\n\t\turl: null\n\t};\n\n\t/** this being true means we SSR'd */\n\tlet hydrated = false;\n\tlet started = false;\n\tlet autoscroll = true;\n\tlet updating = false;\n\tlet navigating = false;\n\tlet hash_navigating = false;\n\n\tlet force_invalidation = false;\n\n\t/** @type {import('svelte').SvelteComponent} */\n\tlet root;\n\n\t// keeping track of the history index in order to prevent popstate navigation events if needed\n\tlet current_history_index = history.state?.[INDEX_KEY];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{ ...history.state, [INDEX_KEY]: current_history_index },\n\t\t\t'',\n\t\t\tlocation.href\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tif (scroll) {\n\t\thistory.scrollRestoration = 'manual';\n\t\tscrollTo(scroll.x, scroll.y);\n\t}\n\n\t/** @type {import('@sveltejs/kit').Page} */\n\tlet page;\n\n\t/** @type {{}} */\n\tlet token;\n\n\t/** @type {Promise<void> | null} */\n\tlet pending_invalidate;\n\n\tasync function invalidate() {\n\t\t// Accept all invalidations as they come, don't swallow any while another invalidation\n\t\t// is running because subsequent invalidations may make earlier ones outdated,\n\t\t// but batch multiple synchronous invalidations.\n\t\tpending_invalidate = pending_invalidate || Promise.resolve();\n\t\tawait pending_invalidate;\n\t\tif (!pending_invalidate) return;\n\t\tpending_invalidate = null;\n\n\t\tconst url = new URL(location.href);\n\t\tconst intent = get_navigation_intent(url, true);\n\t\t// Clear preload, it might be affected by the invalidation.\n\t\t// Also solves an edge case where a preload is triggered, the navigation for it\n\t\t// was then triggered and is still running while the invalidation kicks in,\n\t\t// at which point the invalidation should take over and \"win\".\n\t\tload_cache = null;\n\n\t\tconst nav_token = (token = {});\n\t\tconst navigation_result = intent && (await load_route(intent));\n\t\tif (nav_token !== token) return;\n\n\t\tif (navigation_result) {\n\t\t\tif (navigation_result.type === 'redirect') {\n\t\t\t\treturn goto(new URL(navigation_result.location, url).href, {}, 1, nav_token);\n\t\t\t} else {\n\t\t\t\tif (navigation_result.props.page !== undefined) {\n\t\t\t\t\tpage = navigation_result.props.page;\n\t\t\t\t}\n\t\t\t\troot.$set(navigation_result.props);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @param {number} index */\n\tfunction capture_snapshot(index) {\n\t\tif (components.some((c) => c?.snapshot)) {\n\t\t\tsnapshots[index] = components.map((c) => c?.snapshot?.capture());\n\t\t}\n\t}\n\n\t/** @param {number} index */\n\tfunction restore_snapshot(index) {\n\t\tsnapshots[index]?.forEach((value, i) => {\n\t\t\tcomponents[i]?.snapshot?.restore(value);\n\t\t});\n\t}\n\n\tfunction persist_state() {\n\t\tupdate_scroll_positions(current_history_index);\n\t\tstorage.set(SCROLL_KEY, scroll_positions);\n\n\t\tcapture_snapshot(current_history_index);\n\t\tstorage.set(SNAPSHOT_KEY, snapshots);\n\t}\n\n\t/**\n\t * @param {string | URL} url\n\t * @param {{ noScroll?: boolean; replaceState?: boolean; keepFocus?: boolean; state?: any; invalidateAll?: boolean }} opts\n\t * @param {number} redirect_count\n\t * @param {{}} [nav_token]\n\t */\n\tasync function goto(\n\t\turl,\n\t\t{\n\t\t\tnoScroll = false,\n\t\t\treplaceState = false,\n\t\t\tkeepFocus = false,\n\t\t\tstate = {},\n\t\t\tinvalidateAll = false\n\t\t},\n\t\tredirect_count,\n\t\tnav_token\n\t) {\n\t\tif (typeof url === 'string') {\n\t\t\turl = new URL(url, get_base_uri(document));\n\t\t}\n\n\t\treturn navigate({\n\t\t\turl,\n\t\t\tscroll: noScroll ? scroll_state() : null,\n\t\t\tkeepfocus: keepFocus,\n\t\t\tredirect_count,\n\t\t\tdetails: {\n\t\t\t\tstate,\n\t\t\t\treplaceState\n\t\t\t},\n\t\t\tnav_token,\n\t\t\taccepted: () => {\n\t\t\t\tif (invalidateAll) {\n\t\t\t\t\tforce_invalidation = true;\n\t\t\t\t}\n\t\t\t},\n\t\t\tblocked: () => {},\n\t\t\ttype: 'goto'\n\t\t});\n\t}\n\n\t/** @param {import('./types.js').NavigationIntent} intent */\n\tasync function preload_data(intent) {\n\t\tload_cache = {\n\t\t\tid: intent.id,\n\t\t\tpromise: load_route(intent).then((result) => {\n\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t// Don't cache errors, because they might be transient\n\t\t\t\t\tload_cache = null;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t})\n\t\t};\n\n\t\treturn load_cache.promise;\n\t}\n\n\t/** @param {...string} pathnames */\n\tasync function preload_code(...pathnames) {\n\t\tconst matching = routes.filter((route) => pathnames.some((pathname) => route.exec(pathname)));\n\n\t\tconst promises = matching.map((r) => {\n\t\t\treturn Promise.all([...r.layouts, r.leaf].map((load) => load?.[1]()));\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/** @param {import('./types.js').NavigationFinished} result */\n\tfunction initialize(result) {\n\t\tif (DEV && result.state.error && document.querySelector('vite-error-overlay')) return;\n\n\t\tcurrent = result.state;\n\n\t\tconst style = document.querySelector('style[data-sveltekit]');\n\t\tif (style) style.remove();\n\n\t\tpage = /** @type {import('@sveltejs/kit').Page} */ (result.props.page);\n\n\t\troot = new app.root({\n\t\t\ttarget,\n\t\t\tprops: { ...result.props, stores, components },\n\t\t\thydrate: true\n\t\t});\n\n\t\trestore_snapshot(current_history_index);\n\n\t\t/** @type {import('@sveltejs/kit').AfterNavigate} */\n\t\tconst navigation = {\n\t\t\tfrom: null,\n\t\t\tto: {\n\t\t\t\tparams: current.params,\n\t\t\t\troute: { id: current.route?.id ?? null },\n\t\t\t\turl: new URL(location.href)\n\t\t\t},\n\t\t\twillUnload: false,\n\t\t\ttype: 'enter',\n\t\t\tcomplete: Promise.resolve()\n\t\t};\n\t\tcallbacks.after_navigate.forEach((fn) => fn(navigation));\n\n\t\tstarted = true;\n\t}\n\n\t/**\n\t *\n\t * @param {{\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   branch: Array<import('./types.js').BranchNode | undefined>;\n\t *   status: number;\n\t *   error: App.Error | null;\n\t *   route: import('types').CSRRoute | null;\n\t *   form?: Record<string, any> | null;\n\t * }} opts\n\t */\n\tasync function get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus,\n\t\terror,\n\t\troute,\n\t\tform\n\t}) {\n\t\t/** @type {import('types').TrailingSlash} */\n\t\tlet slash = 'never';\n\t\tfor (const node of branch) {\n\t\t\tif (node?.slash !== undefined) slash = node.slash;\n\t\t}\n\t\turl.pathname = normalize_path(url.pathname, slash);\n\t\t// eslint-disable-next-line\n\t\turl.search = url.search; // turn `/?` into `/`\n\n\t\t/** @type {import('./types.js').NavigationFinished} */\n\t\tconst result = {\n\t\t\ttype: 'loaded',\n\t\t\tstate: {\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\tbranch,\n\t\t\t\terror,\n\t\t\t\troute\n\t\t\t},\n\t\t\tprops: {\n\t\t\t\t// @ts-ignore Somehow it's getting SvelteComponent and SvelteComponentDev mixed up\n\t\t\t\tconstructors: compact(branch).map((branch_node) => branch_node.node.component)\n\t\t\t}\n\t\t};\n\n\t\tif (form !== undefined) {\n\t\t\tresult.props.form = form;\n\t\t}\n\n\t\tlet data = {};\n\t\tlet data_changed = !page;\n\n\t\tlet p = 0;\n\n\t\tfor (let i = 0; i < Math.max(branch.length, current.branch.length); i += 1) {\n\t\t\tconst node = branch[i];\n\t\t\tconst prev = current.branch[i];\n\n\t\t\tif (node?.data !== prev?.data) data_changed = true;\n\t\t\tif (!node) continue;\n\n\t\t\tdata = { ...data, ...node.data };\n\n\t\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\t\tif (data_changed) {\n\t\t\t\tresult.props[`data_${p}`] = data;\n\t\t\t}\n\n\t\t\tp += 1;\n\t\t}\n\n\t\tconst page_changed =\n\t\t\t!current.url ||\n\t\t\turl.href !== current.url.href ||\n\t\t\tcurrent.error !== error ||\n\t\t\t(form !== undefined && form !== page.form) ||\n\t\t\tdata_changed;\n\n\t\tif (page_changed) {\n\t\t\tresult.props.page = {\n\t\t\t\terror,\n\t\t\t\tparams,\n\t\t\t\troute: {\n\t\t\t\t\tid: route?.id ?? null\n\t\t\t\t},\n\t\t\t\tstatus,\n\t\t\t\turl: new URL(url),\n\t\t\t\tform: form ?? null,\n\t\t\t\t// The whole page store is updated, but this way the object reference stays the same\n\t\t\t\tdata: data_changed ? data : page.data\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Call the load function of the given node, if it exists.\n\t * If `server_data` is passed, this is treated as the initial run and the page endpoint is not requested.\n\t *\n\t * @param {{\n\t *   loader: import('types').CSRPageNodeLoader;\n\t * \t parent: () => Promise<Record<string, any>>;\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   route: { id: string | null };\n\t * \t server_data_node: import('./types.js').DataNode | null;\n\t * }} options\n\t * @returns {Promise<import('./types.js').BranchNode>}\n\t */\n\tasync function load_node({ loader, parent, url, params, route, server_data_node }) {\n\t\t/** @type {Record<string, any> | null} */\n\t\tlet data = null;\n\n\t\t/** @type {import('types').Uses} */\n\t\tconst uses = {\n\t\t\tdependencies: new Set(),\n\t\t\tparams: new Set(),\n\t\t\tparent: false,\n\t\t\troute: false,\n\t\t\turl: false\n\t\t};\n\n\t\tconst node = await loader();\n\n\t\tif (DEV) {\n\t\t\tvalidate_page_exports(node.universal);\n\t\t}\n\n\t\tif (node.universal?.load) {\n\t\t\t/** @param {string[]} deps */\n\t\t\tfunction depends(...deps) {\n\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\tif (DEV) validate_depends(/** @type {string} */ (route.id), dep);\n\n\t\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\t\tuses.dependencies.add(href);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {import('@sveltejs/kit').LoadEvent} */\n\t\t\tconst load_input = {\n\t\t\t\troute: new Proxy(route, {\n\t\t\t\t\tget: (target, key) => {\n\t\t\t\t\t\tuses.route = true;\n\t\t\t\t\t\treturn target[/** @type {'id'} */ (key)];\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tparams: new Proxy(params, {\n\t\t\t\t\tget: (target, key) => {\n\t\t\t\t\t\tuses.params.add(/** @type {string} */ (key));\n\t\t\t\t\t\treturn target[/** @type {string} */ (key)];\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tdata: server_data_node?.data ?? null,\n\t\t\t\turl: make_trackable(url, () => {\n\t\t\t\t\tuses.url = true;\n\t\t\t\t}),\n\t\t\t\tasync fetch(resource, init) {\n\t\t\t\t\t/** @type {URL | string} */\n\t\t\t\t\tlet requested;\n\n\t\t\t\t\tif (resource instanceof Request) {\n\t\t\t\t\t\trequested = resource.url;\n\n\t\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\t\tinit = {\n\t\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t\theaders: resource.headers,\n\t\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t\t...init\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequested = resource;\n\t\t\t\t\t}\n\n\t\t\t\t\t// we must fixup relative urls so they are resolved from the target page\n\t\t\t\t\tconst resolved = new URL(requested, url);\n\t\t\t\t\tdepends(resolved.href);\n\n\t\t\t\t\t// match ssr serialized data url, which is important to find cached responses\n\t\t\t\t\tif (resolved.origin === url.origin) {\n\t\t\t\t\t\trequested = resolved.href.slice(url.origin.length);\n\t\t\t\t\t}\n\n\t\t\t\t\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be resolved\n\t\t\t\t\treturn started\n\t\t\t\t\t\t? subsequent_fetch(requested, resolved.href, init)\n\t\t\t\t\t\t: initial_fetch(requested, init);\n\t\t\t\t},\n\t\t\t\tsetHeaders: () => {}, // noop\n\t\t\t\tdepends,\n\t\t\t\tparent() {\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t\treturn parent();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tlock_fetch();\n\t\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t\t\tif (data != null && Object.getPrototypeOf(data) !== Object.prototype) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`a load function related to route '${route.id}' returned ${\n\t\t\t\t\t\t\t\ttypeof data !== 'object'\n\t\t\t\t\t\t\t\t\t? `a ${typeof data}`\n\t\t\t\t\t\t\t\t\t: data instanceof Response\n\t\t\t\t\t\t\t\t\t  ? 'a Response object'\n\t\t\t\t\t\t\t\t\t  : Array.isArray(data)\n\t\t\t\t\t\t\t\t\t    ? 'an array'\n\t\t\t\t\t\t\t\t\t    : 'a non-plain object'\n\t\t\t\t\t\t\t}, but must return a plain object at the top level (i.e. \\`return {...}\\`)`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tunlock_fetch();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdata = (await node.universal.load.call(null, load_input)) ?? null;\n\t\t\t}\n\t\t\tdata = data ? await unwrap_promises(data, route.id) : null;\n\t\t}\n\n\t\treturn {\n\t\t\tnode,\n\t\t\tloader,\n\t\t\tserver: server_data_node,\n\t\t\tuniversal: node.universal?.load ? { type: 'data', data, uses } : null,\n\t\t\tdata: data ?? server_data_node?.data ?? null,\n\t\t\tslash: node.universal?.trailingSlash ?? server_data_node?.slash\n\t\t};\n\t}\n\n\t/**\n\t * @param {boolean} parent_changed\n\t * @param {boolean} route_changed\n\t * @param {boolean} url_changed\n\t * @param {import('types').Uses | undefined} uses\n\t * @param {Record<string, string>} params\n\t */\n\tfunction has_changed(parent_changed, route_changed, url_changed, uses, params) {\n\t\tif (force_invalidation) return true;\n\n\t\tif (!uses) return false;\n\n\t\tif (uses.parent && parent_changed) return true;\n\t\tif (uses.route && route_changed) return true;\n\t\tif (uses.url && url_changed) return true;\n\n\t\tfor (const param of uses.params) {\n\t\t\tif (params[param] !== current.params[param]) return true;\n\t\t}\n\n\t\tfor (const href of uses.dependencies) {\n\t\t\tif (invalidated.some((fn) => fn(new URL(href)))) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {import('types').ServerDataNode | import('types').ServerDataSkippedNode | null} node\n\t * @param {import('./types.js').DataNode | null} [previous]\n\t * @returns {import('./types.js').DataNode | null}\n\t */\n\tfunction create_data_node(node, previous) {\n\t\tif (node?.type === 'data') return node;\n\t\tif (node?.type === 'skip') return previous ?? null;\n\t\treturn null;\n\t}\n\n\t/**\n\t * @param {import('./types.js').NavigationIntent} intent\n\t * @returns {Promise<import('./types.js').NavigationResult>}\n\t */\n\tasync function load_route({ id, invalidating, url, params, route }) {\n\t\tif (load_cache?.id === id) {\n\t\t\treturn load_cache.promise;\n\t\t}\n\n\t\tconst { errors, layouts, leaf } = route;\n\n\t\tconst loaders = [...layouts, leaf];\n\n\t\t// preload modules to avoid waterfall, but handle rejections\n\t\t// so they don't get reported to Sentry et al (we don't need\n\t\t// to act on the failures at this point)\n\t\terrors.forEach((loader) => loader?.().catch(() => {}));\n\t\tloaders.forEach((loader) => loader?.[1]().catch(() => {}));\n\n\t\t/** @type {import('types').ServerNodesResponse | import('types').ServerRedirectNode | null} */\n\t\tlet server_data = null;\n\n\t\tconst url_changed = current.url ? id !== current.url.pathname + current.url.search : false;\n\t\tconst route_changed = current.route ? route.id !== current.route.id : false;\n\n\t\tlet parent_invalid = false;\n\t\tconst invalid_server_nodes = loaders.map((loader, i) => {\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst invalid =\n\t\t\t\t!!loader?.[0] &&\n\t\t\t\t(previous?.loader !== loader[1] ||\n\t\t\t\t\thas_changed(parent_invalid, route_changed, url_changed, previous.server?.uses, params));\n\n\t\t\tif (invalid) {\n\t\t\t\t// For the next one\n\t\t\t\tparent_invalid = true;\n\t\t\t}\n\n\t\t\treturn invalid;\n\t\t});\n\n\t\tif (invalid_server_nodes.some(Boolean)) {\n\t\t\ttry {\n\t\t\t\tserver_data = await load_data(url, invalid_server_nodes);\n\t\t\t} catch (error) {\n\t\t\t\treturn load_root_error_page({\n\t\t\t\t\tstatus: error instanceof HttpError ? error.status : 500,\n\t\t\t\t\terror: await handle_error(error, { url, params, route: { id: route.id } }),\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (server_data.type === 'redirect') {\n\t\t\t\treturn server_data;\n\t\t\t}\n\t\t}\n\n\t\tconst server_data_nodes = server_data?.nodes;\n\n\t\tlet parent_changed = false;\n\n\t\tconst branch_promises = loaders.map(async (loader, i) => {\n\t\t\tif (!loader) return;\n\n\t\t\t/** @type {import('./types.js').BranchNode | undefined} */\n\t\t\tconst previous = current.branch[i];\n\n\t\t\tconst server_data_node = server_data_nodes?.[i];\n\n\t\t\t// re-use data from previous load if it's still valid\n\t\t\tconst valid =\n\t\t\t\t(!server_data_node || server_data_node.type === 'skip') &&\n\t\t\t\tloader[1] === previous?.loader &&\n\t\t\t\t!has_changed(parent_changed, route_changed, url_changed, previous.universal?.uses, params);\n\t\t\tif (valid) return previous;\n\n\t\t\tparent_changed = true;\n\n\t\t\tif (server_data_node?.type === 'error') {\n\t\t\t\t// rethrow and catch below\n\t\t\t\tthrow server_data_node;\n\t\t\t}\n\n\t\t\treturn load_node({\n\t\t\t\tloader: loader[1],\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\troute,\n\t\t\t\tparent: async () => {\n\t\t\t\t\tconst data = {};\n\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t\t}\n\t\t\t\t\treturn data;\n\t\t\t\t},\n\t\t\t\tserver_data_node: create_data_node(\n\t\t\t\t\t// server_data_node is undefined if it wasn't reloaded from the server;\n\t\t\t\t\t// and if current loader uses server data, we want to reuse previous data.\n\t\t\t\t\tserver_data_node === undefined && loader[0] ? { type: 'skip' } : server_data_node ?? null,\n\t\t\t\t\tloader[0] ? previous?.server : undefined\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\t// if we don't do this, rejections will be unhandled\n\t\tfor (const p of branch_promises) p.catch(() => {});\n\n\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\tconst branch = [];\n\n\t\tfor (let i = 0; i < loaders.length; i += 1) {\n\t\t\tif (loaders[i]) {\n\t\t\t\ttry {\n\t\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (err instanceof Redirect) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\t\tlocation: err.location\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tlet status = 500;\n\t\t\t\t\t/** @type {App.Error} */\n\t\t\t\t\tlet error;\n\n\t\t\t\t\tif (server_data_nodes?.includes(/** @type {import('types').ServerErrorNode} */ (err))) {\n\t\t\t\t\t\t// this is the server error rethrown above, reconstruct but don't invoke\n\t\t\t\t\t\t// the client error handler; it should've already been handled on the server\n\t\t\t\t\t\tstatus = /** @type {import('types').ServerErrorNode} */ (err).status ?? status;\n\t\t\t\t\t\terror = /** @type {import('types').ServerErrorNode} */ (err).error;\n\t\t\t\t\t} else if (err instanceof HttpError) {\n\t\t\t\t\t\tstatus = err.status;\n\t\t\t\t\t\terror = err.body;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Referenced node could have been removed due to redeploy, check\n\t\t\t\t\t\tconst updated = await stores.updated.check();\n\t\t\t\t\t\tif (updated) {\n\t\t\t\t\t\t\treturn await native_navigation(url);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\terror = await handle_error(err, { params, url, route: { id: route.id } });\n\t\t\t\t\t}\n\n\t\t\t\t\tconst error_load = await load_nearest_error_page(i, branch, errors);\n\t\t\t\t\tif (error_load) {\n\t\t\t\t\t\treturn await get_navigation_result_from_branch({\n\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\troute\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if we get here, it's because the root `load` function failed,\n\t\t\t\t\t\t// and we need to fall back to the server\n\t\t\t\t\t\treturn await server_fallback(url, { id: route.id }, error, status);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\t\tbranch.push(undefined);\n\t\t\t}\n\t\t}\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus: 200,\n\t\t\terror: null,\n\t\t\troute,\n\t\t\t// Reset `form` on navigation, but not invalidation\n\t\t\tform: invalidating ? undefined : null\n\t\t});\n\t}\n\n\t/**\n\t * @param {number} i Start index to backtrack from\n\t * @param {Array<import('./types.js').BranchNode | undefined>} branch Branch to backtrack\n\t * @param {Array<import('types').CSRPageNodeLoader | undefined>} errors All error pages for this branch\n\t * @returns {Promise<{idx: number; node: import('./types.js').BranchNode} | undefined>}\n\t */\n\tasync function load_nearest_error_page(i, branch, errors) {\n\t\twhile (i--) {\n\t\t\tif (errors[i]) {\n\t\t\t\tlet j = i;\n\t\t\t\twhile (!branch[j]) j -= 1;\n\t\t\t\ttry {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tidx: j + 1,\n\t\t\t\t\t\tnode: {\n\t\t\t\t\t\t\tnode: await /** @type {import('types').CSRPageNodeLoader } */ (errors[i])(),\n\t\t\t\t\t\t\tloader: /** @type {import('types').CSRPageNodeLoader } */ (errors[i]),\n\t\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\t\tserver: null,\n\t\t\t\t\t\t\tuniversal: null\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {{\n\t *   status: number;\n\t *   error: App.Error;\n\t *   url: URL;\n\t *   route: { id: string | null }\n\t * }} opts\n\t * @returns {Promise<import('./types.js').NavigationFinished>}\n\t */\n\tasync function load_root_error_page({ status, error, url, route }) {\n\t\t/** @type {Record<string, string>} */\n\t\tconst params = {}; // error page does not have params\n\n\t\t/** @type {import('types').ServerDataNode | null} */\n\t\tlet server_data_node = null;\n\n\t\tconst default_layout_has_server_load = app.server_loads[0] === 0;\n\n\t\tif (default_layout_has_server_load) {\n\t\t\t// TODO post-https://github.com/sveltejs/kit/discussions/6124 we can use\n\t\t\t// existing root layout data\n\t\t\ttry {\n\t\t\t\tconst server_data = await load_data(url, [true]);\n\n\t\t\t\tif (\n\t\t\t\t\tserver_data.type !== 'data' ||\n\t\t\t\t\t(server_data.nodes[0] && server_data.nodes[0].type !== 'data')\n\t\t\t\t) {\n\t\t\t\t\tthrow 0;\n\t\t\t\t}\n\n\t\t\t\tserver_data_node = server_data.nodes[0] ?? null;\n\t\t\t} catch {\n\t\t\t\t// at this point we have no choice but to fall back to the server, if it wouldn't\n\t\t\t\t// bring us right back here, turning this into an endless loop\n\t\t\t\tif (url.origin !== origin || url.pathname !== location.pathname || hydrated) {\n\t\t\t\t\tawait native_navigation(url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst root_layout = await load_node({\n\t\t\tloader: default_layout_loader,\n\t\t\turl,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t});\n\n\t\t/** @type {import('./types.js').BranchNode} */\n\t\tconst root_error = {\n\t\t\tnode: await default_error_loader(),\n\t\t\tloader: default_error_loader,\n\t\t\tuniversal: null,\n\t\t\tserver: null,\n\t\t\tdata: null\n\t\t};\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\troute: null\n\t\t});\n\t}\n\n\t/**\n\t * @param {URL} url\n\t * @param {boolean} invalidating\n\t */\n\tfunction get_navigation_intent(url, invalidating) {\n\t\tif (is_external_url(url, base)) return;\n\n\t\tconst path = get_url_path(url);\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\tconst id = url.pathname + url.search;\n\t\t\t\t/** @type {import('./types.js').NavigationIntent} */\n\t\t\t\tconst intent = { id, invalidating, route, params: decode_params(params), url };\n\t\t\t\treturn intent;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @param {URL} url */\n\tfunction get_url_path(url) {\n\t\treturn decode_pathname(url.pathname.slice(base.length) || '/');\n\t}\n\n\t/**\n\t * @param {{\n\t *   url: URL;\n\t *   type: import('@sveltejs/kit').Navigation[\"type\"];\n\t *   intent?: import('./types.js').NavigationIntent;\n\t *   delta?: number;\n\t * }} opts\n\t */\n\tfunction before_navigate({ url, type, intent, delta }) {\n\t\tlet should_block = false;\n\n\t\tconst nav = create_navigation(current, intent, url, type);\n\n\t\tif (delta !== undefined) {\n\t\t\tnav.navigation.delta = delta;\n\t\t}\n\n\t\tconst cancellable = {\n\t\t\t...nav.navigation,\n\t\t\tcancel: () => {\n\t\t\t\tshould_block = true;\n\t\t\t\tnav.reject(new Error('navigation was cancelled'));\n\t\t\t}\n\t\t};\n\n\t\tif (!navigating) {\n\t\t\t// Don't run the event during redirects\n\t\t\tcallbacks.before_navigate.forEach((fn) => fn(cancellable));\n\t\t}\n\n\t\treturn should_block ? null : nav;\n\t}\n\n\t/**\n\t * @param {{\n\t *   url: URL;\n\t *   scroll: { x: number, y: number } | null;\n\t *   keepfocus: boolean;\n\t *   redirect_count: number;\n\t *   details: {\n\t *     replaceState: boolean;\n\t *     state: any;\n\t *   } | null;\n\t *   type: import('@sveltejs/kit').Navigation[\"type\"];\n\t *   delta?: number;\n\t *   nav_token?: {};\n\t *   accepted: () => void;\n\t *   blocked: () => void;\n\t * }} opts\n\t */\n\tasync function navigate({\n\t\turl,\n\t\tscroll,\n\t\tkeepfocus,\n\t\tredirect_count,\n\t\tdetails,\n\t\ttype,\n\t\tdelta,\n\t\tnav_token = {},\n\t\taccepted,\n\t\tblocked\n\t}) {\n\t\tconst intent = get_navigation_intent(url, false);\n\t\tconst nav = before_navigate({ url, type, delta, intent });\n\n\t\tif (!nav) {\n\t\t\tblocked();\n\t\t\treturn;\n\t\t}\n\n\t\t// store this before calling `accepted()`, which may change the index\n\t\tconst previous_history_index = current_history_index;\n\n\t\taccepted();\n\n\t\tnavigating = true;\n\n\t\tif (started) {\n\t\t\tstores.navigating.set(nav.navigation);\n\t\t}\n\n\t\ttoken = nav_token;\n\t\tlet navigation_result = intent && (await load_route(intent));\n\n\t\tif (!navigation_result) {\n\t\t\tif (is_external_url(url, base)) {\n\t\t\t\treturn await native_navigation(url);\n\t\t\t}\n\t\t\tnavigation_result = await server_fallback(\n\t\t\t\turl,\n\t\t\t\t{ id: null },\n\t\t\t\tawait handle_error(new Error(`Not found: ${url.pathname}`), {\n\t\t\t\t\turl,\n\t\t\t\t\tparams: {},\n\t\t\t\t\troute: { id: null }\n\t\t\t\t}),\n\t\t\t\t404\n\t\t\t);\n\t\t}\n\n\t\t// if this is an internal navigation intent, use the normalized\n\t\t// URL for the rest of the function\n\t\turl = intent?.url || url;\n\n\t\t// abort if user navigated during update\n\t\tif (token !== nav_token) {\n\t\t\tnav.reject(new Error('navigation was aborted'));\n\t\t\treturn false;\n\t\t}\n\n\t\tif (navigation_result.type === 'redirect') {\n\t\t\t// whatwg fetch spec https://fetch.spec.whatwg.org/#http-redirect-fetch says to error after 20 redirects\n\t\t\tif (redirect_count >= 20) {\n\t\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\terror: await handle_error(new Error('Redirect loop'), {\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\troute: { id: null }\n\t\t\t\t\t}),\n\t\t\t\t\turl,\n\t\t\t\t\troute: { id: null }\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgoto(new URL(navigation_result.location, url).href, {}, redirect_count + 1, nav_token);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (/** @type {number} */ (navigation_result.props.page?.status) >= 400) {\n\t\t\tconst updated = await stores.updated.check();\n\t\t\tif (updated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\n\t\t// reset invalidation only after a finished navigation. If there are redirects or\n\t\t// additional invalidations, they should get the same invalidation treatment\n\t\tinvalidated.length = 0;\n\t\tforce_invalidation = false;\n\n\t\tupdating = true;\n\n\t\tupdate_scroll_positions(previous_history_index);\n\t\tcapture_snapshot(previous_history_index);\n\n\t\t// ensure the url pathname matches the page's trailing slash option\n\t\tif (\n\t\t\tnavigation_result.props.page?.url &&\n\t\t\tnavigation_result.props.page.url.pathname !== url.pathname\n\t\t) {\n\t\t\turl.pathname = navigation_result.props.page?.url.pathname;\n\t\t}\n\n\t\tif (details) {\n\t\t\tconst change = details.replaceState ? 0 : 1;\n\t\t\tdetails.state[INDEX_KEY] = current_history_index += change;\n\t\t\thistory[details.replaceState ? 'replaceState' : 'pushState'](details.state, '', url);\n\n\t\t\tif (!details.replaceState) {\n\t\t\t\t// if we navigated back, then pushed a new state, we can\n\t\t\t\t// release memory by pruning the scroll/snapshot lookup\n\t\t\t\tlet i = current_history_index + 1;\n\t\t\t\twhile (snapshots[i] || scroll_positions[i]) {\n\t\t\t\t\tdelete snapshots[i];\n\t\t\t\t\tdelete scroll_positions[i];\n\t\t\t\t\ti += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// reset preload synchronously after the history state has been set to avoid race conditions\n\t\tload_cache = null;\n\n\t\tif (started) {\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\t// reset url before updating page store\n\t\t\tif (navigation_result.props.page) {\n\t\t\t\tnavigation_result.props.page.url = url;\n\t\t\t}\n\n\t\t\tconst after_navigate = (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tcallbacks.on_navigate.map((fn) =>\n\t\t\t\t\t\tfn(/** @type {import('@sveltejs/kit').OnNavigate} */ (nav.navigation))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t).filter((value) => typeof value === 'function');\n\n\t\t\tif (after_navigate.length > 0) {\n\t\t\t\tfunction cleanup() {\n\t\t\t\t\tcallbacks.after_navigate = callbacks.after_navigate.filter(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t(fn) => !after_navigate.includes(fn)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tafter_navigate.push(cleanup);\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tcallbacks.after_navigate.push(...after_navigate);\n\t\t\t}\n\n\t\t\troot.$set(navigation_result.props);\n\t\t} else {\n\t\t\tinitialize(navigation_result);\n\t\t}\n\n\t\tconst { activeElement } = document;\n\n\t\t// need to render the DOM before we can scroll to the rendered elements and do focus management\n\t\tawait tick();\n\n\t\t// we reset scroll before dealing with focus, to avoid a flash of unscrolled content\n\t\tif (autoscroll) {\n\t\t\tconst deep_linked =\n\t\t\t\turl.hash && document.getElementById(decodeURIComponent(url.hash.slice(1)));\n\t\t\tif (scroll) {\n\t\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t\t} else if (deep_linked) {\n\t\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t\t// CSS properties.\n\t\t\t\tdeep_linked.scrollIntoView();\n\t\t\t} else {\n\t\t\t\tscrollTo(0, 0);\n\t\t\t}\n\t\t}\n\n\t\tconst changed_focus =\n\t\t\t// reset focus only if any manual focus management didn't override it\n\t\t\tdocument.activeElement !== activeElement &&\n\t\t\t// also refocus when activeElement is body already because the\n\t\t\t// focus event might not have been fired on it yet\n\t\t\tdocument.activeElement !== document.body;\n\n\t\tif (!keepfocus && !changed_focus) {\n\t\t\treset_focus();\n\t\t}\n\n\t\tautoscroll = true;\n\n\t\tif (navigation_result.props.page) {\n\t\t\tpage = navigation_result.props.page;\n\t\t}\n\n\t\tnavigating = false;\n\n\t\tif (type === 'popstate') {\n\t\t\trestore_snapshot(current_history_index);\n\t\t}\n\n\t\tnav.fulfil(undefined);\n\n\t\tcallbacks.after_navigate.forEach((fn) =>\n\t\t\tfn(/** @type {import('@sveltejs/kit').AfterNavigate} */ (nav.navigation))\n\t\t);\n\t\tstores.navigating.set(null);\n\n\t\tupdating = false;\n\t}\n\n\t/**\n\t * Does a full page reload if it wouldn't result in an endless loop in the SPA case\n\t * @param {URL} url\n\t * @param {{ id: string | null }} route\n\t * @param {App.Error} error\n\t * @param {number} status\n\t * @returns {Promise<import('./types.js').NavigationFinished>}\n\t */\n\tasync function server_fallback(url, route, error, status) {\n\t\tif (url.origin === origin && url.pathname === location.pathname && !hydrated) {\n\t\t\t// We would reload the same page we're currently on, which isn't hydrated,\n\t\t\t// which means no SSR, which means we would end up in an endless loop\n\t\t\treturn await load_root_error_page({\n\t\t\t\tstatus,\n\t\t\t\terror,\n\t\t\t\turl,\n\t\t\t\troute\n\t\t\t});\n\t\t}\n\n\t\tif (DEV && status !== 404) {\n\t\t\tconsole.error(\n\t\t\t\t'An error occurred while loading the page. This will cause a full page reload. (This message will only appear during development.)'\n\t\t\t);\n\n\t\t\tdebugger; // eslint-disable-line\n\t\t}\n\n\t\treturn await native_navigation(url);\n\t}\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (current.error) location.reload();\n\t\t});\n\t}\n\n\tfunction setup_preload() {\n\t\t/** @type {NodeJS.Timeout} */\n\t\tlet mousemove_timeout;\n\n\t\tcontainer.addEventListener('mousemove', (event) => {\n\t\t\tconst target = /** @type {Element} */ (event.target);\n\n\t\t\tclearTimeout(mousemove_timeout);\n\t\t\tmousemove_timeout = setTimeout(() => {\n\t\t\t\tpreload(target, 2);\n\t\t\t}, 20);\n\t\t});\n\n\t\t/** @param {Event} event */\n\t\tfunction tap(event) {\n\t\t\tpreload(/** @type {Element} */ (event.composedPath()[0]), 1);\n\t\t}\n\n\t\tcontainer.addEventListener('mousedown', tap);\n\t\tcontainer.addEventListener('touchstart', tap, { passive: true });\n\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tpreload_code(\n\t\t\t\t\t\t\tget_url_path(new URL(/** @type {HTMLAnchorElement} */ (entry.target).href))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tobserver.unobserve(entry.target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ threshold: 0 }\n\t\t);\n\n\t\t/**\n\t\t * @param {Element} element\n\t\t * @param {number} priority\n\t\t */\n\t\tfunction preload(element, priority) {\n\t\t\tconst a = find_anchor(element, container);\n\t\t\tif (!a) return;\n\n\t\t\tconst { url, external, download } = get_link_info(a, base);\n\t\t\tif (external || download) return;\n\n\t\t\tconst options = get_router_options(a);\n\n\t\t\tif (!options.reload) {\n\t\t\t\tif (priority <= options.preload_data) {\n\t\t\t\t\tconst intent = get_navigation_intent(/** @type {URL} */ (url), false);\n\t\t\t\t\tif (intent) {\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\tpreload_data(intent).then((result) => {\n\t\t\t\t\t\t\t\tif (result.type === 'loaded' && result.state.error) {\n\t\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t\t`Preloading data for ${intent.url.pathname} failed with the following error: ${result.state.error.message}\\n` +\n\t\t\t\t\t\t\t\t\t\t\t'If this error is transient, you can ignore it. Otherwise, consider disabling preloading for this route. ' +\n\t\t\t\t\t\t\t\t\t\t\t'This route was preloaded due to a data-sveltekit-preload-data attribute. ' +\n\t\t\t\t\t\t\t\t\t\t\t'See https://kit.svelte.dev/docs/link-options for more info'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpreload_data(intent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (priority <= options.preload_code) {\n\t\t\t\t\tpreload_code(get_url_path(/** @type {URL} */ (url)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction after_navigate() {\n\t\t\tobserver.disconnect();\n\n\t\t\tfor (const a of container.querySelectorAll('a')) {\n\t\t\t\tconst { url, external, download } = get_link_info(a, base);\n\t\t\t\tif (external || download) continue;\n\n\t\t\t\tconst options = get_router_options(a);\n\t\t\t\tif (options.reload) continue;\n\n\t\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.viewport) {\n\t\t\t\t\tobserver.observe(a);\n\t\t\t\t}\n\n\t\t\t\tif (options.preload_code === PRELOAD_PRIORITIES.eager) {\n\t\t\t\t\tpreload_code(get_url_path(/** @type {URL} */ (url)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcallbacks.after_navigate.push(after_navigate);\n\t\tafter_navigate();\n\t}\n\n\t/**\n\t * @param {unknown} error\n\t * @param {import('@sveltejs/kit').NavigationEvent} event\n\t * @returns {import('types').MaybePromise<App.Error>}\n\t */\n\tfunction handle_error(error, event) {\n\t\tif (error instanceof HttpError) {\n\t\t\treturn error.body;\n\t\t}\n\n\t\tif (DEV) {\n\t\t\terrored = true;\n\t\t\tconsole.warn('The next HMR update will cause the page to reload');\n\t\t}\n\n\t\treturn (\n\t\t\tapp.hooks.handleError({ error, event }) ??\n\t\t\t/** @type {any} */ ({ message: event.route.id != null ? 'Internal Error' : 'Not Found' })\n\t\t);\n\t}\n\n\treturn {\n\t\tafter_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.after_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.after_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.after_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tbefore_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.before_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.before_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.before_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\ton_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.on_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.on_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.on_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tdisable_scroll_handling: () => {\n\t\t\tif (DEV && started && !updating) {\n\t\t\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t\t\t}\n\n\t\t\tif (updating || !started) {\n\t\t\t\tautoscroll = false;\n\t\t\t}\n\t\t},\n\n\t\tgoto: (href, opts = {}) => {\n\t\t\treturn goto(href, opts, 0);\n\t\t},\n\n\t\tinvalidate: (resource) => {\n\t\t\tif (typeof resource === 'function') {\n\t\t\t\tinvalidated.push(resource);\n\t\t\t} else {\n\t\t\t\tconst { href } = new URL(resource, location.href);\n\t\t\t\tinvalidated.push((url) => url.href === href);\n\t\t\t}\n\n\t\t\treturn invalidate();\n\t\t},\n\n\t\tinvalidate_all: () => {\n\t\t\tforce_invalidation = true;\n\t\t\treturn invalidate();\n\t\t},\n\n\t\tpreload_data: async (href) => {\n\t\t\tconst url = new URL(href, get_base_uri(document));\n\t\t\tconst intent = get_navigation_intent(url, false);\n\n\t\t\tif (!intent) {\n\t\t\t\tthrow new Error(`Attempted to preload a URL that does not belong to this app: ${url}`);\n\t\t\t}\n\n\t\t\tawait preload_data(intent);\n\t\t},\n\n\t\tpreload_code,\n\n\t\tapply_action: async (result) => {\n\t\t\tif (result.type === 'error') {\n\t\t\t\tconst url = new URL(location.href);\n\n\t\t\t\tconst { branch, route } = current;\n\t\t\t\tif (!route) return;\n\n\t\t\t\tconst error_load = await load_nearest_error_page(\n\t\t\t\t\tcurrent.branch.length,\n\t\t\t\t\tbranch,\n\t\t\t\t\troute.errors\n\t\t\t\t);\n\t\t\t\tif (error_load) {\n\t\t\t\t\tconst navigation_result = await get_navigation_result_from_branch({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams: current.params,\n\t\t\t\t\t\tbranch: branch.slice(0, error_load.idx).concat(error_load.node),\n\t\t\t\t\t\tstatus: result.status ?? 500,\n\t\t\t\t\t\terror: result.error,\n\t\t\t\t\t\troute\n\t\t\t\t\t});\n\n\t\t\t\t\tcurrent = navigation_result.state;\n\n\t\t\t\t\troot.$set(navigation_result.props);\n\n\t\t\t\t\ttick().then(reset_focus);\n\t\t\t\t}\n\t\t\t} else if (result.type === 'redirect') {\n\t\t\t\tgoto(result.location, { invalidateAll: true }, 0);\n\t\t\t} else {\n\t\t\t\t/** @type {Record<string, any>} */\n\t\t\t\troot.$set({\n\t\t\t\t\t// this brings Svelte's view of the world in line with SvelteKit's\n\t\t\t\t\t// after use:enhance reset the form....\n\t\t\t\t\tform: null,\n\t\t\t\t\tpage: { ...page, form: result.data, status: result.status }\n\t\t\t\t});\n\n\t\t\t\t// ...so that setting the `form` prop takes effect and isn't ignored\n\t\t\t\tawait tick();\n\t\t\t\troot.$set({ form: result.data });\n\n\t\t\t\tif (result.type === 'success') {\n\t\t\t\t\treset_focus();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_start_router: () => {\n\t\t\thistory.scrollRestoration = 'manual';\n\n\t\t\t// Adopted from Nuxt.js\n\t\t\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t\t\t// and back-navigation from other pages to use the browser to restore the\n\t\t\t// scrolling position.\n\t\t\taddEventListener('beforeunload', (e) => {\n\t\t\t\tlet should_block = false;\n\n\t\t\t\tpersist_state();\n\n\t\t\t\tif (!navigating) {\n\t\t\t\t\tconst nav = create_navigation(current, undefined, null, 'leave');\n\n\t\t\t\t\t// If we're navigating, beforeNavigate was already called. If we end up in here during navigation,\n\t\t\t\t\t// it's due to an external or full-page-reload link, for which we don't want to call the hook again.\n\t\t\t\t\t/** @type {import('@sveltejs/kit').BeforeNavigate} */\n\t\t\t\t\tconst navigation = {\n\t\t\t\t\t\t...nav.navigation,\n\t\t\t\t\t\tcancel: () => {\n\t\t\t\t\t\t\tshould_block = true;\n\t\t\t\t\t\t\tnav.reject(new Error('navigation was cancelled'));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tcallbacks.before_navigate.forEach((fn) => fn(navigation));\n\t\t\t\t}\n\n\t\t\t\tif (should_block) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.returnValue = '';\n\t\t\t\t} else {\n\t\t\t\t\thistory.scrollRestoration = 'auto';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('visibilitychange', () => {\n\t\t\t\tif (document.visibilityState === 'hidden') {\n\t\t\t\t\tpersist_state();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// @ts-expect-error this isn't supported everywhere yet\n\t\t\tif (!navigator.connection?.saveData) {\n\t\t\t\tsetup_preload();\n\t\t\t}\n\n\t\t\t/** @param {MouseEvent} event */\n\t\t\tcontainer.addEventListener('click', (event) => {\n\t\t\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\t\t\tif (event.button || event.which !== 1) return;\n\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\tconst a = find_anchor(/** @type {Element} */ (event.composedPath()[0]), container);\n\t\t\t\tif (!a) return;\n\n\t\t\t\tconst { url, external, target, download } = get_link_info(a, base);\n\t\t\t\tif (!url) return;\n\n\t\t\t\t// bail out before `beforeNavigate` if link opens in a different tab\n\t\t\t\tif (target === '_parent' || target === '_top') {\n\t\t\t\t\tif (window.parent !== window) return;\n\t\t\t\t} else if (target && target !== '_self') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst options = get_router_options(a);\n\t\t\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\n\t\t\t\t// Ignore URL protocols that differ to the current one and are not http(s) (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t\t\t// This may be wrong when the protocol is x: and the link goes to y:.. which should be treated as an external\n\t\t\t\t// navigation, but it's not clear how to handle that case and it's not likely to come up in practice.\n\t\t\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t\t\t// See:\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/6496\n\t\t\t\tif (\n\t\t\t\t\t!is_svg_a_element &&\n\t\t\t\t\turl.protocol !== location.protocol &&\n\t\t\t\t\t!(url.protocol === 'https:' || url.protocol === 'http:')\n\t\t\t\t)\n\t\t\t\t\treturn;\n\n\t\t\t\tif (download) return;\n\n\t\t\t\t// Ignore the following but fire beforeNavigate\n\t\t\t\tif (external || options.reload) {\n\t\t\t\t\tif (before_navigate({ url, type: 'link' })) {\n\t\t\t\t\t\t// set `navigating` to `true` to prevent `beforeNavigate` callbacks\n\t\t\t\t\t\t// being called when the page unloads\n\t\t\t\t\t\tnavigating = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t\t\t// This will ensure the `hashchange` event is fired\n\t\t\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\t\t\tconst [nonhash, hash] = url.href.split('#');\n\t\t\t\tif (hash !== undefined && nonhash === location.href.split('#')[0]) {\n\t\t\t\t\t// If we are trying to navigate to the same hash, we should only\n\t\t\t\t\t// attempt to scroll to that element and avoid any history changes.\n\t\t\t\t\t// Otherwise, this can cause Firefox to incorrectly assign a null\n\t\t\t\t\t// history state value without any signal that we can detect.\n\t\t\t\t\tif (current.url.hash === url.hash) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\ta.ownerDocument.getElementById(hash)?.scrollIntoView();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\t\t\thash_navigating = true;\n\n\t\t\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\t\t\tupdate_url(url);\n\n\t\t\t\t\tif (!options.replace_state) return;\n\n\t\t\t\t\t// hashchange event shouldn't occur if the router is replacing state.\n\t\t\t\t\thash_navigating = false;\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tnavigate({\n\t\t\t\t\turl,\n\t\t\t\t\tscroll: options.noscroll ? scroll_state() : null,\n\t\t\t\t\tkeepfocus: options.keep_focus ?? false,\n\t\t\t\t\tredirect_count: 0,\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\tstate: {},\n\t\t\t\t\t\treplaceState: options.replace_state ?? url.href === location.href\n\t\t\t\t\t},\n\t\t\t\t\taccepted: () => event.preventDefault(),\n\t\t\t\t\tblocked: () => event.preventDefault(),\n\t\t\t\t\ttype: 'link'\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcontainer.addEventListener('submit', (event) => {\n\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\tconst form = /** @type {HTMLFormElement} */ (\n\t\t\t\t\tHTMLFormElement.prototype.cloneNode.call(event.target)\n\t\t\t\t);\n\n\t\t\t\tconst submitter = /** @type {HTMLButtonElement | HTMLInputElement | null} */ (\n\t\t\t\t\tevent.submitter\n\t\t\t\t);\n\n\t\t\t\tconst method = submitter?.formMethod || form.method;\n\n\t\t\t\tif (method !== 'get') return;\n\n\t\t\t\tconst url = new URL(\n\t\t\t\t\t(submitter?.hasAttribute('formaction') && submitter?.formAction) || form.action\n\t\t\t\t);\n\n\t\t\t\tif (is_external_url(url, base)) return;\n\n\t\t\t\tconst event_form = /** @type {HTMLFormElement} */ (event.target);\n\n\t\t\t\tconst { keep_focus, noscroll, reload, replace_state } = get_router_options(event_form);\n\t\t\t\tif (reload) return;\n\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\n\t\t\t\tconst data = new FormData(event_form);\n\n\t\t\t\tconst submitter_name = submitter?.getAttribute('name');\n\t\t\t\tif (submitter_name) {\n\t\t\t\t\tdata.append(submitter_name, submitter?.getAttribute('value') ?? '');\n\t\t\t\t}\n\n\t\t\t\t// @ts-expect-error `URLSearchParams(fd)` is kosher, but typescript doesn't know that\n\t\t\t\turl.search = new URLSearchParams(data).toString();\n\n\t\t\t\tnavigate({\n\t\t\t\t\turl,\n\t\t\t\t\tscroll: noscroll ? scroll_state() : null,\n\t\t\t\t\tkeepfocus: keep_focus ?? false,\n\t\t\t\t\tredirect_count: 0,\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\tstate: {},\n\t\t\t\t\t\treplaceState: replace_state ?? url.href === location.href\n\t\t\t\t\t},\n\t\t\t\t\tnav_token: {},\n\t\t\t\t\taccepted: () => {},\n\t\t\t\t\tblocked: () => {},\n\t\t\t\t\ttype: 'form'\n\t\t\t\t});\n\t\t\t});\n\n\t\t\taddEventListener('popstate', async (event) => {\n\t\t\t\ttoken = {};\n\t\t\t\tif (event.state?.[INDEX_KEY]) {\n\t\t\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\t\t\tif (event.state[INDEX_KEY] === current_history_index) return;\n\n\t\t\t\t\tconst scroll = scroll_positions[event.state[INDEX_KEY]];\n\t\t\t\t\tconst url = new URL(location.href);\n\n\t\t\t\t\t// if the only change is the hash, we don't need to do anything...\n\t\t\t\t\tif (current.url.href.split('#')[0] === location.href.split('#')[0]) {\n\t\t\t\t\t\t// ...except update our internal URL tracking and handle scroll\n\t\t\t\t\t\tupdate_url(url);\n\t\t\t\t\t\tscroll_positions[current_history_index] = scroll_state();\n\t\t\t\t\t\tcurrent_history_index = event.state[INDEX_KEY];\n\t\t\t\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst delta = event.state[INDEX_KEY] - current_history_index;\n\n\t\t\t\t\tawait navigate({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tscroll,\n\t\t\t\t\t\tkeepfocus: false,\n\t\t\t\t\t\tredirect_count: 0,\n\t\t\t\t\t\tdetails: null,\n\t\t\t\t\t\taccepted: () => {\n\t\t\t\t\t\t\tcurrent_history_index = event.state[INDEX_KEY];\n\t\t\t\t\t\t},\n\t\t\t\t\t\tblocked: () => {\n\t\t\t\t\t\t\thistory.go(-delta);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'popstate',\n\t\t\t\t\t\tdelta,\n\t\t\t\t\t\tnav_token: token\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// since popstate event is also emitted when an anchor referencing the same\n\t\t\t\t\t// document is clicked, we have to check that the router isn't already handling\n\t\t\t\t\t// the navigation. otherwise we would be updating the page store twice.\n\t\t\t\t\tif (!hash_navigating) {\n\t\t\t\t\t\tconst url = new URL(location.href);\n\t\t\t\t\t\tupdate_url(url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('hashchange', () => {\n\t\t\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t\t\t// we need to update history, otherwise we have to leave it alone\n\t\t\t\tif (hash_navigating) {\n\t\t\t\t\thash_navigating = false;\n\t\t\t\t\thistory.replaceState(\n\t\t\t\t\t\t{ ...history.state, [INDEX_KEY]: ++current_history_index },\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tlocation.href\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t\t\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t\t\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\t\t\tfor (const link of document.querySelectorAll('link')) {\n\t\t\t\tif (link.rel === 'icon') link.href = link.href; // eslint-disable-line\n\t\t\t}\n\n\t\t\taddEventListener('pageshow', (event) => {\n\t\t\t\t// If the user navigates to another site and then uses the back button and\n\t\t\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t\t\t// the navigation away from it was successful.\n\t\t\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\t\t\tif (event.persisted) {\n\t\t\t\t\tstores.navigating.set(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * @param {URL} url\n\t\t\t */\n\t\t\tfunction update_url(url) {\n\t\t\t\tcurrent.url = url;\n\t\t\t\tstores.page.set({ ...page, url });\n\t\t\t\tstores.page.notify();\n\t\t\t}\n\t\t},\n\n\t\t_hydrate: async ({\n\t\t\tstatus = 200,\n\t\t\terror,\n\t\t\tnode_ids,\n\t\t\tparams,\n\t\t\troute,\n\t\t\tdata: server_data_nodes,\n\t\t\tform\n\t\t}) => {\n\t\t\thydrated = true;\n\n\t\t\tconst url = new URL(location.href);\n\n\t\t\tif (!__SVELTEKIT_EMBEDDED__) {\n\t\t\t\t// See https://github.com/sveltejs/kit/pull/4935#issuecomment-1328093358 for one motivation\n\t\t\t\t// of determining the params on the client side.\n\t\t\t\t({ params = {}, route = { id: null } } = get_navigation_intent(url, false) || {});\n\t\t\t}\n\n\t\t\t/** @type {import('./types.js').NavigationFinished | undefined} */\n\t\t\tlet result;\n\n\t\t\ttry {\n\t\t\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\t\t\tconst server_data_node = server_data_nodes[i];\n\t\t\t\t\t// Type isn't completely accurate, we still need to deserialize uses\n\t\t\t\t\tif (server_data_node?.uses) {\n\t\t\t\t\t\tserver_data_node.uses = deserialize_uses(server_data_node.uses);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn load_node({\n\t\t\t\t\t\tloader: app.nodes[n],\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\troute,\n\t\t\t\t\t\tparent: async () => {\n\t\t\t\t\t\t\tconst data = {};\n\t\t\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tserver_data_node: create_data_node(server_data_node)\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t/** @type {Array<import('./types.js').BranchNode | undefined>} */\n\t\t\t\tconst branch = await Promise.all(branch_promises);\n\n\t\t\t\tconst parsed_route = routes.find(({ id }) => id === route.id);\n\n\t\t\t\t// server-side will have compacted the branch, reinstate empty slots\n\t\t\t\t// so that error boundaries can be lined up correctly\n\t\t\t\tif (parsed_route) {\n\t\t\t\t\tconst layouts = parsed_route.layouts;\n\t\t\t\t\tfor (let i = 0; i < layouts.length; i++) {\n\t\t\t\t\t\tif (!layouts[i]) {\n\t\t\t\t\t\t\tbranch.splice(i, 0, undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresult = await get_navigation_result_from_branch({\n\t\t\t\t\turl,\n\t\t\t\t\tparams,\n\t\t\t\t\tbranch,\n\t\t\t\t\tstatus,\n\t\t\t\t\terror,\n\t\t\t\t\tform,\n\t\t\t\t\troute: parsed_route ?? null\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tif (error instanceof Redirect) {\n\t\t\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t\t\t// a redirect but only in the browser\n\t\t\t\t\tawait native_navigation(new URL(error.location, location.href));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult = await load_root_error_page({\n\t\t\t\t\tstatus: error instanceof HttpError ? error.status : 500,\n\t\t\t\t\terror: await handle_error(error, { url, params, route }),\n\t\t\t\t\turl,\n\t\t\t\t\troute\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tinitialize(result);\n\t\t}\n\t};\n}\n\n/**\n * @param {URL} url\n * @param {boolean[]} invalid\n * @returns {Promise<import('types').ServerNodesResponse | import('types').ServerRedirectNode>}\n */\nasync function load_data(url, invalid) {\n\tconst data_url = new URL(url);\n\tdata_url.pathname = add_data_suffix(url.pathname);\n\tif (url.pathname.endsWith('/')) {\n\t\tdata_url.searchParams.append(TRAILING_SLASH_PARAM, '1');\n\t}\n\tif (DEV && url.searchParams.has(INVALIDATED_PARAM)) {\n\t\tthrow new Error(`Cannot used reserved query parameter \"${INVALIDATED_PARAM}\"`);\n\t}\n\tdata_url.searchParams.append(INVALIDATED_PARAM, invalid.map((i) => (i ? '1' : '0')).join(''));\n\n\tconst res = await native_fetch(data_url.href);\n\n\t// if `__data.json` doesn't exist or the server has an internal error,\n\t// fallback to native navigation so we avoid parsing the HTML error page as a JSON\n\tif (res.headers.get('content-type')?.includes('text/html')) {\n\t\tawait native_navigation(url);\n\t}\n\n\tif (!res.ok) {\n\t\t// error message is a JSON-stringified string which devalue can't handle at the top level\n\t\t// turn it into a HttpError to not call handleError on the client again (was already handled on the server)\n\t\tthrow new HttpError(res.status, await res.json());\n\t}\n\n\t// TODO: fix eslint error / figure out if it actually applies to our situation\n\t// eslint-disable-next-line\n\treturn new Promise(async (resolve) => {\n\t\t/**\n\t\t * Map of deferred promises that will be resolved by a subsequent chunk of data\n\t\t * @type {Map<string, import('types').Deferred>}\n\t\t */\n\t\tconst deferreds = new Map();\n\t\tconst reader = /** @type {ReadableStream<Uint8Array>} */ (res.body).getReader();\n\t\tconst decoder = new TextDecoder();\n\n\t\t/**\n\t\t * @param {any} data\n\t\t */\n\t\tfunction deserialize(data) {\n\t\t\treturn devalue.unflatten(data, {\n\t\t\t\tPromise: (id) => {\n\t\t\t\t\treturn new Promise((fulfil, reject) => {\n\t\t\t\t\t\tdeferreds.set(id, { fulfil, reject });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet text = '';\n\n\t\twhile (true) {\n\t\t\t// Format follows ndjson (each line is a JSON object) or regular JSON spec\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done && !text) break;\n\n\t\t\ttext += !value && text ? '\\n' : decoder.decode(value); // no value -> final chunk -> add a new line to trigger the last parse\n\n\t\t\twhile (true) {\n\t\t\t\tconst split = text.indexOf('\\n');\n\t\t\t\tif (split === -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst node = JSON.parse(text.slice(0, split));\n\t\t\t\ttext = text.slice(split + 1);\n\n\t\t\t\tif (node.type === 'redirect') {\n\t\t\t\t\treturn resolve(node);\n\t\t\t\t}\n\n\t\t\t\tif (node.type === 'data') {\n\t\t\t\t\t// This is the first (and possibly only, if no pending promises) chunk\n\t\t\t\t\tnode.nodes?.forEach((/** @type {any} */ node) => {\n\t\t\t\t\t\tif (node?.type === 'data') {\n\t\t\t\t\t\t\tnode.uses = deserialize_uses(node.uses);\n\t\t\t\t\t\t\tnode.data = deserialize(node.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(node);\n\t\t\t\t} else if (node.type === 'chunk') {\n\t\t\t\t\t// This is a subsequent chunk containing deferred data\n\t\t\t\t\tconst { id, data, error } = node;\n\t\t\t\t\tconst deferred = /** @type {import('types').Deferred} */ (deferreds.get(id));\n\t\t\t\t\tdeferreds.delete(id);\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tdeferred.reject(deserialize(error));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdeferred.fulfil(deserialize(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// TODO edge case handling necessary? stream() read fails?\n}\n\n/**\n * @param {any} uses\n * @return {import('types').Uses}\n */\nfunction deserialize_uses(uses) {\n\treturn {\n\t\tdependencies: new Set(uses?.dependencies ?? []),\n\t\tparams: new Set(uses?.params ?? []),\n\t\tparent: !!uses?.parent,\n\t\troute: !!uses?.route,\n\t\turl: !!uses?.url\n\t};\n}\n\nfunction reset_focus() {\n\tconst autofocus = document.querySelector('[autofocus]');\n\tif (autofocus) {\n\t\t// @ts-ignore\n\t\tautofocus.focus();\n\t} else {\n\t\t// Reset page selection and focus\n\t\t// We try to mimic browsers' behaviour as closely as possible by targeting the\n\t\t// first scrollable region, but unfortunately it's not a perfect match — e.g.\n\t\t// shift-tabbing won't immediately cycle up from the end of the page on Chromium\n\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\tconst root = document.body;\n\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\troot.tabIndex = -1;\n\t\t// @ts-expect-error\n\t\troot.focus({ preventScroll: true, focusVisible: false });\n\n\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\tif (tabindex !== null) {\n\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t} else {\n\t\t\troot.removeAttribute('tabindex');\n\t\t}\n\n\t\t// capture current selection, so we can compare the state after\n\t\t// snapshot restoration and afterNavigate callbacks have run\n\t\tconst selection = getSelection();\n\n\t\tif (selection && selection.type !== 'None') {\n\t\t\t/** @type {Range[]} */\n\t\t\tconst ranges = [];\n\n\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\tranges.push(selection.getRangeAt(i));\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (selection.rangeCount !== ranges.length) return;\n\n\t\t\t\tfor (let i = 0; i < selection.rangeCount; i += 1) {\n\t\t\t\t\tconst a = ranges[i];\n\t\t\t\t\tconst b = selection.getRangeAt(i);\n\n\t\t\t\t\t// we need to do a deep comparison rather than just `a !== b` because\n\t\t\t\t\t// Safari behaves differently to other browsers\n\t\t\t\t\tif (\n\t\t\t\t\t\ta.commonAncestorContainer !== b.commonAncestorContainer ||\n\t\t\t\t\t\ta.startContainer !== b.startContainer ||\n\t\t\t\t\t\ta.endContainer !== b.endContainer ||\n\t\t\t\t\t\ta.startOffset !== b.startOffset ||\n\t\t\t\t\t\ta.endOffset !== b.endOffset\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if the selection hasn't changed (as a result of an element being (auto)focused,\n\t\t\t\t// or a programmatic selection, we reset everything as part of the navigation)\n\t\t\t\t// fixes https://github.com/sveltejs/kit/issues/8439\n\t\t\t\tselection.removeAllRanges();\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./types.js').NavigationState} current\n * @param {import('./types.js').NavigationIntent | undefined} intent\n * @param {URL | null} url\n * @param {Exclude<import('@sveltejs/kit').NavigationType, 'enter'>} type\n */\nfunction create_navigation(current, intent, url, type) {\n\t/** @type {(value: any) => void} */\n\tlet fulfil;\n\n\t/** @type {(error: any) => void} */\n\tlet reject;\n\n\tconst complete = new Promise((f, r) => {\n\t\tfulfil = f;\n\t\treject = r;\n\t});\n\n\t// Handle any errors off-chain so that it doesn't show up as an unhandled rejection\n\tcomplete.catch(() => {});\n\n\t/** @type {import('@sveltejs/kit').Navigation} */\n\tconst navigation = {\n\t\tfrom: {\n\t\t\tparams: current.params,\n\t\t\troute: { id: current.route?.id ?? null },\n\t\t\turl: current.url\n\t\t},\n\t\tto: url && {\n\t\t\tparams: intent?.params ?? null,\n\t\t\troute: { id: intent?.route?.id ?? null },\n\t\t\turl\n\t\t},\n\t\twillUnload: !intent,\n\t\ttype,\n\t\tcomplete\n\t};\n\n\treturn {\n\t\tnavigation,\n\t\t// @ts-expect-error\n\t\tfulfil,\n\t\t// @ts-expect-error\n\t\treject\n\t};\n}\n\nif (DEV) {\n\t// Nasty hack to silence harmless warnings the user can do nothing about\n\tconst console_warn = console.warn;\n\tconsole.warn = function warn(...args) {\n\t\tif (\n\t\t\targs.length === 1 &&\n\t\t\t/<(Layout|Page|Error)(_[\\w$]+)?> was created (with unknown|without expected) prop '(data|form)'/.test(\n\t\t\t\targs[0]\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconsole_warn(...args);\n\t};\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (errored) {\n\t\t\t\tlocation.reload();\n\t\t\t}\n\t\t});\n\t}\n}\n","import { DEV } from 'esm-env';\nimport { create_client } from './client.js';\nimport { init } from './singletons.js';\n\n/**\n * @param {import('./types.js').SvelteKitApp} app\n * @param {HTMLElement} target\n * @param {Parameters<import('./types.js').Client['_hydrate']>[0]} [hydrate]\n */\nexport async function start(app, target, hydrate) {\n\tif (DEV && target === document.body) {\n\t\tconsole.warn(\n\t\t\t'Placing %sveltekit.body% directly inside <body> is not recommended, as your app may break for users who have certain browser extensions installed.\\n\\nConsider wrapping it in an element:\\n\\n<div style=\"display: contents\">\\n  %sveltekit.body%\\n</div>'\n\t\t);\n\t}\n\n\tconst client = create_client(app, target);\n\n\tinit({ client });\n\n\tif (hydrate) {\n\t\tawait client._hydrate(hydrate);\n\t} else {\n\t\tclient.goto(location.href, { replaceState: true });\n\t}\n\n\tclient._start_router();\n}\n"],"names":["normalize_path","path","trailing_slash","decode_pathname","pathname","decode_params","params","key","tracked_url_properties","make_trackable","url","callback","tracked","property","disable_hash","DATA_SUFFIX","add_data_suffix","hash","values","value","buffer","i","native_fetch","input","init","cache","build_selector","initial_fetch","resource","opts","selector","script","body","ttl","subsequent_fetch","resolved","cached","param_pattern","parse_route_id","id","get_route_segments","segment","rest_match","optional_match","parts","content","escape","code","match","is_optional","is_rest","name","matcher","affects_path","route","exec","matchers","result","values_needing_match","buffered","param","s","next_param","next_value","str","parse","nodes","server_loads","dictionary","layouts_with_server_load","leaf","layouts","errors","pattern","n","create_layout_loader","create_leaf_loader","uses_server_data","get","set","json","UNDEFINED","HOLE","NAN","POSITIVE_INFINITY","NEGATIVE_INFINITY","NEGATIVE_ZERO","unflatten","parsed","revivers","hydrate","hydrated","index","standalone","type","reviver","map","obj","array","object","compact","arr","val","valid_layout_exports","valid_layout_server_exports","unwrap_promises","_a","HttpError","status","Redirect","location","INVALIDATED_PARAM","TRAILING_SLASH_PARAM","scroll_positions","SCROLL_KEY","snapshots","SNAPSHOT_KEY","update_scroll_positions","scroll_state","native_navigation","create_client","app","target","routes","default_layout_loader","default_error_loader","container","invalidated","components","load_cache","callbacks","current","started","autoscroll","updating","navigating","hash_navigating","force_invalidation","root","current_history_index","INDEX_KEY","scroll","page","token","pending_invalidate","invalidate","intent","get_navigation_intent","nav_token","navigation_result","load_route","goto","capture_snapshot","c","restore_snapshot","_b","persist_state","noScroll","replaceState","keepFocus","state","invalidateAll","redirect_count","get_base_uri","navigate","preload_data","preload_code","pathnames","promises","r","load","initialize","style","stores","navigation","fn","get_navigation_result_from_branch","branch","error","form","slash","node","branch_node","data","data_changed","p","prev","load_node","loader","parent","server_data_node","uses","depends","deps","dep","href","load_input","requested","_c","has_changed","parent_changed","route_changed","url_changed","create_data_node","previous","invalidating","loaders","server_data","parent_invalid","invalid_server_nodes","invalid","load_data","load_root_error_page","handle_error","server_data_nodes","branch_promises","j","err","error_load","load_nearest_error_page","server_fallback","origin","root_layout","root_error","is_external_url","base","get_url_path","before_navigate","delta","should_block","nav","create_navigation","cancellable","keepfocus","details","accepted","blocked","previous_history_index","change","after_navigate","cleanup","activeElement","tick","deep_linked","changed_focus","reset_focus","setup_preload","mousemove_timeout","event","preload","tap","observer","entries","entry","element","priority","a","find_anchor","external","download","get_link_info","options","get_router_options","PRELOAD_PRIORITIES","onMount","e","nonhash","update_url","submitter","event_form","keep_focus","noscroll","reload","replace_state","submitter_name","link","node_ids","deserialize_uses","parsed_route","data_url","res","resolve","deferreds","reader","decoder","deserialize","fulfil","reject","text","done","split","deferred","autofocus","tabindex","selection","ranges","b","complete","f","start","client"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}