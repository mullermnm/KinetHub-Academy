{"version":3,"file":"10.df566063.js","sources":["../../../../../../../../node_modules/.pnpm/carbon-icons-svelte@12.3.0/node_modules/carbon-icons-svelte/lib/PinFilled.svelte","../../../../../../../../node_modules/.pnpm/carbon-icons-svelte@12.3.0/node_modules/carbon-icons-svelte/lib/Send.svelte","../../../../../../../../node_modules/.pnpm/carbon-icons-svelte@12.3.0/node_modules/carbon-icons-svelte/lib/UserMultiple.svelte","../../../../../../src/routes/courses/[id]/+page.js","../../../../../../src/lib/components/Course/components/NewsFeed/store.ts","../../../../../../src/lib/components/Course/components/NewsFeed/DeleteFeedConfirmation.svelte","../../../../../../src/lib/components/Course/components/NewsFeed/NewsFeedCard.svelte","../../../../../../src/lib/utils/services/newsfeed/index.ts","../../../../../../src/lib/components/Course/components/NewsFeed/NewFeedModal.svelte","../../../../../../src/routes/courses/[id]/+page.svelte"],"sourcesContent":["<script>\n  export let size = 16;\n\n  export let title = undefined;\n\n  $: labelled = $$props[\"aria-label\"] || $$props[\"aria-labelledby\"] || title;\n  $: attributes = {\n    \"aria-hidden\": labelled ? undefined : true,\n    role: labelled ? \"img\" : undefined,\n    focusable: Number($$props[\"tabindex\"]) === 0 ? true : undefined\n  };\n</script>\n\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 32 32\"\n  fill=\"currentColor\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  width={size}\n  height={size}\n  {...attributes}\n  {...$$restProps}>\n  {#if title}<title>{title}</title>{/if}\n  <path d=\"M28.5858,13.3137,30,11.9,20,2,18.6858,3.415l1.1858,1.1857L8.38,14.3225,6.6641,12.6067,5.25,14l5.6572,5.6773L2,28.5831,3.41,30l8.9111-8.9087L18,26.7482l1.3929-1.414L17.6765,23.618l9.724-11.4895Z\"></path>\n</svg>","<script>\n  export let size = 16;\n\n  export let title = undefined;\n\n  $: labelled = $$props[\"aria-label\"] || $$props[\"aria-labelledby\"] || title;\n  $: attributes = {\n    \"aria-hidden\": labelled ? undefined : true,\n    role: labelled ? \"img\" : undefined,\n    focusable: Number($$props[\"tabindex\"]) === 0 ? true : undefined\n  };\n</script>\n\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 32 32\"\n  fill=\"currentColor\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  width={size}\n  height={size}\n  {...attributes}\n  {...$$restProps}>\n  {#if title}<title>{title}</title>{/if}\n  <path d=\"M27.45,15.11l-22-11a1,1,0,0,0-1.08.12,1,1,0,0,0-.33,1L7,16,4,26.74A1,1,0,0,0,5,28a1,1,0,0,0,.45-.11l22-11a1,1,0,0,0,0-1.78Zm-20.9,10L8.76,17H18V15H8.76L6.55,6.89,24.76,16Z\"></path>\n</svg>","<script>\n  export let size = 16;\n\n  export let title = undefined;\n\n  $: labelled = $$props[\"aria-label\"] || $$props[\"aria-labelledby\"] || title;\n  $: attributes = {\n    \"aria-hidden\": labelled ? undefined : true,\n    role: labelled ? \"img\" : undefined,\n    focusable: Number($$props[\"tabindex\"]) === 0 ? true : undefined\n  };\n</script>\n\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 32 32\"\n  fill=\"currentColor\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  width={size}\n  height={size}\n  {...attributes}\n  {...$$restProps}>\n  {#if title}<title>{title}</title>{/if}\n  <path d=\"M30 30H28V25a5.0057 5.0057 0 00-5-5V18a7.0078 7.0078 0 017 7zM22 30H20V25a5.0059 5.0059 0 00-5-5H9a5.0059 5.0059 0 00-5 5v5H2V25a7.0082 7.0082 0 017-7h6a7.0082 7.0082 0 017 7zM20 2V4a5 5 0 010 10v2A7 7 0 0020 2zM12 4A5 5 0 117 9a5 5 0 015-5m0-2a7 7 0 107 7A7 7 0 0012 2z\"></path>\n</svg>","export const load = ({ params = { id: '' } }) => {\n  return {\n    courseId: params.id\n  };\n};\n","import type { Feed } from '$lib/utils/types/feed';\nimport { writable } from 'svelte/store';\n\nexport const isNewFeedModal = writable({\n  open: false\n});\n\nexport const newsFeed = writable<Feed[]>([]);\n","<script lang=\"ts\">\n  import Modal from '$lib/components/Modal/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n\n  export let openDeleteModal = false;\n  export let deleteFeed = () => {};\n\n  async function handleDelete() {\n    deleteFeed();\n    openDeleteModal = false;\n  }\n</script>\n\n<Modal\n  onClose={() => (openDeleteModal = false)}\n  bind:open={openDeleteModal}\n  width=\"w-96\"\n  modalHeading=\"Delete Feed\"\n>\n  <div>\n    <h1 class=\"dark:text-white text-lg\">Are you sure you want to delete this feed?</h1>\n\n    <div class=\"mt-5 flex items-center justify-between\">\n      <PrimaryButton\n        className=\"px-6 py-3\"\n        variant={VARIANTS.OUTLINED}\n        label=\"No\"\n        onClick={() => (openDeleteModal = false)}\n      />\n      <PrimaryButton\n        className=\"px-6 py-3\"\n        variant={VARIANTS.OUTLINED}\n        label=\"Yes\"\n        onClick={handleDelete}\n      />\n    </div>\n  </div>\n</Modal>\n","<script lang=\"ts\">\n  import { OverflowMenu, OverflowMenuItem } from 'carbon-components-svelte';\n  import Send from 'carbon-icons-svelte/lib/Send.svelte';\n  import Chip from '$lib/components/Chip/index.svelte';\n  import UserMultiple from 'carbon-icons-svelte/lib/UserMultiple.svelte';\n  import { calDateDiff } from '$lib/utils/functions/date';\n  import type { Author, Feed } from '$lib/utils/types/feed';\n  import DeleteFeedConfirmation from './DeleteFeedConfirmation.svelte';\n  import HtmlRender from '$lib/components/HTMLRender/HTMLRender.svelte';\n  import { isNewFeedModal } from '$lib/components/Course/components/NewsFeed/store';\n  import RoleBasedSecurity from '$lib/components/RoleBasedSecurity/index.svelte';\n  import { isOrgAdmin } from '$lib/utils/store/org';\n  import { profile } from '$lib/utils/store/user';\n  import { isHtmlValueEmpty } from '$lib/utils/functions/toHtml';\n  import pluralize from 'pluralize';\n  import { onMount } from 'svelte';\n  import { addNewsfeedCommentValidation } from '$lib/utils/functions/validator';\n\n  export let feed: Feed;\n  export let editFeed: Feed;\n  export let author: Author;\n  export let edit = false;\n  export let deleteFeed = (arg: string) => {};\n  export let deleteComment = (arg: string) => {};\n  export let addNewComment = (arg1: string, arg2: string, arg3: string) => {};\n  export let addNewReaction = (arg1: string, arg2: string, arg3: string) => {};\n  export let onPin = (feedId: Feed['id'], isPinned: Feed['isPinned']) => {};\n  export let isActive = false;\n\n  let comment = '';\n  let areCommentsExpanded = false;\n  let isDeleteFeedModal = false;\n  let errors: {\n    newComment: string;\n  };\n\n  let reactions = {\n    smile: '😀',\n    thumbsup: '👍',\n    thumbsdown: '👎',\n    clap: '👏'\n  };\n\n  const openEditFeed = () => {\n    $isNewFeedModal.open = true;\n    edit = true;\n\n    if (edit === true) {\n      editFeed = feed;\n    }\n  };\n\n  const expandComment = () => {\n    areCommentsExpanded = !areCommentsExpanded;\n  };\n\n  const handleAddNewReaction = (reactionType: string) => {\n    addNewReaction(reactionType, feed.id, author.id);\n  };\n\n  const handleAddNewComment = (event) => {\n    if (event.key === 'Enter' || event.type === 'click') {\n      errors = addNewsfeedCommentValidation(comment) as typeof errors;\n      if (Object.keys(errors).length) {\n        return;\n      }\n      event.preventDefault();\n      addNewComment(comment, feed.id, author.id);\n      comment = '';\n    }\n  };\n\n  const handleDeleteFeed = () => {\n    deleteFeed(feed.id);\n  };\n\n  const handleDeleteComment = (id: string) => {\n    deleteComment(id);\n  };\n\n  const getClassIfSelectedByAuthor = (reactionType) => {\n    const usersReacted = feed.reaction[reactionType] || [];\n\n    return usersReacted.includes(author.id)\n      ? 'bg-primary-200 border-primary-600 pl-2'\n      : 'bg-gray-200 border-gray-600 pl-2';\n  };\n\n  onMount(() => {\n    if (isActive) {\n      const el = document.getElementById(feed.id);\n      el?.scrollIntoView({\n        block: 'start',\n        behavior: 'smooth',\n        inline: 'nearest'\n      });\n    }\n  });\n</script>\n\n<div\n  id={feed.id}\n  class=\"flex flex-col gap-5 {isActive\n    ? 'border-2 border-primary-700'\n    : 'border border-gray-200 dark:border-neutral-600'} rounded-md mb-7 max-w-3xl\"\n>\n  <section>\n    <div class=\"p-3 pb-0\">\n      <div class=\"flex justify-between mb-2\">\n        <span class=\"flex items-center gap-3\">\n          <div class=\"w-9 h-9\">\n            <img\n              src={feed.author?.profile?.avatar_url}\n              alt=\"users banner\"\n              class=\"w-full h-full rounded-full object-cover\"\n            />\n          </div>\n          <span>\n            <p class=\"text-base font-semibold capitalize\">{feed.author?.profile?.fullname}</p>\n            <p class=\"text-sm font-medium text-gray-600\">{calDateDiff(feed.created_at)}</p>\n          </span>\n        </span>\n        <RoleBasedSecurity allowedRoles={[1, 2]}>\n          <OverflowMenu flipped>\n            <OverflowMenuItem\n              text={feed.isPinned ? 'Unpin' : 'Pin'}\n              on:click={() => onPin(feed.id, feed.isPinned)}\n            />\n            <OverflowMenuItem text=\"Edit\" on:click={openEditFeed} />\n            <OverflowMenuItem danger text=\"Delete\" on:click={() => (isDeleteFeedModal = true)} />\n          </OverflowMenu>\n        </RoleBasedSecurity>\n      </div>\n      {#if !isHtmlValueEmpty(feed.content)}\n        <HtmlRender className=\"text-sm font-medium w-[80%] mb-4\">\n          <svelte:fragment slot=\"content\">\n            <div>\n              {@html feed.content}\n            </div>\n          </svelte:fragment>\n        </HtmlRender>\n      {/if}\n    </div>\n\n    <div class=\"flex items-center gap-4 px-3\">\n      <div class=\"flex items-center gap-4 px-3\">\n        {#each Object.keys(feed.reaction) as reactionType}\n          {#if reactions[reactionType]}\n            <button\n              on:click={() => handleAddNewReaction(reactionType)}\n              class={`flex items-center transition ${\n                feed.reaction[reactionType].length >= 1 &&\n                `${getClassIfSelectedByAuthor(reactionType)} dark:text-black border rounded-full`\n              }`}\n            >\n              <div class=\"text-[15px]\">{reactions[reactionType]}</div>\n              {#if feed.reaction[reactionType].length >= 1}\n                <Chip value={feed.reaction[reactionType].length} className=\"bg-transparent\" />\n              {/if}\n            </button>\n          {/if}\n        {/each}\n      </div>\n    </div>\n  </section>\n\n  <section class=\"border-t border-gray-200 dark:border-neutral-600 p-3\">\n    {#if feed.comment.length > 0}\n      <button\n        on:click={expandComment}\n        class=\"flex flex-row items-center gap-1 -mx-2 px-2 rounded-md\"\n      >\n        <UserMultiple size={16} />\n        <p class=\"text-sm py-2\">\n          {pluralize('comment', feed.comment.length, true)}\n        </p>\n      </button>\n    {/if}\n    <div>\n      {#each feed.comment as comment, index}\n        {#if comment.content && (areCommentsExpanded || index === feed.comment.length - 1)}\n          <div class=\"group flex justify-between items-center py-2\">\n            <span class=\"flex items-center gap-3\">\n              <div class=\"w-9 h-9\">\n                <img\n                  src={comment.author?.profile?.avatar_url}\n                  alt=\"users banner\"\n                  class=\"w-full h-full rounded-full object-cover\"\n                />\n              </div>\n              <span>\n                <div class=\"flex items-center gap-2\">\n                  <p class=\"text-sm font-medium capitalize\">{comment.author?.profile?.fullname}</p>\n                  <p class=\"text-xs font-medium text-gray-600\">{calDateDiff(comment.created_at)}</p>\n                </div>\n                <p>{comment.content}</p>\n              </span>\n            </span>\n\n            {#if comment.author?.profile?.id === $profile.id || $isOrgAdmin}\n              <OverflowMenu flipped class=\"hidden group-hover:flex\">\n                <OverflowMenuItem\n                  danger\n                  text=\"Delete\"\n                  on:click={() => handleDeleteComment(comment.id)}\n                />\n              </OverflowMenu>\n            {/if}\n          </div>\n        {/if}\n      {/each}\n    </div>\n    <div class=\"flex items-center justify-between gap-2\">\n      <div class=\"w-7 h-7\">\n        <img\n          src={author.avatar_url}\n          alt=\"users banner\"\n          class=\"w-full h-full rounded-full object-cover\"\n        />\n      </div>\n      <div class=\"flex-1\">\n        <input\n          type=\"text\"\n          bind:value={comment}\n          on:keydown={handleAddNewComment}\n          placeholder=\"Add class comment\"\n          class=\"w-full bg-transparent border border-gray-200 dark:border-neutral-600 rounded-3xl\"\n          required\n        />\n      </div>\n      <button on:click={handleAddNewComment}>\n        <Send size={24} />\n      </button>\n    </div>\n    {#if errors?.newComment}\n      <p class=\"text-sm text-red-500\">{errors?.newComment}</p>\n    {/if}\n  </section>\n  <DeleteFeedConfirmation bind:openDeleteModal={isDeleteFeedModal} deleteFeed={handleDeleteFeed} />\n</div>\n","import type { Course } from '$lib/utils/types';\nimport { supabase } from '$lib/utils/functions/supabase';\nimport type { Reaction, FeedApi, Feed } from '$lib/utils/types/feed';\n\nexport async function fetchNewsFeedReaction(feedId: Feed['id']) {\n  return supabase.from('course_newsfeed').select(`reaction`).eq('id', feedId).single();\n}\n\nexport async function fetchNewsFeeds(courseId?: Course['id']) {\n  const response = await supabase\n    .from('course_newsfeed')\n    .select(\n      `\n    id,\n    created_at,\n    content,\n    course_id,\n    author:groupmember(\n      profile(\n        id,\n        fullname,\n        avatar_url\n      )\n    ),\n    reaction,\n    is_pinned,\n    comment:course_newsfeed_comment(\n        id,\n        created_at,\n        author:groupmember( profile(id, fullname, avatar_url) ),\n        content,\n        course_newsfeed_id)\n    `\n    )\n    .match({ course_id: courseId })\n    .order('created_at', { ascending: false })\n    .returns<FeedApi[]>();\n\n  const { data, error } = response;\n\n  return { data, error };\n}\n\nexport async function createNewFeed(post: {\n  content: string;\n  author_id: string;\n  course_id: string;\n  reaction: Reaction;\n}) {\n  const response = await supabase\n    .from('course_newsfeed')\n    .insert({\n      content: post.content,\n      author_id: post.author_id,\n      course_id: post.course_id,\n      reaction: post.reaction\n    })\n    .select();\n\n  return { response };\n}\n\nexport async function handleEditFeed(feedId: string, content: string) {\n  const response = await supabase\n    .from('course_newsfeed')\n    .update({ content: content })\n    .match({ id: feedId })\n    .select();\n  return response;\n}\n\nexport async function createComment(comment: {\n  content: string;\n  author_id: string;\n  course_newsfeed_id: string;\n}) {\n  const response = await supabase\n    .from('course_newsfeed_comment')\n    .insert({\n      content: comment.content,\n      author_id: comment.author_id,\n      course_newsfeed_id: comment.course_newsfeed_id\n    })\n    .select();\n\n  return { response };\n}\n\nexport async function toggleFeedIsPinned(feedId: string, isPinned: boolean) {\n  const response = await supabase\n    .from('course_newsfeed')\n    .update({\n      is_pinned: isPinned\n    })\n    .match({ id: feedId });\n\n  return { response };\n}\n\nexport async function deleteNewsFeedComment(commentId: string) {\n  const response = await supabase.from('course_newsfeed_comment').delete().match({ id: commentId });\n\n  return response;\n}\nexport async function deleteNewsFeed(feedId: string) {\n  await supabase.from('course_newsfeed_comment').delete().match({ course_newsfeed_id: feedId });\n  const response = await supabase.from('course_newsfeed').delete().match({ id: feedId });\n\n  return response;\n}\n\nexport async function getFeedForNotification(params: {\n  feedId: string;\n  authorId: string;\n  supabase: typeof supabase;\n}) {\n  const { data, error } = await params.supabase\n    .from('course_newsfeed')\n    .select(\n      `\n    content,\n    author:groupmember(profile(fullname, email)),\n    course(\n      id,\n      title,\n      group(\n        organization(siteName, name),\n        members:groupmember(id, profile(email, fullname))\n      )\n    )\n  `\n    )\n    .eq('id', params.feedId)\n    .limit(1)\n    .returns<\n      {\n        content: string;\n        author: {\n          profile: {\n            email: string;\n            fullname: string;\n          };\n        };\n        course: {\n          id: string;\n          title: string;\n          group: {\n            organization: {\n              name: string;\n              siteName: string;\n            };\n            members: {\n              id: string;\n              profile: {\n                email: string;\n                fullname: string;\n              };\n            }[];\n          };\n        };\n      }[]\n    >();\n\n  if (error) {\n    console.error('Failed to get feed', error);\n    return null;\n  }\n  console.log({\n    data\n  });\n  const [feed] = data || [];\n\n  if (!feed) return;\n\n  return {\n    id: params.feedId,\n    courseId: feed.course.id,\n    courseTitle: feed.course.title,\n    teacherName: feed.author?.profile?.fullname,\n    teacherEmail: feed.author?.profile?.email,\n    content: feed.content,\n    org: feed.course.group?.organization,\n    courseMembers: feed.course?.group?.members\n      ?.filter((member) => member.id !== params.authorId)\n      ?.map((member) => {\n        return member.profile;\n      })\n  };\n}\n","<script lang=\"ts\">\n  import Modal from '$lib/components/Modal/index.svelte';\n  import { isNewFeedModal } from '$lib/components/Course/components/NewsFeed/store';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import TextEditor from '$lib/components/TextEditor/index.svelte';\n  import { createNewFeed } from '$lib/utils/services/newsfeed';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import type { Feed, Author } from '$lib/utils/types/feed';\n  import {\n    NOTIFICATION_NAME,\n    triggerSendEmail\n  } from '$lib/utils/services/notification/notification';\n  import { t } from '$lib/utils/functions/translations';\n  import { createNewsfeedValidation } from '$lib/utils/functions/validator';\n  import { getTextFromHTML } from '$lib/utils/functions/toHtml';\n\n  export let author: Author | any = {};\n  export let courseId = '';\n  export let onSave = (feed: Feed) => {};\n  export let onEdit = (id: string, content: string) => {};\n  export let edit = false;\n  export let editFeed: Feed;\n\n  let newPost = '';\n  let isLoading = false;\n  let createdFeed;\n  let errors = {};\n\n  const onPost = async () => {\n    errors = createNewsfeedValidation(getTextFromHTML(newPost));\n\n    if (Object.keys(errors).length) {\n      return;\n    }\n    isLoading = true;\n    try {\n      if (edit) {\n        onEdit(editFeed.id, newPost);\n        snackbar.success('snackbar.newsfeed.success.edit');\n\n        edit = false;\n        newPost = '';\n        $isNewFeedModal.open = false;\n      } else {\n        const {\n          response: { data }\n        } = await createNewFeed({\n          content: newPost,\n          author_id: author.id,\n          course_id: courseId,\n          reaction: {\n            smile: [],\n            thumbsup: [],\n            thumbsdown: [],\n            clap: []\n          }\n        });\n\n        if (!data) return;\n\n        createdFeed = data[0];\n\n        if (!createdFeed) return;\n\n        onSave({\n          id: createdFeed.id,\n          content: newPost,\n          author: {\n            profile: { ...author }\n          },\n          created_at: createdFeed.created_at,\n          comment: [],\n          reaction: createdFeed.reaction,\n          isPinned: false\n        });\n\n        snackbar.success('snackbar.newsfeed.success.add');\n        // triggerSendEmail(NOTIFICATION_NAME.NEWSFEED, {\n        //   authorId: createdFeed.author_id,\n        //   feedId: createdFeed.id\n        // });\n        resetEditor();\n      }\n    } catch (error) {\n      snackbar.error(\n        'snackbar.newsfeed.error.error ' +\n          (edit ? 'snackbar.newsfeed.error.editing' : 'snackbar.newsfeed.error.creating')\n      );\n    } finally {\n      isLoading = false;\n    }\n  };\n\n  const resetEditor = () => {\n    newPost = '';\n    edit = false;\n    $isNewFeedModal.open = false;\n  };\n  $: newPost = edit === true ? editFeed?.content : '';\n</script>\n\n<Modal\n  onClose={resetEditor}\n  bind:open={$isNewFeedModal.open}\n  width=\"w-4/5\"\n  maxWidth=\"max-w-lg\"\n  modalHeading={edit === true\n    ? $t('course.navItem.news_feed.heading_button.edit_post')\n    : $t('course.navItem.news_feed.heading_button.make_a_post')}\n>\n  <section class=\"flex flex-col rounded-xl pb-3 h-full w-2/\">\n    <TextEditor\n      value={newPost}\n      onChange={(text) => {\n        newPost = text;\n      }}\n      placeholder={$t('course.navItem.news_feed.heading_button.placeholder')}\n      maxHeight={400}\n    />\n    {#if errors.newPost}\n      <p class=\"text-sm text-red-500\">{errors.newPost}</p>\n    {/if}\n    <div class=\"flex items-center justify-end py-2\">\n      <div class=\"flex gap-2\">\n        <PrimaryButton\n          label={$t('course.navItem.news_feed.heading_button.cancel')}\n          variant={VARIANTS.OUTLINED}\n          onClick={resetEditor}\n        />\n        <PrimaryButton\n          {isLoading}\n          label={$t('course.navItem.news_feed.heading_button.post')}\n          onClick={onPost}\n        />\n      </div>\n    </div>\n  </section>\n</Modal>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import PinFilled from 'carbon-icons-svelte/lib/PinFilled.svelte';\n  import PageNav from '$lib/components/PageNav/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import PageBody from '$lib/components/PageBody/index.svelte';\n  import { group } from '$lib/components/Course/store';\n  import { profile } from '$lib/utils/store/user';\n  import CourseContainer from '$lib/components/CourseContainer/index.svelte';\n  import RoleBasedSecurity from '$lib/components/RoleBasedSecurity/index.svelte';\n  import { isNewFeedModal } from '$lib/components/Course/components/NewsFeed/store';\n  import NewsFeedCard from '$lib/components/Course/components/NewsFeed/NewsFeedCard.svelte';\n  import NewFeedModal from '$lib/components/Course/components/NewsFeed/NewFeedModal.svelte';\n  import {\n    createComment,\n    deleteNewsFeedComment,\n    deleteNewsFeed,\n    fetchNewsFeeds,\n    handleEditFeed,\n    toggleFeedIsPinned,\n    fetchNewsFeedReaction\n  } from '$lib/utils/services/newsfeed';\n  import { newsFeed } from '$lib/components/Course/components/NewsFeed/store';\n  import Box from '$lib/components/Box/index.svelte';\n  import { supabase } from '$lib/utils/functions/supabase';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import type { Feed } from '$lib/utils/types/feed';\n  import {\n    NOTIFICATION_NAME,\n    triggerSendEmail\n  } from '$lib/utils/services/notification/notification';\n  import NewsFeedLoader from '$lib/components/Course/components/NewsFeed/NewsFeedLoader.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import { currentOrg } from '$lib/utils/store/org';\n  import type { CurrentOrg } from '$lib/utils/types/org';\n  import { goto } from '$app/navigation';\n\n  export let data;\n\n  let createdComment;\n  let edit = false;\n  let isLoading = false;\n  let editFeed: Feed;\n  let author = {\n    id: '',\n    username: '',\n    fullname: '',\n    avatar_url: ''\n  };\n\n  let query = new URLSearchParams($page.url.search);\n  let feedId = query.get('feedId') || '';\n\n  const onEdit = (id: string, content: string) => {\n    handleEditFeed(id, content);\n\n    $newsFeed = $newsFeed.map((feed) => {\n      if (feed.id === id) {\n        return { ...feed, content: content };\n      }\n\n      return feed;\n    });\n  };\n\n  const deleteComment = (id: string) => {\n    deleteNewsFeedComment(id);\n    $newsFeed = $newsFeed.flatMap((feed) => ({\n      ...feed,\n      comment: feed.comment.filter((comment) => comment.id !== id)\n    }));\n\n    return snackbar.success('snackbar.course.success.comment_deleted');\n  };\n\n  const addNewReaction = async (reactionType: string, feedId: string, authorId: string) => {\n    const { data } = await fetchNewsFeedReaction(feedId);\n\n    if (!data) return;\n\n    const reactedFeed = data || $newsFeed.find((feed) => feed.id === feedId);\n\n    let reactedAuthorIds: string[] = reactedFeed.reaction[reactionType];\n\n    if (reactedAuthorIds.includes(authorId)) {\n      reactedAuthorIds = reactedAuthorIds.filter(\n        (reactionAuthorId) => reactionAuthorId !== authorId\n      );\n    } else {\n      reactedAuthorIds = [...reactedAuthorIds, authorId];\n    }\n\n    reactedFeed.reaction = {\n      ...reactedFeed.reaction,\n      [reactionType]: reactedAuthorIds\n    };\n\n    const response = await supabase\n      .from('course_newsfeed')\n      .update({\n        reaction: reactedFeed.reaction\n      })\n      .eq('id', feedId);\n\n    if (response.error) {\n      return snackbar.error('snackbar.course.error.reaction_error');\n    }\n\n    $newsFeed = $newsFeed.map((feed) => {\n      if (feed.id === feedId) {\n        feed.reaction = reactedFeed.reaction;\n      }\n\n      return feed;\n    });\n  };\n\n  const addNewComment = async (comment: string, feedId: string, authorId: string) => {\n    const { response } = await createComment({\n      content: comment,\n      author_id: authorId,\n      course_newsfeed_id: feedId\n    });\n\n    if (response.error) {\n      return snackbar.error('snackbar.course.error.commenting_error');\n    }\n\n    if (!response.data) return;\n\n    createdComment = response?.data[0];\n\n    // triggerSendEmail(NOTIFICATION_NAME.NEWSFEED, {\n    //   authorId: author.id,\n    //   feedId: feedId,\n    //   comment\n    // });\n\n    $newsFeed = $newsFeed.map((feed) => {\n      if (feed.id === feedId) {\n        const newComment = {\n          id: createdComment.id,\n          author: {\n            profile: { ...author }\n          },\n          created_at: createdComment.created_at,\n          content: comment\n        };\n\n        snackbar.success('snackbar.course.success.comment_added');\n\n        return {\n          ...feed,\n          comment: [...feed.comment, { ...newComment }]\n        };\n      }\n\n      return feed;\n    });\n  };\n\n  const onPin = async (feedId, isPinned) => {\n    const newIsPinned = !isPinned;\n    const { response } = await toggleFeedIsPinned(feedId, newIsPinned);\n\n    if (response.error) {\n      return snackbar.error('snackbar.course.error.toggle_error');\n    }\n\n    $newsFeed = $newsFeed.map((feed) => {\n      if (feed.id === feedId) {\n        snackbar.success(\n          `${\n            newIsPinned ? 'snackbar.course.success.pinned' : 'snackbar.course.success.unpinned'\n          } snackbar.course.success.successfully`\n        );\n\n        feed.isPinned = newIsPinned;\n        return feed;\n      }\n\n      return feed;\n    });\n  };\n\n  const deleteFeed = (id: string) => {\n    deleteNewsFeed(id);\n\n    const deletedFeed = $newsFeed.filter((feed) => feed.id !== id);\n    snackbar.success('snackbar.course.success.feed_delete_success');\n\n    $newsFeed = deletedFeed;\n  };\n\n  const initNewsFeed = async (courseId: string) => {\n    if (!courseId) return;\n    try {\n      isLoading = true;\n      const { data, error } = await fetchNewsFeeds(courseId);\n      if (error) {\n        snackbar.error('snackbar.course.error.news_feed_fail');\n      }\n      if (data) {\n        $newsFeed = data.map((feedItem) => ({\n          ...feedItem,\n          isPinned: feedItem.is_pinned\n        }));\n      }\n    } catch (error) {\n      snackbar.error('snackbar.course.error.feed_fetch_error');\n    } finally {\n      isLoading = false;\n    }\n  };\n\n  function setAuthor(groups, profileId) {\n    const currentGroupMember = groups.people.find((person) => person.profile_id === profileId);\n\n    author = {\n      id: currentGroupMember?.id || '',\n      username: $profile.username || '',\n      fullname: $profile.fullname || '',\n      avatar_url: $profile.avatar_url || ''\n    };\n  }\n\n  function getPageRoles(org: CurrentOrg) {\n    const roles: number[] = [1, 2];\n\n    if (org.customization.course.newsfeed) {\n      roles.push(3);\n    }\n\n    return roles;\n  }\n\n  $: initNewsFeed(data.courseId);\n\n  $: setAuthor($group, $profile.id);\n  $: $newsFeed = $newsFeed.sort((a, b) => Number(b.isPinned) - Number(a.isPinned));\n</script>\n\n<CourseContainer bind:courseId={data.courseId}>\n  <RoleBasedSecurity\n    allowedRoles={getPageRoles($currentOrg)}\n    onDenied={() => {\n      goto(`/courses/${data.courseId}/lessons?next=true`);\n    }}\n  >\n    <PageNav title={$t('course.navItem.news_feed.heading')} disableSticky={true}>\n      <slot:fragment slot=\"widget\">\n        <RoleBasedSecurity allowedRoles={[1, 2]}>\n          <PrimaryButton\n            className=\"mr-2\"\n            label={$t('course.navItem.news_feed.heading_button.title')}\n            onClick={() => ($isNewFeedModal.open = true)}\n          />\n        </RoleBasedSecurity>\n      </slot:fragment>\n    </PageNav>\n\n    <PageBody width=\"max-w-4xl px-3\">\n      <RoleBasedSecurity allowedRoles={[1, 2]}>\n        <NewFeedModal\n          courseId={data.courseId}\n          {author}\n          bind:edit\n          bind:editFeed\n          onSave={(newFeed) => {\n            $newsFeed = [newFeed, ...$newsFeed];\n          }}\n          {onEdit}\n        />\n      </RoleBasedSecurity>\n      {#if isLoading}\n        <div>\n          <NewsFeedLoader />\n          <NewsFeedLoader />\n          <NewsFeedLoader />\n        </div>\n      {:else if !$newsFeed.length}\n        <Box>\n          <div class=\"flex justify-between flex-col items-center w-[90%] md:w-96\">\n            <img src=\"/images/empty-lesson-icon.svg\" alt=\"Lesson\" class=\"my-2.5 mx-auto\" />\n            <h2 class=\"text-xl my-1.5 font-normal\">{$t('course.navItem.news_feed.body_header')}</h2>\n            <p class=\"text-sm text-center text-slate-500\">\n              {$t('course.navItem.news_feed.body_content')}\n            </p>\n          </div>\n        </Box>\n      {:else}\n        {#each $newsFeed as feed}\n          {#if feed.isPinned}\n            <div class=\"flex items-center gap-2 mb-3\">\n              <PinFilled size={16} />\n\n              <p class=\"text-sm\">{$t('course.navItem.news_feed.pinned')}</p>\n            </div>\n          {/if}\n          <NewsFeedCard\n            {feed}\n            {deleteFeed}\n            {addNewComment}\n            {deleteComment}\n            {addNewReaction}\n            {onPin}\n            {author}\n            bind:edit\n            bind:editFeed\n            isActive={feedId === feed.id}\n          />\n        {/each}\n      {/if}\n    </PageBody>\n  </RoleBasedSecurity>\n</CourseContainer>\n"],"names":["size","$$props","title","$$invalidate","attributes","labelled","load","params","isNewFeedModal","writable","newsFeed","VARIANTS","deleteFeed","handleDelete","func","openDeleteModal","func_1","ctx","dirty","overflowmenuitem0_changes","raw_value","html_tag","t0_value","if_block","create_if_block_5","current","set_data","t0","chip_changes","create_if_block_4","t1_value","_b","_a","t5_value","src_url_equal","img","img_src_value","attr","_d","_c","t1","t5","create_if_block_1$1","t_value","each_value_1","ensure_array_like","if_block1","create_if_block_3","each_value","if_block2","create_if_block$2","img0","img0_src_value","img1","img1_src_value","div9","div9_id_value","div9_class_value","_e","feed","editFeed","author","addNewComment","arg1","arg2","arg3","addNewReaction","onPin","feedId","isPinned","errors","reactions","openEditFeed","set_store_value","$isNewFeedModal","expandComment","reactionType","addNewsfeedCommentValidation","comment","handleDeleteFeed","deleteComment","id","onMount","isActive","click_handler","click_handler_1","isDeleteFeedModal","click_handler_2","handleAddNewReaction","fetchNewsFeedReaction","supabase","fetchNewsFeeds","courseId","response","data","error","createNewFeed","post","handleEditFeed","content","createComment","toggleFeedIsPinned","deleteNewsFeedComment","commentId","deleteNewsFeed","t_1_value","t_1","create_if_block$1","texteditor_changes","primarybutton0_changes","primarybutton1_changes","modal_props","modal_changes","onEdit","createdFeed","onPost","edit","snackbar","onSave","resetEditor","newPost","text","$$self","value","primarybutton_changes","newfeedmodal_changes","create_if_block_2","t3_value","t3","pagenav_changes","getPageRoles","rolebasedsecurity_changes","coursecontainer_props","coursecontainer_changes","roles","org","createdComment","$newsFeed","feedId2","authorId","reactedFeed","data2","reactedAuthorIds","newComment","newIsPinned","deletedFeed","feedItem","setAuthor","groups","profileId","currentGroupMember","person","$profile"],"mappings":"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","x_google_ignoreList":[0,1,2]}