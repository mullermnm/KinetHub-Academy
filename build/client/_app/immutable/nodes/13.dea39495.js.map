{"version":3,"file":"13.dea39495.js","sources":["../../../../../../src/routes/courses/[id]/landingpage/+page.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/_baseSet.js","../../../../../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/set.js","../../../../../../src/lib/components/CourseLandingPage/components/Editor/HeaderForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/RequirementForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/DescriptionForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/PricingForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/GoalsForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/ReviewFormEditor.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/ReviewsForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/CertificateForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/InstructorForm.svelte","../../../../../../src/lib/components/CourseLandingPage/components/Editor/index.svelte","../../../../../../src/routes/courses/[id]/landingpage/+page.svelte"],"sourcesContent":["export const load = ({ params = { id: '' } }) => {\n  return {\n    courseId: params.id\n  };\n};\n","var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n","var baseSet = require('./_baseSet');\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nmodule.exports = set;\n","<script lang=\"ts\">\n  import TextArea from '$lib/components/Form/TextArea.svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { handleOpenWidget } from '../../store';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let course = {};\n\n  function widgetControl() {\n    $handleOpenWidget.open = !$handleOpenWidget.open;\n  }\n</script>\n\n<TextField\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n  label={$t('course.navItem.landing_page.editor.header_form.title')}\n  bind:value={course.title}\n/>\n\n<TextArea\n  label={$t('course.navItem.landing_page.editor.header_form.description')}\n  bind:value={course.description}\n  rows=\"6\"\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n/>\n\n<TextField\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n  label={$t('course.navItem.landing_page.editor.header_form.short_video')}\n  placeholder=\"www.youtube.com/watch?v=uYRq60G5XTk\"\n  helperMessage={$t('course.navItem.landing_page.editor.header_form.helper')}\n  type=\"text\"\n  bind:value={course.metadata.videoUrl}\n/>\n<div class=\"mt-7\">\n  <p class=\"font-bold mb-3\">{$t('course.navItem.landing_page.editor.header_form.replace_cover')}</p>\n  <PrimaryButton\n    label={$t('course.navItem.landing_page.editor.header_form.replace')}\n    variant={VARIANTS.OUTLINED}\n    onClick={widgetControl}\n  />\n</div>\n","<script lang=\"ts\">\n  import TextEditor from '$lib/components/TextEditor/index.svelte';\n  import cloneDeep from 'lodash/cloneDeep';\n  import set from 'lodash/set';\n  import get from 'lodash/get';\n  import isEmpty from 'lodash/isEmpty';\n  import { Toggle } from 'carbon-components-svelte';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n  import { NAV_ITEM_KEY } from '../../constants';\n\n  export let course: Course;\n\n  let show: boolean;\n  let hasBeenSet = false;\n\n  function setter(value: any, setterKey: string) {\n    if (typeof value === 'undefined') return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n\n    course = _course;\n  }\n\n  function setDefaults(course: Course) {\n    if (isEmpty(course) || hasBeenSet) return;\n\n    hasBeenSet = true;\n\n    show = get(course, `metadata.sectionDisplay.${NAV_ITEM_KEY.REQUIREMENT}`) ?? true;\n  }\n\n  $: setter(show, `metadata.sectionDisplay.${NAV_ITEM_KEY.REQUIREMENT}`);\n  $: setDefaults(course);\n</script>\n\n<div>\n  <TextEditor bind:value={course.metadata.requirements} />\n</div>\n\n<div class=\"mt-5\">\n  <p class=\"font-bold\">\n    {$t('course.navItem.landing_page.editor.display_section')}\n  </p>\n\n  <Toggle bind:toggled={show} size=\"sm\">\n    <span slot=\"labelA\" style=\"color: gray\">{$t('settings.landing_page.hide_section')}</span>\n    <span slot=\"labelB\" style=\"color: gray\">{$t('settings.landing_page.show_section')}</span>\n  </Toggle>\n</div>\n","<script lang=\"ts\">\n  import TextEditor from '$lib/components/TextEditor/index.svelte';\n  import cloneDeep from 'lodash/cloneDeep';\n  import set from 'lodash/set';\n  import get from 'lodash/get';\n  import isEmpty from 'lodash/isEmpty';\n  import { Toggle } from 'carbon-components-svelte';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n  import { NAV_ITEM_KEY } from '../../constants';\n\n  export let course: Course;\n\n  let show: boolean;\n  let hasBeenSet = false;\n\n  function setter(value: any, setterKey: string) {\n    if (typeof value === 'undefined') return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n\n    course = _course;\n  }\n\n  function setDefaults(course: Course) {\n    if (isEmpty(course) || hasBeenSet) return;\n\n    hasBeenSet = true;\n\n    show = get(course, `metadata.sectionDisplay.${NAV_ITEM_KEY.DESCRIPTION}`) ?? true;\n  }\n\n  $: setter(show, `metadata.sectionDisplay.${NAV_ITEM_KEY.DESCRIPTION}`);\n  $: setDefaults(course);\n</script>\n\n<div>\n  <TextEditor bind:value={course.metadata.description} />\n</div>\n\n<div class=\"mt-5\">\n  <p class=\"font-bold\">\n    {$t('course.navItem.landing_page.editor.display_section')}\n  </p>\n\n  <Toggle bind:toggled={show} size=\"sm\">\n    <span slot=\"labelA\" style=\"color: gray\">{$t('settings.landing_page.hide_section')}</span>\n    <span slot=\"labelB\" style=\"color: gray\">{$t('settings.landing_page.show_section')}</span>\n  </Toggle>\n</div>\n","<script lang=\"ts\">\n  import cloneDeep from 'lodash/cloneDeep';\n  import set from 'lodash/set';\n  import get from 'lodash/get';\n  import isEmpty from 'lodash/isEmpty';\n  import { Toggle, Select, SelectItem } from 'carbon-components-svelte';\n\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import TextEditor from '$lib/components/TextEditor/index.svelte';\n  import { isCourseFree } from '$lib/utils/functions/course';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let course: Course;\n\n  let discount = 0;\n  let paymentLink = '';\n  let showDiscount: boolean | undefined = undefined;\n  let giftToggled: boolean | undefined = undefined;\n\n  let hasBeenSet = false;\n\n  function setDefaults(course: Course) {\n    console.log('\\n\\nsetDefaults course', course);\n    if (isEmpty(course) || hasBeenSet) return;\n    hasBeenSet = true;\n\n    paymentLink = get(course, 'metadata.paymentLink', '');\n    discount = get(course, 'metadata.discount', 0);\n    showDiscount = get(course, 'metadata.showDiscount', false);\n    giftToggled = get(course, 'metadata.reward.show', false);\n  }\n\n  function setter(value: string | number | boolean | undefined, setterKey: string) {\n    if (typeof value !== 'boolean' && !value) return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n    course = _course;\n  }\n\n  function handleChange(html: string) {\n    const _course = cloneDeep(course);\n    set(_course, 'metadata.reward.description', html);\n    course = _course;\n  }\n\n  $: setter(showDiscount, 'metadata.showDiscount');\n  $: setter(paymentLink, 'metadata.paymentLink');\n  $: setter(discount, 'metadata.discount');\n  $: setter(giftToggled, 'metadata.reward.show');\n\n  $: setDefaults(course);\n</script>\n\n{#if typeof course !== 'undefined'}\n  <Select\n    labelText={$t('course.navItem.landing_page.editor.pricing_form.currency')}\n    bind:selected={course.currency}\n  >\n    <SelectItem value=\"NGN\" />\n    <SelectItem value=\"USD\" />\n  </Select>\n\n  <TextField\n    className=\"mt-5\"\n    labelClassName=\"font-bold\"\n    label={$t('course.navItem.landing_page.editor.pricing_form.cost')}\n    type=\"number\"\n    bind:value={course.cost}\n  />\n\n  {#if !isCourseFree(course.cost || 0)}\n    <TextField\n      className=\"mt-5\"\n      labelClassName=\"font-bold\"\n      label={$t('course.navItem.landing_page.editor.pricing_form.payment')}\n      helperMessage=\"Stripe, Lemon Squeezy or any payment link\"\n      bind:value={paymentLink}\n    />\n  {/if}\n\n  <div class=\"mt-5\">\n    <!-- <label for=\"text-field\" class=\"m-0 font-bold mb-2\">Discount</label> -->\n    <Toggle\n      labelText={$t('course.navItem.landing_page.editor.pricing_form.discount')}\n      bind:toggled={showDiscount}\n    >\n      <span slot=\"labelA\">{$t('course.navItem.landing_page.editor.pricing_form.no')}</span>\n      <span slot=\"labelB\">{$t('course.navItem.landing_page.editor.pricing_form.yes')}</span>\n    </Toggle>\n  </div>\n\n  {#if showDiscount}\n    <TextField\n      className=\"mt-5\"\n      labelClassName=\"font-bold\"\n      label={$t('course.navItem.landing_page.editor.pricing_form.percent')}\n      type=\"number\"\n      bind:value={discount}\n      helperMessage=\"In Percentage %\"\n    />\n  {/if}\n\n  <div class=\"mt-5\">\n    <!-- <label for=\"text-field\" class=\"m-0 font-bold mb-2\">Discount</label> -->\n    <Toggle labelText=\"Gift on Completion\" bind:toggled={giftToggled}>\n      <span slot=\"labelA\">{$t('course.navItem.landing_page.editor.pricing_form.no')}</span>\n      <span slot=\"labelB\">{$t('course.navItem.landing_page.editor.pricing_form.yes')}</span>\n    </Toggle>\n  </div>\n\n  {#if giftToggled}\n    <p class=\"dark:text-white font-bold mt-5\">\n      {$t('course.navItem.landing_page.editor.pricing_form.gift')}\n    </p>\n\n    <div class=\"h-2/5\">\n      <TextEditor value={get(course, 'metadata.reward.description', '')} onChange={handleChange} />\n    </div>\n  {/if}\n{/if}\n","<script lang=\"ts\">\n  import cloneDeep from 'lodash/cloneDeep';\n  import TextEditor from '$lib/components/TextEditor/index.svelte';\n  import set from 'lodash/set';\n  import get from 'lodash/get';\n  import isEmpty from 'lodash/isEmpty';\n  import { Toggle } from 'carbon-components-svelte';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n  import { NAV_ITEM_KEY } from '../../constants';\n\n  export let course: Course;\n\n  let show: boolean;\n  let hasBeenSet = false;\n\n  function setter(value: any, setterKey: string) {\n    if (typeof value === 'undefined') return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n\n    course = _course;\n  }\n\n  function setDefaults(course: Course) {\n    if (isEmpty(course) || hasBeenSet) return;\n\n    hasBeenSet = true;\n\n    show = get(course, `metadata.sectionDisplay.${NAV_ITEM_KEY.GOALS}`) ?? true;\n  }\n\n  $: setter(show, `metadata.sectionDisplay.${NAV_ITEM_KEY.GOALS}`);\n  $: setDefaults(course);\n</script>\n\n<div class=\"\">\n  <TextEditor bind:value={course.metadata.goals} />\n</div>\n\n<div class=\"mt-5\">\n  <p class=\"font-bold\">\n    {$t('course.navItem.landing_page.editor.display_section')}\n  </p>\n\n  <Toggle bind:toggled={show} size=\"sm\">\n    <span slot=\"labelA\" style=\"color: gray\">{$t('settings.landing_page.hide_section')}</span>\n    <span slot=\"labelB\" style=\"color: gray\">{$t('settings.landing_page.show_section')}</span>\n  </Toggle>\n</div>\n","<script>\n  import SaveIcon from 'carbon-icons-svelte/lib/Save.svelte';\n  import TrashCanIcon from 'carbon-icons-svelte/lib/TrashCan.svelte';\n  import { Toggle } from 'carbon-components-svelte';\n  import IconButton from '$lib/components/IconButton/index.svelte';\n  import UploadImage from '$lib/components/UploadImage/index.svelte';\n  import TextArea from '$lib/components/Form/TextArea.svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import { uploadAvatar } from '$lib/utils/services/courses';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let courseId;\n  export let reviews = [];\n  export let review = {};\n  export let errors = {};\n  export let onExpand = () => {};\n\n  let avatar;\n\n  // function to delete review\n  function deleteReviewData() {\n    reviews = reviews.filter((r) => r.id !== review.id);\n  }\n\n  async function onAvatarChange(_avatar) {\n    if (!_avatar) return;\n\n    review.avatar_url = await uploadAvatar(courseId, _avatar);\n  }\n\n  $: onAvatarChange(avatar);\n  $: review.rating = parseInt(review.rating);\n</script>\n\n<div class=\"flex items-center flex-col w-full\">\n  <UploadImage\n    bind:avatar\n    src={review.avatar_url}\n    widthHeight=\"w-20 h-20\"\n    errorMessage={errors.avatar_url}\n  />\n\n  <TextField\n    className=\"mt-2 w-full\"\n    labelClassName=\"font-normal\"\n    label={$t('course.navItem.landing_page.editor.reviews_form.fullname')}\n    placeholder=\"\"\n    type=\"text\"\n    bind:value={review.name}\n    errorMessage={errors.name}\n  />\n\n  <!-- Description -->\n  <TextArea\n    label={$t('course.navItem.landing_page.editor.reviews_form.description')}\n    rows=\"4\"\n    className=\"mt-2 w-full\"\n    labelClassName=\"font-normal\"\n    placeholder=\"\"\n    bind:value={review.description}\n    errorMessage={errors.description}\n    isAIEnabled={true}\n    initAIPrompt=\"Generate a 20 word review from a student saying good things about me teaching\"\n    aiAlignPopover=\"top-right\"\n  />\n\n  <div class=\"flex justify-between w-full items-center mt-2\">\n    <!-- Rating -->\n    <TextField\n      className=\"mt-2 w-20\"\n      labelClassName=\"font-normal\"\n      label={$t('course.navItem.landing_page.editor.reviews_form.rating')}\n      type=\"number\"\n      min={1}\n      max={5}\n      bind:value={review.rating}\n      errorMessage={errors.rating}\n    />\n\n    <!-- Toggle -->\n    <div class=\"w-24\">\n      <Toggle\n        labelText={$t('course.navItem.landing_page.editor.reviews_form.hide')}\n        size=\"sm\"\n        bind:toggled={review.hide}\n      />\n    </div>\n  </div>\n\n  <div class=\"mt-8 flex justify-between items-center w-full\">\n    <IconButton contained={true} value=\"delete\" onClick={deleteReviewData} size=\"large\">\n      <TrashCanIcon size={24} class=\"carbon-icon dark:text-white\" />\n    </IconButton>\n    <IconButton contained={true} value=\"save\" onClick={() => onExpand(review.id)} size=\"large\">\n      <SaveIcon size={24} class=\"carbon-icon dark:text-white\" />\n    </IconButton>\n  </div>\n</div>\n","<script>\n  import cloneDeep from 'lodash/cloneDeep';\n  import get from 'lodash/get';\n  import set from 'lodash/set';\n  import z from 'zod';\n  import ChevronDownIcon from 'carbon-icons-svelte/lib/ChevronDown.svelte';\n  import IconButton from '$lib/components/IconButton/index.svelte';\n  import { isMobile } from '$lib/utils/store/useMobile';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import ReviewFormEditor from './ReviewFormEditor.svelte';\n  import Avatar from '$lib/components/Avatar/index.svelte';\n  import { processErrors } from '$lib/utils/functions/validator';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let course = {};\n\n  let reviews = get(course, 'metadata.reviews', []);\n  let reviewToExpand = null;\n  let errors = {};\n\n  function setter(value, setterKey) {\n    if (!value) return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n    course = _course;\n  }\n\n  function addReviewForm() {\n    const _review = {\n      id: new Date().getTime(),\n      hide: false,\n      name: '',\n      avatar_url: '',\n      rating: 1,\n      created_at: new Date().getTime(),\n      description: ''\n    };\n    reviews = [...reviews, _review];\n    reviewToExpand = _review.id;\n  }\n\n  function validateReviews(id) {\n    const review = reviews.find((r) => r.id === id);\n    const reviewSchema = z.object({\n      name: z.string().min(5, {\n        message: `${$t(\n          'course.navItem.landing_page.editor.reviews_form.validations.name.min_char'\n        )}`,\n        invalid_type_error: `${$t(\n          'course.navItem.landing_page.editor.reviews_form.validations.invalid_type_error'\n        )}`\n      }),\n      avatar_url: z.string().min(6, {\n        message: `${$t(\n          'course.navItem.landing_page.editor.reviews_form.validations.avatar_url.message'\n        )}`,\n        invalid_type_error: `${$t(\n          'course.navItem.landing_page.editor.reviews_form.validations.invalid_type_error'\n        )}`\n      }),\n      rating: z\n        .number()\n        .min(1, {\n          message: `${$t(\n            'course.navItem.landing_page.editor.reviews_form.validations.rating.message'\n          )}`,\n          invalid_type_error: `${$t(\n            'course.navItem.landing_page.editor.reviews_form.validations.invalid_type_error'\n          )}`\n        })\n        .max(5, {\n          message: `${$t(\n            'course.navItem.landing_page.editor.reviews_form.validations.rating.message'\n          )}`,\n          invalid_type_error: `${$t(\n            'course.navItem.landing_page.editor.reviews_form.validations.invalid_type_error'\n          )}`\n        }),\n      description: z.string().min(10, {\n        message: `${$t(\n          'course.navItem.landing_page.editor.reviews_form.validations.description.min_char'\n        )}`,\n        invalid_type_error: `${$t(\n          'course.navItem.landing_page.editor.reviews_form.validations.invalid_type_error'\n        )}`\n      })\n    });\n\n    const { error } = reviewSchema.safeParse(review);\n    return processErrors(error);\n  }\n\n  function onExpand(id) {\n    errors = {};\n\n    if (reviewToExpand) {\n      const validationRes = validateReviews(reviewToExpand);\n      if (Object.keys(validationRes).length) {\n        errors = Object.assign(errors, validationRes);\n        return;\n      }\n    }\n\n    if (id === reviewToExpand) {\n      reviewToExpand = null;\n      return;\n    }\n\n    reviewToExpand = id;\n  }\n\n  $: setter(reviews, 'metadata.reviews');\n</script>\n\n<!-- Sections - Reviews -->\n<section id=\"reviews\">\n  <div class=\"\">\n    {#each reviews || [] as review}\n      <div\n        id={review.id}\n        class=\"relative flex items-center flex-col border border-gray-300 rounded-lg p-2 my-2.5\"\n      >\n        {#if review.id !== reviewToExpand}\n          <!-- the headers -->\n          <div class=\"flex w-full justify-between items-center\">\n            <Avatar src={review.avatar_url} name={review.name} className=\"mt-1\" />\n            <p class=\"text-sm\">{review.name}</p>\n\n            <IconButton\n              value=\"expand\"\n              onClick={() => onExpand(review.id)}\n              size={$isMobile ? 'large' : 'small'}\n            >\n              <ChevronDownIcon size={16} class=\"carbon-icon dark:text-white\" />\n            </IconButton>\n          </div>\n        {/if}\n        <!-- the body -->\n        {#if review.id === reviewToExpand}\n          <ReviewFormEditor bind:reviews bind:review {errors} courseId={course.id} {onExpand} />\n        {/if}\n      </div>\n    {/each}\n\n    <!-- create reviews button -->\n    <PrimaryButton\n      label={$t('course.navItem.landing_page.editor.reviews_form.add_reviews')}\n      variant={VARIANTS.CONTAINED}\n      onClick={addReviewForm}\n      className=\"w-5 rounded-md mt-8\"\n    />\n  </div>\n</section>\n","<script lang=\"ts\">\n  import cloneDeep from 'lodash/cloneDeep';\n  import set from 'lodash/set';\n  import get from 'lodash/get';\n  import isEmpty from 'lodash/isEmpty';\n  import { Toggle } from 'carbon-components-svelte';\n  import UploadImage from '$lib/components/UploadImage/index.svelte';\n  import { uploadAvatar } from '$lib/utils/services/courses';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n  import { NAV_ITEM_KEY } from '../../constants';\n\n  export let course: Course;\n\n  let avatar: string | undefined;\n  let show: boolean;\n  let templateUrl: string | undefined;\n  let hasBeenSet = false;\n  let isUploading = false;\n\n  function setter(value: any, setterKey: string) {\n    if (typeof value === 'undefined') return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n\n    course = _course;\n  }\n\n  async function onTemplateChange(_avatar: string | undefined) {\n    if (!_avatar || !course.id) return;\n    isUploading = true;\n\n    const logo = await uploadAvatar(course.id, _avatar);\n\n    if (logo) {\n      templateUrl = logo;\n\n      setter(templateUrl, 'metadata.certificate.templateUrl');\n    }\n\n    isUploading = false;\n  }\n\n  function setDefaults(course: Course) {\n    if (isEmpty(course) || hasBeenSet) return;\n\n    hasBeenSet = true;\n\n    show = get(course, `metadata.sectionDisplay.${NAV_ITEM_KEY.CERTIFICATE}`) ?? true;\n    templateUrl = get(\n      course,\n      'metadata.certificate.templateUrl',\n      '/images/certificate-template.svg'\n    );\n  }\n\n  $: onTemplateChange(avatar);\n  $: setter(show, `metadata.sectionDisplay.${NAV_ITEM_KEY.CERTIFICATE}`);\n\n  $: setDefaults(course);\n</script>\n\n<div class=\"mt-5 border-bottom-c\">\n  <p class=\"font-bold\">\n    {$t('course.navItem.landing_page.editor.certificate_form.upload_template')}\n  </p>\n  <UploadImage bind:avatar src={templateUrl} shape=\"rounded-none\" bind:isUploading />\n</div>\n\n<div class=\"mt-5\">\n  <p class=\"font-bold\">\n    {$t('course.navItem.landing_page.editor.display_section')}\n  </p>\n\n  <Toggle bind:toggled={show} size=\"sm\">\n    <span slot=\"labelA\" style=\"color: gray\">{$t('settings.landing_page.hide_section')}</span>\n    <span slot=\"labelB\" style=\"color: gray\">{$t('settings.landing_page.show_section')}</span>\n  </Toggle>\n</div>\n","<script lang=\"ts\">\n  import cloneDeep from 'lodash/cloneDeep';\n  import set from 'lodash/set';\n  import get from 'lodash/get';\n  import isEmpty from 'lodash/isEmpty';\n  import TextArea from '$lib/components/Form/TextArea.svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import UploadImage from '$lib/components/UploadImage/index.svelte';\n  import { uploadAvatar } from '$lib/utils/services/courses';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let course: Course;\n\n  let name: string | undefined;\n  let role: string | undefined;\n  let imgUrl: string | undefined;\n  let description: string | undefined;\n  let courseNo: string | undefined;\n  let avatar: string | undefined;\n  let hasBeenSet = false;\n  let isUploading = false;\n\n  function setter(value: any, setterKey: string) {\n    if (!value) return;\n\n    const _course = cloneDeep(course);\n    set(_course, setterKey, value);\n\n    course = _course;\n  }\n\n  async function onAvatarChange(_avatar: string | undefined) {\n    if (!_avatar || !course.id) return;\n    isUploading = true;\n    const logo = await uploadAvatar(course.id, _avatar);\n\n    if (!logo) return;\n\n    imgUrl = logo;\n    isUploading = false;\n  }\n\n  function setDefaults(course: Course) {\n    if (isEmpty(course) || hasBeenSet) return;\n\n    hasBeenSet = true;\n    name = get(course, 'metadata.instructor.name');\n    role = get(course, 'metadata.instructor.role');\n    imgUrl = get(course, 'metadata.instructor.imgUrl');\n    description = get(course, 'metadata.instructor.description');\n    courseNo = get(course, 'metadata.instructor.courseNo');\n  }\n\n  $: setter(name, 'metadata.instructor.name');\n  $: setter(role, 'metadata.instructor.role');\n  $: setter(imgUrl, 'metadata.instructor.imgUrl');\n  $: setter(description, 'metadata.instructor.description');\n  $: setter(courseNo, 'metadata.instructor.courseNo');\n\n  $: onAvatarChange(avatar);\n\n  $: setDefaults(course);\n</script>\n\n<div class=\"mt-5 w-full\">\n  <label for=\"upload\" class=\"font-bold\">\n    {$t('course.navItem.landing_page.editor.instructor_form.upload')}\n  </label>\n  <div class=\"w-full flex justify-center\">\n    <UploadImage bind:avatar src={imgUrl} bind:isUploading />\n  </div>\n</div>\n\n<TextField\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n  label={$t('course.navItem.landing_page.editor.instructor_form.name')}\n  placeholder={$t('course.navItem.landing_page.editor.instructor_form.name_placeholder')}\n  bind:value={name}\n/>\n\n<TextField\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n  label={$t('course.navItem.landing_page.editor.instructor_form.role')}\n  placeholder=\"e.g Software developer\"\n  bind:value={role}\n/>\n\n<TextArea\n  label={$t('course.navItem.landing_page.editor.instructor_form.about')}\n  placeholder={$t('course.navItem.landing_page.editor.instructor_form.about_placeholder')}\n  rows={6}\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n  bind:value={description}\n/>\n\n<TextField\n  className=\"mt-5\"\n  labelClassName=\"font-bold\"\n  label={$t('course.navItem.landing_page.editor.instructor_form.total')}\n  type=\"number\"\n  bind:value={courseNo}\n/>\n","<script lang=\"ts\">\n  import { goto } from '$app/navigation';\n  import cloneDeep from 'lodash/cloneDeep';\n  import set from 'lodash/set';\n  import ChevronRightIcon from 'carbon-icons-svelte/lib/ChevronRight.svelte';\n  import ArrowLeftIcon from 'carbon-icons-svelte/lib/ArrowLeft.svelte';\n  import ArrowUpRightIcon from 'carbon-icons-svelte/lib/ArrowUpRight.svelte';\n  import ChevronLeftIcon from 'carbon-icons-svelte/lib/ChevronLeft.svelte';\n  import { currentOrgDomain } from '$lib/utils/store/org';\n\n  import IconButton from '$lib/components/IconButton/index.svelte';\n  import CloseButton from '$lib/components/Buttons/Close/index.svelte';\n  import HeaderForm from './HeaderForm.svelte';\n  import RequirementForm from './RequirementForm.svelte';\n  import DescriptionForm from './DescriptionForm.svelte';\n  import PricingForm from './PricingForm.svelte';\n  import GoalsForm from './GoalsForm.svelte';\n  import ReviewsForm from './ReviewsForm.svelte';\n  import CertificateForm from './CertificateForm.svelte';\n  import InstructorForm from './InstructorForm.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import { updateCourse } from '$lib/utils/services/courses';\n  import generateSlug from '$lib/utils/functions/generateSlug';\n\n  import { isMobile } from '$lib/utils/store/useMobile';\n  import CustomPromptBtn from '$lib/components/AI/AIButton/CustomPromptBtn.svelte';\n  import type { Course } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let course: Course;\n  export let courseId: string;\n  export let syncCourseStore: (course: Course) => void;\n\n  let borderBottomGrey = 'border-r-0 border-b border-l-0 border-gray-300';\n  let loading = false;\n  let show = false;\n\n  interface Section {\n    key: number;\n    path: string;\n    title: string;\n    enableAIWriter?: boolean;\n    initPrompt?: string;\n  }\n\n  const sections: Section[] = [\n    {\n      key: 1,\n      path: '',\n      title: $t('course.navItem.landing_page.editor.title.header')\n    },\n    {\n      key: 2,\n      path: 'metadata.requirements',\n      title: $t('course.navItem.landing_page.editor.title.requirement'),\n      enableAIWriter: true,\n      initPrompt: $t('course.navItem.landing_page.editor.title.requirement')\n    },\n    {\n      key: 3,\n      path: 'metadata.description',\n      title: $t('course.navItem.landing_page.editor.title.description'),\n      enableAIWriter: true,\n      initPrompt: 'Please write a detailed course description for this course:'\n    },\n    {\n      key: 4,\n      path: 'metadata.goals',\n      title: $t('course.navItem.landing_page.editor.title.goals'),\n      enableAIWriter: true,\n      initPrompt: 'What should a student expect to learn from this course:'\n    },\n    {\n      key: 5,\n      path: '',\n      title: $t('course.navItem.landing_page.editor.title.certificate')\n    },\n    {\n      key: 6,\n      path: '',\n      title: $t('course.navItem.landing_page.editor.title.reviews')\n    },\n    {\n      key: 7,\n      path: '',\n      title: $t('course.navItem.landing_page.editor.title.instructor')\n    },\n    {\n      key: 8,\n      path: '',\n      title: $t('course.navItem.landing_page.editor.title.pricing')\n    }\n  ];\n  let selectedSection: Section | null = null;\n\n  function handleClose() {\n    if (!selectedSection) {\n      goto(`/courses/${courseId}`);\n    }\n\n    selectedSection = null;\n  }\n\n  function handleSectionSelect(sectionKey: number) {\n    return () => {\n      selectedSection = sections.find((section) => section.key === sectionKey) || null;\n\n      if (selectedSection) {\n        const sectionId = selectedSection.title.toLowerCase();\n\n        const sectionEl = document.getElementById(sectionId);\n        if (sectionEl) {\n          sectionEl.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n          });\n        }\n      }\n    };\n  }\n\n  async function handleSave() {\n    loading = true;\n    course.slug = course.slug || generateSlug(course.title);\n\n    await updateCourse(courseId, undefined, {\n      ...course,\n      attendance: undefined,\n      group: undefined,\n      lessons: undefined,\n      lesson_section: undefined,\n      polls: undefined,\n      slug: course.slug\n    });\n\n    loading = false;\n    syncCourseStore(course);\n  }\n\n  async function handlePreview() {\n    const link = `${$currentOrgDomain}/course/${course.slug}`;\n    window.open(link, '_blank');\n  }\n</script>\n\n<aside\n  class={`${\n    show ? '-translate-x-[100%] fixed md:absolute z-[50]' : 'translate-x-0 fixed md:relative z-[50]'\n  }left-0 z-[50] transition w-[90vw] min-w-[300px] max-w-[350px] bg-gray-100 dark:bg-neutral-800 h-full border border-l-0 border-t-0 border-b-0 border-r-1`}\n>\n  <div class=\"toggler rounded-full shadow-lg absolute\">\n    <IconButton\n      value=\"toggle\"\n      onClick={() => (show = !show)}\n      size={$isMobile ? 'large' : 'small'}\n      color=\"text-black\"\n      toolTipProps={$isMobile\n        ? undefined\n        : {\n            title: 'Toggle editor',\n            direction: 'right',\n            hotkeys: []\n          }}\n    >\n      {#if show}\n        <ChevronRightIcon size={16} />\n      {:else}\n        <ChevronLeftIcon size={16} />\n      {/if}\n    </IconButton>\n  </div>\n  <div class=\"h-full flex flex-col\">\n    {#if !selectedSection}\n      <div class=\"flex justify-between items-center px-2 w-full\">\n        <CloseButton onClick={handleClose} />\n        <div class=\"flex items-center\">\n          <PrimaryButton\n            label={$t('course.navItem.landing_page.editor.save')}\n            type=\"button\"\n            className=\"mr-1\"\n            variant={VARIANTS.OUTLINED}\n            onClick={handleSave}\n            isLoading={loading}\n          />\n          <IconButton onClick={handlePreview} disabled={loading || !course.slug}>\n            <ArrowUpRightIcon size={24} class=\"carbon-icon dark:text-white\" title=\"Preview\" />\n          </IconButton>\n        </div>\n      </div>\n      <div class=\"flex justify-between items-center px-2 w-full mb-2\">\n        <h3 class=\"dark:text-white\">{$t('course.navItem.landing_page.editor.page_builder')}</h3>\n      </div>\n      {#each sections as section, index}\n        <button\n          class=\"w-full flex items-center justify-between px-2 py-3 border border-l-0 {index + 1 <\n            sections.length && 'border-b-0'} border-gray-300\"\n          on:click={handleSectionSelect(section.key)}\n        >\n          <p class=\"dark:text-white mr-2\">\n            {section.title}\n            {$t('course.navItem.landing_page.editor.section')}\n          </p>\n          <ChevronRightIcon size={24} class=\"carbon-class\" />\n        </button>\n      {/each}\n    {:else}\n      <!-- Title -->\n      <div class=\"flex items-center {borderBottomGrey} w-full\">\n        <IconButton onClick={handleClose}>\n          <ArrowLeftIcon size={24} class=\"carbon-icon dark:text-white\" title=\"Go back\" />\n        </IconButton>\n        <div class=\" flex items-center\">\n          <h3 class=\"dark:text-white\">\n            {selectedSection.title}\n          </h3>\n          {#if selectedSection.enableAIWriter}\n            <CustomPromptBtn\n              className=\"w-fit ml-2\"\n              alignPopover=\"bottom-left\"\n              defaultPrompt={`${selectedSection.initPrompt} ${course.title}. Please format in html`}\n              isHTML={true}\n              handleInsert={(v) => {\n                if (!selectedSection) return;\n                const _course = cloneDeep(course);\n                set(_course, selectedSection.path, v);\n                course = _course;\n              }}\n            />\n          {/if}\n        </div>\n      </div>\n\n      <div class=\"title-content p-2 overflow-y-auto\">\n        {#if selectedSection.key === 1}\n          <HeaderForm bind:course />\n        {:else if selectedSection.key === 2}\n          <RequirementForm bind:course />\n        {:else if selectedSection.key === 3}\n          <DescriptionForm bind:course />\n        {:else if selectedSection.key === 4}\n          <GoalsForm bind:course />\n        {:else if selectedSection.key === 5}\n          <CertificateForm bind:course />\n        {:else if selectedSection.key === 6}\n          <ReviewsForm bind:course />\n        {:else if selectedSection.key === 7}\n          <InstructorForm bind:course />\n        {:else if selectedSection.key === 8}\n          <PricingForm bind:course />\n        {/if}\n      </div>\n    {/if}\n  </div>\n</aside>\n\n<style>\n  .title-content {\n    height: 90%;\n  }\n  .toggler {\n    right: -15px;\n    z-index: 10;\n    border: 1px solid var(--border-color);\n    top: 50px;\n    height: fit-content;\n    background: var(--border-color);\n  }\n  @media screen and (max-width: 767px) {\n    .toggler {\n      right: -25px;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { dev } from '$app/environment';\n  import { fly } from 'svelte/transition';\n  import { course } from '$lib/components/Course/store';\n  import type { Course, Lesson, LessonSection } from '$lib/utils/types';\n  import { lessons, lessonSections } from '$lib/components/Course/components/Lesson/store/lessons';\n\n  import CourseLandingPage from '$lib/components/CourseLandingPage/index.svelte';\n  import Editor from '$lib/components/CourseLandingPage/components/Editor/index.svelte';\n\n  export let data;\n\n  const { courseId } = data;\n\n  let courseData: Course = $course;\n\n  function setCourseData(course: Course, lessons: Lesson[], lesson_section: LessonSection[]) {\n    courseData = { ...course, lessons, lesson_section };\n  }\n\n  function syncCourseStore(_courseData: Course) {\n    $course = _courseData;\n  }\n\n  $: setCourseData($course, $lessons, $lessonSections);\n  $: dev && console.log('courseData changed', courseData);\n</script>\n\n<div\n  class=\"absolute flex inset-0 z-50 bg-white\"\n  in:fly={{ y: 500, duration: 500 }}\n  out:fly={{ y: 500, duration: 500 }}\n>\n  <Editor {courseId} bind:course={courseData} {syncCourseStore} />\n  <div class=\"rightBar\">\n    <CourseLandingPage bind:courseData editMode={true} />\n  </div>\n</div>\n\n<style>\n  .rightBar {\n    flex-grow: 1;\n    width: 100%;\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n</style>\n"],"names":["load","params","assignValue","_assignValue","castPath","_castPath","isIndex","_isIndex","isObject","isObject_1","toKey","_toKey","baseSet$1","object","path","value","customizer","index","length","lastIndex","nested","key","newValue","objValue","_baseSet","baseSet","set","set_1","t3_value","ctx","textfield0_props","textarea_props","VARIANTS","dirty","textfield0_changes","textarea_changes","textfield1_changes","current","set_data","t3","primarybutton_changes","course","$$props","widgetControl","set_store_value","handleOpenWidget","$handleOpenWidget","$$self","t_1_value","t_1","t1_value","t1","show","setter","setterKey","_course","cloneDeep","isEmpty","course2","hasBeenSet","$$invalidate","get","NAV_ITEM_KEY","setDefaults","show_if","isCourseFree","select_props","textfield_props","select_changes","textfield_changes","toggle0_changes","t0_value","t0","texteditor_changes","if_block","create_if_block$2","textfield1_props","toggle_props","uploadimage_changes","toggle_changes","reviews","r","review","onAvatarChange","_avatar","uploadAvatar","courseId","avatar_changes","reviewformeditor_changes","attr","div","div_id_value","reviewToExpand","set$1","validateReviews","id","z","error","reviewSchema","processErrors","onExpand","validationRes","errors","avatar","templateUrl","logo","onTemplateChange","textfield2_changes","name","role","imgUrl","description","courseNo","if_block0","create_if_block_9","custompromptbtn_changes","t2_value","button","t2","syncCourseStore","sections","$t","handleClose","selectedSection","goto","section","sectionKey","sectionId","sectionEl","handleSave","generateSlug","updateCourse","handlePreview","func","v","div1_intro","create_in_transition","div1","fly","div1_outro","create_out_transition","data","setCourseData","lessons2","lesson_section","courseData"],"mappings":"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","x_google_ignoreList":[1,2]}