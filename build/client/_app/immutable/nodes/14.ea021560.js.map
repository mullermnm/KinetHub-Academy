{"version":3,"file":"14.ea021560.js","sources":["../../../../../../../../node_modules/.pnpm/carbon-icons-svelte@12.3.0/node_modules/carbon-icons-svelte/lib/ScreenMap.svelte","../../../../../../src/routes/courses/[id]/lessons/+page.js","../../../../../../src/lib/components/Course/components/Lesson/DeleteLessonConfirmation.svelte","../../../../../../src/lib/components/Course/components/Lesson/LessonList.svelte","../../../../../../src/lib/components/Course/components/Lesson/LessonSectionList.svelte","../../../../../../src/lib/components/Course/components/Lesson/NewLessonModal.svelte","../../../../../../src/lib/components/Course/components/Lesson/ActivateSectionsModal.svelte","../../../../../../src/routes/courses/[id]/lessons/+page.svelte"],"sourcesContent":["<script>\n  export let size = 16;\n\n  export let title = undefined;\n\n  $: labelled = $$props[\"aria-label\"] || $$props[\"aria-labelledby\"] || title;\n  $: attributes = {\n    \"aria-hidden\": labelled ? undefined : true,\n    role: labelled ? \"img\" : undefined,\n    focusable: Number($$props[\"tabindex\"]) === 0 ? true : undefined\n  };\n</script>\n\n<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 32 32\"\n  fill=\"currentColor\"\n  preserveAspectRatio=\"xMidYMid meet\"\n  width={size}\n  height={size}\n  {...attributes}\n  {...$$restProps}>\n  {#if title}<title>{title}</title>{/if}\n  <path d=\"M22 25H30V27H22zM22 21H30V23H22zM18.4141 11L23 11 23 9 15 9 15 17 17 17 17 12.4141 23.5859 19 25 17.5859 18.4141 11z\"></path><path d=\"M28,3H4c-1.1028,0-2,.8975-2,2V21c0,1.1025,.8972,2,2,2H12v4h-4v2h12v-8H4V5H28v14h2V5c0-1.1025-.8972-2-2-2Zm-10,24h-4v-4h4v4Z\"></path>\n</svg>","export const load = ({ params = { id: '' } }) => {\n  return {\n    courseId: params.id\n  };\n};\n","<script lang=\"ts\">\n  import Modal from '$lib/components/Modal/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import { t } from '$lib/utils/functions/translations';\n\n  export let openDeleteModal = false;\n  export let deleteLesson = () => {};\n\n  async function handleDelete() {\n    deleteLesson();\n    openDeleteModal = false;\n  }\n</script>\n\n<Modal\n  onClose={() => (openDeleteModal = false)}\n  bind:open={openDeleteModal}\n  width=\"w-96\"\n  containerClass=\"px-6 pt-2 pb-6\"\n  modalHeading={$t('delete_modal.label')}\n>\n  <div>\n    <h1 class=\"dark:text-white text-lg\">\n      {$t('delete_modal.content')}?\n    </h1>\n\n    <div class=\"mt-5 flex items-center justify-between\">\n      <PrimaryButton\n        className=\"px-6 py-3\"\n        variant={VARIANTS.OUTLINED}\n        label={$t('delete_modal.no')}\n        onClick={() => (openDeleteModal = false)}\n      />\n      <PrimaryButton\n        className=\"px-6 py-3\"\n        variant={VARIANTS.OUTLINED}\n        label={$t('delete_modal.yes')}\n        onClick={handleDelete}\n      />\n    </div>\n  </div>\n</Modal>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import { dndzone } from 'svelte-dnd-action';\n  import { OverflowMenu, OverflowMenuItem } from 'carbon-components-svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import TextChip from '$lib/components/Chip/Text.svelte';\n  import { course } from '$lib/components/Course/store';\n  import { globalStore } from '$lib/utils/store/app';\n  import ScreenMap from 'carbon-icons-svelte/lib/ScreenMap.svelte';\n  import RoleBasedSecurity from '$lib/components/RoleBasedSecurity/index.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import {\n    lessons,\n    handleSaveLesson\n  } from '$lib/components/Course/components/Lesson/store/lessons';\n  import { updateLesson } from '$lib/utils/services/courses';\n  import type { Course, Lesson } from '$lib/utils/types';\n  import Box from '$lib/components/Box/index.svelte';\n\n  const flipDurationMs = 300;\n\n  export let reorder = false;\n  export let lessonEditing: string | undefined;\n  export let lessonToDelete: Lesson | undefined;\n  export let openDeleteModal = false;\n\n  let errors: Record<string, string> = {};\n\n  async function saveLesson(lesson: Lesson, courseId: Course['id']) {\n    const validationRes = await handleSaveLesson(lesson, courseId);\n\n    if (validationRes && Object.keys(validationRes).length) {\n      // @ts-ignore\n      errors = validationRes;\n    } else {\n      errors = {};\n      lessonEditing = undefined;\n    }\n  }\n\n  function handleDndConsider(e: any) {\n    $lessons = e.detail.items;\n  }\n\n  function handleDndFinalize(e: any) {\n    const prevLessonsByOrder = $lessons.reduce((acc, l) => ({ ...acc, [l.id]: l.order }), {});\n    $lessons = e.detail.items;\n\n    // Only update the lesson order that changed\n    e.detail.items.forEach((item: { id: string }, index: number) => {\n      const order = index + 1;\n\n      if (order !== prevLessonsByOrder[item.id]) {\n        $lessons[index].order = order;\n        updateLesson({ order }, item.id).then((update) =>\n          console.log(`updated lesson order`, update)\n        );\n      }\n    });\n  }\n\n  function getLessonOrder(id: string) {\n    const index = $lessons.findIndex((lesson) => lesson.id === id);\n\n    if (index < 9) {\n      return '0' + (index + 1);\n    } else {\n      return index + 1;\n    }\n  }\n</script>\n\n<section\n  class=\"m-auto w-full p-3 lg:w-11/12 lg:px-4\"\n  use:dndzone={{\n    items: $lessons,\n    flipDurationMs,\n    dragDisabled: !reorder,\n    dropTargetStyle: {\n      border: '2px #1d4ed8 solid',\n      'border-style': 'dashed'\n    }\n  }}\n  on:consider={handleDndConsider}\n  on:finalize={handleDndFinalize}\n>\n  {#each $lessons as lesson (lesson.id)}\n    <div\n      class={`relative m-auto mb-4 flex max-w-xl items-center rounded-md border-2 border-gray-200 dark:border-neutral-600 p-5 dark:bg-neutral-800`}\n    >\n      <!-- Number Chip -->\n      <div class=\"mr-5\">\n        <TextChip\n          value={getLessonOrder(lesson.id)}\n          size=\"sm\"\n          shape=\"rounded-full\"\n          className=\"bg-primary-200 text-primary-600 text-xs\"\n        />\n      </div>\n\n      <!-- Lesson Content -->\n      <div class=\"w-4/5\">\n        <!-- Lesson Title -->\n        {#if lessonEditing === lesson.id}\n          <TextField\n            bind:value={lesson.title}\n            autoFocus={true}\n            className=\"max-w-lg\"\n            errorMessage={errors?.title}\n          />\n        {:else}\n          <h3 class=\"m-0 flex items-center text-lg dark:text-white\">\n            <a\n              href={$globalStore.isStudent && !lesson.is_unlocked\n                ? $page.url.pathname\n                : `/courses/${$course.id}/lessons/${lesson.id}`}\n              class=\"font-medium text-black no-underline hover:underline dark:text-white {$globalStore.isStudent &&\n              !lesson.is_unlocked\n                ? 'cursor-not-allowed'\n                : ''}\"\n            >\n              {lesson.title}\n            </a>\n          </h3>\n        {/if}\n\n        <div\n          class=\"mt-2 flex w-4/5 flex-col items-start justify-between lg:flex-row lg:items-center\"\n        >\n          <!-- Lesson Length -->\n          <div class=\"mb-3 flex items-center lg:mb-0\">\n            <ScreenMap size={20} class=\"carbon-icon dark:text-white\" />\n            <p class=\"ml-2 text-sm text-gray-500 dark:text-white\">\n              {lesson?.totalExercises ? lesson?.totalExercises?.map((c) => c.count) : 0}\n              {$t('exercises.heading')}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <!-- 3 dot edit -->\n      <div class=\"flex flex-row\">\n        <RoleBasedSecurity allowedRoles={[1, 2]}>\n          <OverflowMenu size=\"xl\">\n            <OverflowMenuItem\n              text={lesson.is_unlocked\n                ? $t('course.navItem.lessons.add_lesson.lock')\n                : $t('course.navItem.lessons.add_lesson.unlock')}\n              on:click={() => {\n                lesson.is_unlocked = !lesson.is_unlocked;\n                handleSaveLesson(lesson, $course.id);\n              }}\n            />\n            <OverflowMenuItem\n              text={lessonEditing === lesson.id\n                ? $t('course.navItem.lessons.add_lesson.save')\n                : $t('course.navItem.lessons.add_lesson.edit')}\n              on:click={() => {\n                if (lessonEditing === lesson.id) {\n                  saveLesson(lesson, $course.id);\n                } else {\n                  lessonEditing = lesson.id;\n                }\n              }}\n            />\n            <OverflowMenuItem\n              danger\n              text={$t('course.navItem.lessons.add_lesson.delete')}\n              on:click={() => {\n                lessonToDelete = lesson;\n                openDeleteModal = true;\n              }}\n            />\n          </OverflowMenu>\n        </RoleBasedSecurity>\n      </div>\n    </div>\n  {:else}\n    <Box>\n      <div class=\"flex justify-between flex-col items-center w-[90%] md:w-96\">\n        <img src=\"/images/empty-lesson-icon.svg\" alt=\"Lesson\" class=\"my-2.5 mx-auto\" />\n        <h2 class=\"text-xl my-1.5 font-normal\">{$t('course.navItem.lessons.body_header')}</h2>\n        <p class=\"text-sm text-center text-slate-500\">\n          {$t('course.navItem.lessons.body_content')}\n        </p>\n      </div>\n    </Box>\n  {/each}\n</section>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import { flip } from 'svelte/animate';\n  import { dndzone } from 'svelte-dnd-action';\n  import { Add, ScreenMap } from 'carbon-icons-svelte';\n  import { OverflowMenu, OverflowMenuItem } from 'carbon-components-svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import TextChip from '$lib/components/Chip/Text.svelte';\n  import IconButton from '$lib/components/IconButton/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import { t } from '$lib/utils/functions/translations';\n  import { globalStore } from '$lib/utils/store/app';\n  import { course } from '$lib/components/Course/store';\n  import { handleAddLessonWidget } from '$lib/components/Course/components/Lesson/store';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import {\n    lessonSections,\n    handleDelete,\n    handleSaveLesson,\n    handleSaveLessonSection,\n    handleDeleteSection\n  } from '$lib/components/Course/components/Lesson/store/lessons';\n  import { updateLesson, updateLessonSection } from '$lib/utils/services/courses';\n  import type { Lesson } from '$lib/utils/types';\n  import DeleteLessonConfirmation from '$lib/components/Course/components/Lesson/DeleteLessonConfirmation.svelte';\n  import RoleBasedSecurity from '$lib/components/RoleBasedSecurity/index.svelte';\n\n  type CrudParam = {\n    sectionId?: string;\n    lessonId?: string;\n    sectionTitle?: string;\n    lessonTitle?: string;\n  };\n\n  export let reorder = false;\n  export let lessonEditing: string | undefined;\n\n  let prevTitle: string | undefined;\n  let errors: Record<string, string>;\n  let openDeleteModal = false;\n  let deletingData = {\n    id: '',\n    isSection: false\n  };\n\n  function onEdit(params: CrudParam) {\n    lessonEditing = params.sectionId || params.lessonId;\n    prevTitle = params.sectionTitle || params.lessonTitle;\n  }\n\n  async function onSave(params: CrudParam, lesson?: Lesson) {\n    if (params.sectionId) {\n      const section = $lessonSections.find((s) => s.id === params.sectionId);\n      if (!section) return;\n\n      const validationRes = await handleSaveLessonSection(section, section.course_id);\n\n      if (validationRes && Object.keys(validationRes).length) {\n        errors = {\n          // @ts-ignore\n          title: validationRes?.title\n        };\n      }\n    } else if (lesson) {\n      const validationRes = await handleSaveLesson(lesson, lesson.course_id);\n\n      if (validationRes && Object.keys(validationRes).length) {\n        errors = {\n          // @ts-ignore\n          title: validationRes?.title\n        };\n      }\n    }\n\n    if (!errors?.title) {\n      resetEdit();\n\n      snackbar.success('snackbar.success_update');\n    }\n  }\n\n  function onDelete(params: CrudParam) {\n    deletingData.id = params.sectionId || params.lessonId || '';\n    deletingData.isSection = params.sectionId ? true : false;\n    openDeleteModal = true;\n  }\n\n  function deleteLesson() {\n    if (deletingData.isSection) {\n      handleDeleteSection(deletingData.id);\n    } else {\n      handleDelete(deletingData.id);\n    }\n  }\n\n  function resetEdit() {\n    lessonEditing = undefined;\n    prevTitle = undefined;\n    errors = {};\n  }\n\n  function handleAddLesson(id) {\n    handleAddLessonWidget.update(() => ({\n      open: true,\n      isSection: false,\n      id\n    }));\n  }\n\n  /**\n   * Drag functionality\n   */\n  const flipDurationMs = 200;\n\n  function handleDndConsiderColumns(e) {\n    $lessonSections = e.detail.items;\n  }\n  function handleDndFinalizeColumns(e) {\n    const prevSectionsOrder = $lessonSections.reduce((acc, l) => ({ ...acc, [l.id]: l.order }), {});\n\n    $lessonSections = e.detail.items;\n\n    e.detail.items.forEach((section, index) => {\n      const order = index + 1;\n\n      if (order !== prevSectionsOrder[section.id]) {\n        $lessonSections[index].order = order;\n        updateLessonSection({ order }, section.id).then((update) =>\n          console.log(`updated section order`, update)\n        );\n      }\n    });\n  }\n  function handleDndConsiderCards(cid, e) {\n    const colIdx = $lessonSections.findIndex((c) => c.id === cid);\n    $lessonSections[colIdx].lessons = e.detail.items;\n    $lessonSections = [...$lessonSections];\n  }\n  function handleDndFinalizeCards(cid, e) {\n    const colIdx = $lessonSections.findIndex((c) => c.id === cid);\n\n    const section = $lessonSections[colIdx];\n    const prevLessonOrder = section.lessons.reduce((acc, l) => ({ ...acc, [l.id]: l.order }), {});\n\n    $lessonSections[colIdx].lessons = e.detail.items;\n    $lessonSections = [...$lessonSections];\n\n    e.detail.items.forEach((lesson: Lesson, index: number) => {\n      const order = index + 1;\n\n      if (order !== prevLessonOrder[lesson.id] || lesson.section_id !== section.id) {\n        section.lessons[index].order = order;\n\n        const lessonUpdate = {\n          order,\n          section_id: $lessonSections[colIdx].id\n        };\n        updateLesson(lessonUpdate, lesson.id).then((update) =>\n          console.log(`updated lesson order`, update)\n        );\n      }\n    });\n  }\n\n  function getLessonOrder(lessons, id) {\n    const index = lessons.findIndex((lesson) => lesson.id === id);\n\n    if (index < 9) {\n      return '0' + (index + 1);\n    } else {\n      return index + 1;\n    }\n  }\n</script>\n\n<DeleteLessonConfirmation bind:openDeleteModal {deleteLesson} />\n\n<section\n  class=\"m-auto w-full p-3 lg:w-11/12 lg:px-4\"\n  use:dndzone={{\n    items: $lessonSections,\n    flipDurationMs,\n    type: 'rows',\n    dropTargetStyle: {\n      border: '2px #1d4ed8 solid',\n      'border-style': 'dashed'\n    },\n    dragDisabled: !reorder\n  }}\n  on:consider={handleDndConsiderColumns}\n  on:finalize={handleDndFinalizeColumns}\n>\n  {#each $lessonSections as section (section.id)}\n    <div\n      class=\"mb-3 m-auto max-w-xl border-2 border-gray-200 dark:border-neutral-600 dark:bg-neutral-800 rounded-md\"\n    >\n      <div\n        class=\"mb-2 px-3 py-1 min-h-[50px] border-b bg-gray-50 dark:bg-neutral-700 rounded-tl-md rounded-tr-md flex justify-between items-center\"\n      >\n        {#if lessonEditing === section.id}\n          <TextField className=\"w-4/6\" bind:value={section.title} errorMessage={errors?.title} />\n        {:else}\n          <p class=\"w-4/6 font-semibold\">{section.title}</p>\n        {/if}\n\n        <RoleBasedSecurity allowedRoles={[1, 2]}>\n          <div class=\"flex items-center\">\n            {#if lessonEditing === section.id}\n              <PrimaryButton\n                label={$t('course.navItem.lessons.add_lesson.cancel')}\n                variant={VARIANTS.OUTLINED}\n                onClick={() => {\n                  section.title = prevTitle ?? section.title;\n                  resetEdit();\n                }}\n              />\n              <PrimaryButton\n                label={$t('course.navItem.lessons.add_lesson.save')}\n                onClick={() => onSave({ sectionId: section.id })}\n              />\n            {:else}\n              <IconButton\n                contained\n                size=\"small\"\n                onClick={() => handleAddLesson(section.id)}\n                disabled={!!lessonEditing}\n              >\n                <Add size={20} />\n              </IconButton>\n              <OverflowMenu size=\"xl\" flipped>\n                <OverflowMenuItem\n                  text={$t('course.navItem.lessons.add_lesson.edit')}\n                  disabled={!!lessonEditing}\n                  on:click={() => onEdit({ sectionId: section.id, sectionTitle: section.title })}\n                />\n                <OverflowMenuItem\n                  danger\n                  text={$t('course.navItem.lessons.add_lesson.delete')}\n                  on:click={() => onDelete({ sectionId: section.id })}\n                />\n              </OverflowMenu>\n            {/if}\n          </div>\n        </RoleBasedSecurity>\n      </div>\n\n      <div\n        class=\"mx-3 py-1\"\n        use:dndzone={{\n          items: section.lessons,\n          flipDurationMs,\n          dropTargetStyle: {\n            border: '2px #1d4ed8 solid',\n            'border-style': 'dashed'\n          },\n          dragDisabled: !reorder\n        }}\n        on:consider={(e) => handleDndConsiderCards(section.id, e)}\n        on:finalize={(e) => handleDndFinalizeCards(section.id, e)}\n      >\n        {#each section.lessons as lesson (lesson.id)}\n          <div\n            class=\"border max-w-xl border-gray-200 px-3 py-1 min-h-[50px] rounded-md mb-2 flex items-center justify-between\"\n            animate:flip={{ duration: flipDurationMs }}\n          >\n            {#if lessonEditing === lesson.id}\n              <TextField className=\"w-4/6\" bind:value={lesson.title} errorMessage={errors?.title} />\n            {:else}\n              <div class=\"w-4/5 flex items-center gap-2\">\n                <TextChip\n                  value={getLessonOrder(section.lessons, lesson.id)}\n                  size=\"sm\"\n                  shape=\"rounded-full\"\n                  className=\"bg-primary-200 text-primary-600 text-xs\"\n                />\n                <div>\n                  <a\n                    href={$globalStore.isStudent && !lesson.is_unlocked\n                      ? $page.url.pathname\n                      : `/courses/${$course.id}/lessons/${lesson.id}`}\n                    class=\" text-black dark:text-white {$globalStore.isStudent &&\n                    !lesson.is_unlocked\n                      ? 'cursor-not-allowed'\n                      : ''}\"\n                    data-sveltekit-preload-data=\"off\"\n                  >\n                    {lesson.title}\n                  </a>\n\n                  <div class=\"mt-1 mb-3 flex items-center lg:mb-0\">\n                    <ScreenMap size={16} class=\"carbon-icon dark:text-white\" />\n                    <p class=\"ml-2 text-xs text-gray-500 dark:text-white\">\n                      {lesson?.totalExercises ? lesson?.totalExercises?.map((c) => c.count) : 0}\n                      {$t('exercises.heading')}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            {/if}\n\n            <RoleBasedSecurity allowedRoles={[1, 2]}>\n              <div class=\"flex items-center gap-1\">\n                <!-- IS EDITING -->\n                {#if lessonEditing === lesson.id}\n                  <PrimaryButton\n                    label={$t('course.navItem.lessons.add_lesson.cancel')}\n                    variant={VARIANTS.OUTLINED}\n                    onClick={() => {\n                      lesson.title = prevTitle ?? lesson.title;\n                      resetEdit();\n                    }}\n                  />\n                  <PrimaryButton\n                    label={$t('course.navItem.lessons.add_lesson.save')}\n                    onClick={() => onSave({ lessonId: lesson.id }, lesson)}\n                  />\n                {:else}\n                  <OverflowMenu size=\"sm\" flipped>\n                    <OverflowMenuItem\n                      text={lesson.is_unlocked\n                        ? $t('course.navItem.lessons.add_lesson.lock')\n                        : $t('course.navItem.lessons.add_lesson.unlock')}\n                      on:click={() => {\n                        lesson.is_unlocked = !lesson.is_unlocked;\n                        handleSaveLesson(lesson, $course.id);\n                      }}\n                    />\n                    <OverflowMenuItem\n                      text={$t('course.navItem.lessons.add_lesson.edit')}\n                      on:click={() => onEdit({ lessonId: lesson.id, lessonTitle: lesson.title })}\n                    />\n                    <OverflowMenuItem\n                      danger\n                      text={$t('course.navItem.lessons.add_lesson.delete')}\n                      on:click={() => onDelete({ lessonId: lesson.id })}\n                    />\n                  </OverflowMenu>\n                {/if}\n              </div>\n            </RoleBasedSecurity>\n          </div>\n        {:else}\n          {$t('course.navItem.lessons.no_lesson')}\n        {/each}\n      </div>\n    </div>\n  {/each}\n</section>\n","<script lang=\"ts\">\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  // import Select from '$lib/components/Form/Select.svelte';\n  import {\n    lessons,\n    lessonSections,\n    handleSaveLesson,\n    handleSaveLessonSection\n  } from '$lib/components/Course/components/Lesson/store/lessons';\n  import { course } from '$lib/components/Course/store';\n  import Modal from '$lib/components/Modal/index.svelte';\n  import { goto } from '$app/navigation';\n  import { handleAddLessonWidget } from './store';\n  import { t } from '$lib/utils/functions/translations';\n  import { COURSE_TYPE } from '$lib/utils/types';\n  import type { Lesson } from '$lib/utils/types';\n\n  let errors = {\n    title: ''\n  };\n  let lesson: Lesson = {\n    id: '',\n    course_id: $course.id || '',\n    title: '',\n    profile: undefined,\n    call_url: undefined,\n    lesson_at: new Date().toDateString(),\n    is_unlocked: true,\n    lesson_completion: [],\n    created_at: ''\n  };\n\n  const handleSave = async () => {\n    if (!lesson.title.trim()) {\n      errors.title = 'title cannot be empty';\n      return;\n    }\n\n    if ($handleAddLessonWidget.isSection) {\n      const savedSection = await handleSaveLessonSection(\n        {\n          title: lesson.title,\n          order: $lessonSections.length\n        },\n        $course.id\n      );\n\n      if (Array.isArray(savedSection) && savedSection[0]) {\n        const newLessonSection = savedSection[0];\n\n        lessonSections.update((sections) => {\n          return [\n            ...sections,\n            {\n              id: newLessonSection.id,\n              title: lesson.title,\n              order: newLessonSection.order,\n              course_id: newLessonSection.course_id,\n              lessons: [],\n              created_at: ''\n            }\n          ];\n        });\n      }\n    } else {\n      lesson.section_id = $handleAddLessonWidget.id || undefined;\n      const savedLesson = await handleSaveLesson(lesson, $course.id);\n\n      if (Array.isArray(savedLesson) && savedLesson[0]) {\n        const newLesson = savedLesson[0];\n        lesson.id = newLesson.id;\n        $lessons = [...$lessons, lesson];\n\n        lessonSections.update((sections) =>\n          sections.map((s) => {\n            if (s.id === newLesson.section_id) {\n              s.lessons = [...s.lessons, lesson];\n            }\n\n            return s;\n          })\n        );\n        goto('/courses/' + $course.id + '/lessons/' + lesson.id);\n      }\n    }\n\n    handleClose();\n  };\n\n  function handleClose() {\n    $handleAddLessonWidget.open = false;\n\n    lesson = {\n      id: '',\n      course_id: $course.id || '',\n      title: '',\n      profile: undefined,\n      call_url: undefined,\n      lesson_at: new Date().toDateString(),\n      is_unlocked: true,\n      lesson_completion: [],\n      created_at: ''\n    };\n  }\n</script>\n\n<Modal\n  onClose={handleClose}\n  bind:open={$handleAddLessonWidget.open}\n  width=\"w-[80%] md:w-[65%]\"\n  maxWidth=\"max-w-2xl\"\n  containerClass=\"overflow-hidden\"\n  modalHeading={$t(\n    `course.navItem.lessons.add_lesson.${\n      $handleAddLessonWidget.isSection ? 'modal_heading_section' : 'modal_heading'\n    }`\n  )}\n>\n  <form\n    on:submit|preventDefault={handleSave}\n    class=\"relative m-auto py-2 md:py-3 px-2 md:px-5 mb-2 md:mb-4 flex flex-wrap items-center dark:bg-neutral-800\"\n  >\n    <div class=\"w-full\">\n      <TextField\n        label={$t(\n          `course.navItem.lessons.add_lesson.${\n            $handleAddLessonWidget.isSection ? 'lesson_section_title' : 'lesson_title'\n          }`\n        )}\n        bind:value={lesson.title}\n        autoFocus={true}\n        className=\"flex-1 min-w-lg max-w-lg\"\n        isRequired={true}\n        errorMessage={errors.title}\n      />\n      {#if $course.type == COURSE_TYPE.LIVE_CLASS}\n        <!-- <div\n          class=\"flex items-start justify-evenly gap-1 flex-col lg:flex-row lg:items-center mt-2 w-4/5\"\n        >\n          <div class=\"lg:mb-0\">\n            <Select\n              bind:value={lesson.profile}\n              options={$group.tutors}\n              labelKey=\"fullname\"\n              className=\"sm:my-1 w-[100%]\"\n            />\n          </div>\n\n          <div class=\"flex items-center lg:mb-0\">\n            <input\n              type=\"date\"\n              name=\"lesson-date-picker\"\n              class=\"p-2 my-2 rounded-md sm:w-[179px] dark:bg-neutral-800 dark:text-white\"\n            />\n          </div>\n\n          <div class=\"flex items-center mb-3 lg:mb-0\">\n            <TextField className=\"w-[179px]\" placeholder=\"https://meet.google.com/mga-dsjs-fmb\" />\n          </div>\n        </div> -->\n      {/if}\n    </div>\n  </form>\n\n  <div class=\"flex flex-row-reverse\">\n    <PrimaryButton label={$t('course.navItem.lessons.add_lesson.save')} onClick={handleSave} />\n  </div>\n</Modal>\n","<script lang=\"ts\">\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import Modal from '$lib/components/Modal/index.svelte';\n  import { t } from '$lib/utils/functions/translations';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import { supabase } from '$lib/utils/functions/supabase';\n  import { course } from '../../store';\n  import { snackbar } from '$lib/components/Snackbar/store';\n\n  export let open = false;\n\n  let isActivating = false;\n\n  const activate = async () => {\n    isActivating = true;\n    const { error } = await supabase.rpc('convert_course_to_v2', {\n      course_id_arg: $course.id\n    });\n\n    if (error) {\n      snackbar.error('snackbar.something');\n      return;\n    }\n\n    window.location.reload();\n  };\n\n  function handleClose() {\n    open = false;\n  }\n</script>\n\n<Modal\n  onClose={handleClose}\n  bind:open\n  width=\"w-[80%] md:w-[65%]\"\n  maxWidth=\"max-w-xl\"\n  modalHeading={$t(`course.navItem.lessons.section_prompt.header`)}\n>\n  <div class=\"flex flex-col w-full items-center\">\n    <div class=\"mb-8\">\n      <h3 class=\"text-center text-2xl\">\n        {$t('course.navItem.lessons.section_prompt.title')}\n      </h3>\n      <p class=\"text-center max-w-md\">\n        {$t('course.navItem.lessons.section_prompt.description')}\n      </p>\n    </div>\n\n    <div class=\"flex gap-2\">\n      <PrimaryButton\n        variant={VARIANTS.OUTLINED}\n        label={$t('course.navItem.lessons.section_prompt.cancel')}\n        onClick={handleClose}\n      />\n      <PrimaryButton\n        label={$t('course.navItem.lessons.section_prompt.activate')}\n        onClick={activate}\n        isLoading={isActivating}\n      />\n    </div>\n  </div>\n</Modal>\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import PageNav from '$lib/components/PageNav/index.svelte';\n  import RoleBasedSecurity from '$lib/components/RoleBasedSecurity/index.svelte';\n  import Box from '$lib/components/Box/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import CourseContainer from '$lib/components/CourseContainer/index.svelte';\n  import {\n    lessons,\n    handleDelete,\n    lessonSections\n  } from '$lib/components/Course/components/Lesson/store/lessons';\n  import PageBody from '$lib/components/PageBody/index.svelte';\n  import DeleteLessonConfirmation from '$lib/components/Course/components/Lesson/DeleteLessonConfirmation.svelte';\n  import { handleAddLessonWidget } from '$lib/components/Course/components/Lesson/store';\n  import { course } from '$lib/components/Course/store';\n  import type { Lesson } from '$lib/utils/types';\n  import { t } from '$lib/utils/functions/translations';\n  import { goto } from '$app/navigation';\n  import { COURSE_VERSION } from '$lib/utils/types';\n  import { profile } from '$lib/utils/store/user';\n  import LessonList from '$lib/components/Course/components/Lesson/LessonList.svelte';\n  import LessonSectionList from '$lib/components/Course/components/Lesson/LessonSectionList.svelte';\n  import NewLessonModal from '$lib/components/Course/components/Lesson/NewLessonModal.svelte';\n  import ActivateSectionsModal from '$lib/components/Course/components/Lesson/ActivateSectionsModal.svelte';\n\n  export let data;\n\n  const query = new URLSearchParams($page.url.search);\n\n  let lessonEditing: string | undefined;\n  let lessonToDelete: Lesson | undefined;\n  let openDeleteModal: boolean = false;\n  let isFetching: boolean = false;\n  let reorder = false;\n  let activateSections = false;\n\n  function addLesson() {\n    $handleAddLessonWidget.open = true;\n\n    $handleAddLessonWidget.isSection = $course.version === COURSE_VERSION.V2;\n  }\n\n  function hasUserCompletedLesson(completion) {\n    return completion?.find((c) => c.profile_id === $profile.id);\n  }\n\n  const getLessons = () => {\n    if ($course.version === COURSE_VERSION.V1) {\n      return $lessons;\n    } else {\n      const _lessons: Lesson[] = [];\n\n      $lessonSections.forEach((section) => {\n        _lessons.push(...section.lessons);\n      });\n\n      return _lessons;\n    }\n  };\n\n  function findFirstIncompleteLesson() {\n    return getLessons().find(\n      (lesson) => !hasUserCompletedLesson(lesson.lesson_completion) && lesson.is_unlocked === true\n    );\n  }\n\n  function onNextQuery(lessons) {\n    if (!isFetching && lessons.length > 0) {\n      const incompleteLesson = findFirstIncompleteLesson();\n\n      if (incompleteLesson) {\n        goto(`/courses/${data.courseId}/lessons/${incompleteLesson.id}`);\n      } else {\n        goto(`/courses/${data.courseId}/lessons`);\n      }\n    }\n  }\n\n  $: shouldGoToNextLesson = query.get('next') === 'true';\n  $: !isFetching && shouldGoToNextLesson && onNextQuery($lessons);\n  $: lessonsLength =\n    $course.version === COURSE_VERSION.V1 ? $lessons.length : $lessonSections.length;\n</script>\n\n<NewLessonModal />\n\n<ActivateSectionsModal bind:open={activateSections} />\n\n<DeleteLessonConfirmation\n  bind:openDeleteModal\n  deleteLesson={() => handleDelete(lessonToDelete?.id)}\n/>\n\n<CourseContainer bind:isFetching bind:courseId={data.courseId}>\n  <PageNav title={$t('course.navItem.lessons.heading_v2')}>\n    <div slot=\"widget\" class=\"flex w-full justify-end gap-2\">\n      <RoleBasedSecurity allowedRoles={[1, 2]}>\n        {#if $course.version === COURSE_VERSION.V1}\n          <PrimaryButton\n            label={$t(`course.navItem.lessons.section_prompt.cta`)}\n            variant={VARIANTS.OUTLINED}\n            onClick={() => (activateSections = !activateSections)}\n            isDisabled={!!lessonEditing}\n          />\n        {/if}\n        <PrimaryButton\n          label={$t(\n            `course.navItem.lessons.add_lesson.${reorder ? 'end_reorder' : 'start_reorder'}`\n          )}\n          variant={VARIANTS.OUTLINED}\n          onClick={() => (reorder = !reorder)}\n          isDisabled={!!lessonEditing}\n        />\n        <PrimaryButton\n          label={$t('course.navItem.lessons.add_lesson.button_title')}\n          onClick={addLesson}\n          isDisabled={!!lessonEditing}\n        />\n      </RoleBasedSecurity>\n    </div>\n  </PageNav>\n\n  <PageBody width=\"max-w-6xl\" padding=\"p-0\">\n    {#if shouldGoToNextLesson}\n      <Box className=\"w-full lg:w-11/12 lg:px-4 m-auto\">\n        <div class=\"flex flex-col items-center justify-between\">\n          <img src=\"/images/empty-lesson-icon.svg\" alt=\"Lesson\" class=\"mx-auto my-2.5\" />\n          <h2 class=\"my-1.5 text-xl font-normal\">{$t('course.navItem.lessons.no_lesson')}</h2>\n          <p class=\"text-center text-sm text-slate-500\">\n            {$t('course.navItem.lessons.share_your_knowledge')}\n          </p>\n        </div>\n      </Box>\n    {:else if lessonsLength > 0}\n      {#if reorder}\n        <p class=\"text-gray-400 text-center dark:text-white italic text-xs\">\n          {$t('course.navItem.lessons.drag')}\n        </p>\n      {/if}\n\n      {#if $course.version === COURSE_VERSION.V1}\n        <LessonList {reorder} {lessonEditing} bind:lessonToDelete bind:openDeleteModal />\n      {:else if $course.version === COURSE_VERSION.V2}\n        <LessonSectionList {reorder} {lessonEditing} />\n      {/if}\n    {:else}\n      <Box className=\"w-full lg:w-11/12 lg:px-4 m-auto\">\n        <div class=\"flex justify-between flex-col items-center\">\n          <img src=\"/images/empty-lesson-icon.svg\" alt=\"Lesson\" class=\"my-2.5 mx-auto\" />\n          <h2 class=\"text-xl my-1.5 font-normal\">{$t('course.navItem.lessons.body_header')}</h2>\n          <p class=\"text-sm text-center text-slate-500\">\n            {$t('course.navItem.lessons.body_content')}\n          </p>\n        </div>\n      </Box>\n    {/if}\n  </PageBody>\n</CourseContainer>\n"],"names":["size","$$props","title","$$invalidate","attributes","labelled","load","params","t0_value","ctx","VARIANTS","current","dirty","set_data","t0","primarybutton0_changes","primarybutton1_changes","modal_changes","deleteLesson","handleDelete","func","openDeleteModal","func_1","t1_value","t3_value","t1","t3","t_1_value","attr","a","a_href_value","a_class_value","t_1","_a","textfield_props","textfield_changes","overflowmenuitem0_changes","overflowmenuitem2_changes","t5_value","t5","get_key","lessonEditing","lessonToDelete","errors","saveLesson","lesson","courseId","set_store_value","lessons","$lessons","e","order","index","id","$$self","value","handleSaveLesson","$course","overflowmenuitem1_changes","t4_value","t6_value","getLessonOrder","textchip_changes","t6","stop_animation","create_animation","div","rect","flip","flipDurationMs","each_value_1","ensure_array_like","prevTitle","onSave","section","$lessonSections","s","validationRes","resetEdit","snackbar","deletingData","handleDeleteSection","handleAddLessonWidget","lessonSections","handleDndConsiderCards","cid","colIdx","c","handleDndFinalizeCards","prevLessonOrder","lessonUpdate","each_value","section_index","click_handler_1","onDelete","lesson_index","func_5","click_handler_4","consider_handler","finalize_handler","if_block","COURSE_TYPE","create_if_block$1","primarybutton_changes","modal_props","handleSave","savedSection","newLessonSection","sections","savedLesson","newLesson","goto","handleClose","$handleAddLessonWidget","t2_value","t2","activate","error","supabase","COURSE_VERSION","create_if_block_5","pagenav_changes","coursecontainer_props","coursecontainer_changes","data","addLesson","completion","$profile","getLessons","_lessons","findFirstIncompleteLesson","hasUserCompletedLesson","isFetching","lessons2","incompleteLesson","activateSections","func_2","reorder","shouldGoToNextLesson","query"],"mappings":"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","x_google_ignoreList":[0]}