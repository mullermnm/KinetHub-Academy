{"version":3,"file":"19.b1dfdccf.js","sources":["../../../../../../src/routes/courses/[id]/submissions/+page.js","../../../../../../src/lib/components/Course/components/Lesson/Exercise/MarkExerciseModal.svelte","../../../../../../src/lib/utils/functions/isSubmissionEarly.js","../../../../../../src/lib/utils/functions/formatDate.js","../../../../../../src/routes/courses/[id]/submissions/+page.svelte"],"sourcesContent":["export const load = ({ params = { id: '' } }) => {\n  return {\n    courseId: params.id\n  };\n};\n","<script lang=\"ts\">\n  import Modal from '$lib/components/Modal/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import Preview from './Preview.svelte';\n  import { STATUS } from './constants';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import TextArea from '$lib/components/Form/TextArea.svelte';\n  import { Dropdown, Tag } from 'carbon-components-svelte';\n  import { useCompletion } from 'ai/svelte';\n  import { QUESTION_TYPE } from '$lib/components/Question/constants';\n  import { t } from '$lib/utils/functions/translations';\n  import { OverflowMenu, OverflowMenuItem } from 'carbon-components-svelte';\n  import type { SubmissionIdData } from '$lib/utils/types/submission';\n\n  export let open = false;\n  export let onClose = () => {};\n  export let handleSave = (d: SubmissionIdData) => {};\n  export let isGradeWithAI = false;\n  export let data: SubmissionIdData;\n  export let deleteSubmission = async (id: string, statusId: number) => {};\n  export let updateStatus = (arg: {\n    submissionId: string;\n    prevStatusId: number;\n    nextStatusId: number;\n    total: number;\n  }) => {};\n  export let isSaving = false;\n\n  const SELECTABLE_STATUS = [\n    {\n      id: STATUS.SUBMITTED,\n      text: $t('course.navItem.submissions.submission_status.submitted')\n    },\n    {\n      id: STATUS.IN_PROGRESS,\n      text: $t('course.navItem.submissions.submission_status.in_progress')\n    },\n    {\n      id: STATUS.GRADED,\n      text: $t('course.navItem.submissions.submission_status.graded')\n    }\n  ];\n\n  let status = SELECTABLE_STATUS[0];\n  let selectedId = status.id;\n  let reasons = {};\n  let isLoading = false;\n  let total = 0;\n  let maxPoints = 0;\n  let openMenu = false;\n  let openDeletePrompt = false;\n  let isDeleting = false;\n\n  function getMaxPoints(questions) {\n    return (questions || []).reduce((acc, question) => acc + question.points, 0);\n  }\n\n  function calculateTotal(grades: Record<string, string>): number {\n    if (!grades) return 0;\n    return Object.values(grades).reduce((acc, grade) => acc + parseInt(grade || '0'), 0);\n  }\n\n  function handleStatusChange(event) {\n    const newSelectedId = event.detail.selectedId;\n\n    setStatus({\n      ...data,\n      statusId: newSelectedId\n    });\n\n    updateStatus({\n      submissionId: data.id,\n      prevStatusId: data.statusId,\n      nextStatusId: status.id,\n      total\n    });\n\n    snackbar.success(`${$t('snackbar.exercise.submission_updated')} '${status.text}'`);\n  }\n\n  function setStatus(data: SubmissionIdData) {\n    const statusBySelectedId = SELECTABLE_STATUS.find((status) => status.id === data.statusId);\n\n    if (!statusBySelectedId) {\n      return;\n    }\n\n    status = statusBySelectedId;\n\n    if (data.statusId !== selectedId) {\n      selectedId = data.statusId;\n    }\n  }\n\n  async function handleDeleteSubmission() {\n    isDeleting = true;\n    await deleteSubmission(data.id, status.id);\n    isDeleting = false;\n  }\n\n  const { input, handleSubmit, completion } = useCompletion({\n    api: '/api/completion/gradingprompt',\n    onFinish: async () => {\n      try {\n        const responseData = $completion.replace('```json', '').replace('```', '');\n\n        let aiResponses: {\n          id: number;\n          score: number;\n          explanation: string;\n        }[] = [];\n        try {\n          // Parse the modified response data as JSON\n          aiResponses = JSON.parse(responseData);\n        } catch (error) {\n          console.error('Error parsing AI response', error);\n        }\n\n        data?.questions.forEach((question) => {\n          const { id, points, question_type_id } = question;\n\n          if (question_type_id !== QUESTION_TYPE.TEXTAREA) {\n            const answer = data.questionAnswers.find((q) => q.question_id === id);\n            const answerPoints = answer?.answers?.length ?? 0;\n            reasons = {\n              ...reasons,\n              [id]: `${$t(\n                'course.navItem.submissions.grading_modal.questions_tried'\n              )} ${answerPoints} `\n            };\n            data.questionAnswerByPoint[id] = `${Math.ceil(points / answerPoints)}`;\n          } else if (aiResponses.length) {\n            const graded = aiResponses.find((res) => res.id === id);\n\n            reasons = {\n              ...reasons,\n              [id]: `${graded?.explanation}`\n            };\n\n            data.questionAnswerByPoint[id] = `${graded?.score}`;\n          }\n        });\n      } catch (error) {\n        console.error('Error', error);\n      } finally {\n        isLoading = false;\n      }\n    }\n  });\n\n  function gradeWithAI() {\n    isGradeWithAI = true;\n    isLoading = true;\n    const paragraphAiInput = data.questions\n      .filter((q) => q.question_type_id === QUESTION_TYPE.TEXTAREA)\n      .map((q) => {\n        const answer = data.questionAnswers.find((qA) => qA.question_id === q.id); // { open_answer: '' }\n        return {\n          id: q.id,\n          question: q.title,\n          answer: answer?.open_answer,\n          point: q.points\n        };\n      });\n\n    $input = JSON.stringify(paragraphAiInput);\n    handleSubmit({ preventDefault: () => {} });\n  }\n\n  $: total = calculateTotal(data.questionAnswerByPoint);\n  $: maxPoints = getMaxPoints(data.questions);\n  $: setStatus(data);\n</script>\n\n<Modal\n  modalHeading={data.title}\n  bind:open\n  {onClose}\n  width=\"w-4/5 h-[90%]\"\n  containerClass=\"flex items-start !max-h-full h-[85%] py-0 px-4\"\n  headerClass=\"py-2\"\n  labelClass=\"text-base font-semibold\"\n>\n  <div class=\"w-full h-full mt-2\">\n    {#if openDeletePrompt}\n      <div class=\"w-96 mx-auto p-3 border border-gray-300 rounded-md\">\n        <h1 class=\"dark:text-white text-lg\">\n          {$t('delete_modal.content')}\n        </h1>\n\n        <div class=\"mt-5 flex items-center justify-between\">\n          <PrimaryButton\n            className=\"px-6 py-3\"\n            variant={VARIANTS.OUTLINED}\n            label={$t('delete_modal.no')}\n            onClick={() => (openDeletePrompt = false)}\n            isDisabled={isDeleting}\n          />\n          <PrimaryButton\n            className=\"px-6 py-3\"\n            variant={VARIANTS.OUTLINED}\n            label={$t('delete_modal.yes')}\n            onClick={handleDeleteSubmission}\n            isLoading={isDeleting}\n          />\n        </div>\n      </div>\n    {:else}\n      <Preview\n        questions={Array.isArray(data.questions)\n          ? data.questions.sort((a, b) => a.order - b.order)\n          : []}\n        questionnaireMetaData={{\n          answers: data.answers || {},\n          isFinished: true\n        }}\n        bind:grades={data.questionAnswerByPoint}\n        bind:reasons\n        bind:isGradeWithAI\n        bind:isLoading\n        disableGrading={false}\n      />\n    {/if}\n  </div>\n  <div class=\"ml-4 mt-2 w-2/5 sticky top-0\">\n    <div class=\"border border-gray-300 rounded-md\">\n      <div\n        class=\"flex gap-1 justify-between items-center border-b border-t-0 border-l-0 border-r-0 border-gray-300 p-3\"\n      >\n        <p class=\"dark:text-white font-bold text-base\">\n          {$t('course.navItem.submissions.grading_modal.details')}\n          {#if data.isEarly}\n            <span class=\"ml-2 text-sm badge rounded-sm px-2 bg-green-500 text-white\">\n              {$t('course.navItem.submissions.grading_modal.early')}</span\n            >\n          {:else}\n            <span class=\"ml-2 badge text-sm rounded-sm px-2 bg-red-500 text-white\">\n              {$t('course.navItem.submissions.grading_modal.late')}\n            </span>\n          {/if}\n        </p>\n\n        <OverflowMenu open={openMenu} flipped>\n          <OverflowMenuItem\n            text={$t('delete_modal.label')}\n            on:click={() => {\n              openDeletePrompt = true;\n              openMenu = false;\n            }}\n            danger\n          />\n        </OverflowMenu>\n      </div>\n\n      <div class=\"flex items-center space-x-4 text-sm px-3 py-2\">\n        <p class=\"dark:text-white text-sm text-gray-500 font-semibold\">\n          {$t('course.navItem.submissions.grading_modal.total_grade')}:\n        </p>\n\n        <Tag\n          class=\"dark:text-white font-semibold text-black bg-gray-100 dark:bg-neutral-700 rounded-md w-fit\"\n        >\n          {total}/{maxPoints}\n        </Tag>\n      </div>\n      <!-- <div class=\"flex items-center text-sm p-3\">\n        <p class=\"dark:text-white font-bold w-1/2\">Status</p>\n        <div class=\"flex items-center\">\n          <p class=\"dark:text-white rounded-full w-5 h-5 bg-yellow-300 mr-2\" />\n          <p class=\"dark:text-white\">Grading</p>\n        </div>\n      </div> -->\n      <div class=\"flex items-center space-x-4 text-sm px-3 py-2\">\n        <p class=\"dark:text-white text-sm text-gray-500 font-semibold\">\n          {$t('course.navItem.submissions.grading_modal.student')}:\n        </p>\n        {#if data.student}\n          <div\n            class=\"flex flex-row justify-center items-center bg-gray-100 dark:bg-neutral-700 rounded-md p-[6px]\"\n          >\n            <img\n              alt=\"Student avatar\"\n              class=\"flex rounded-full h-5 w-5\"\n              src={data.student.avatar_url}\n            />\n            <p class=\"dark:text-white font-semibold ml-2 text-sm line-clamp-1\">\n              {data.student.fullname}\n            </p>\n          </div>\n        {/if}\n      </div>\n      <!-- <div class=\"flex items-center space-x-4 text-sm px-3 py-2\">\n        <p class=\"dark:text-white text-sm text-gray-500 font-semibold\">Assesment Type:</p>\n        <Tag\n          class=\"dark:text-white font-semibold bg-gray-100 dark:bg-neutral-700 rounded-md text-black w-fit\"\n          >Paragraph</Tag\n        >\n      </div> -->\n\n      <div class=\"flex flex-col items-start text-sm px-3 py-2\">\n        <p class=\"dark:text-white text-gray-500 font-semibold\">\n          {$t('course.navItem.submissions.grading_modal.status')}:\n        </p>\n        <Dropdown\n          bind:selectedId\n          items={SELECTABLE_STATUS}\n          class=\"w-full\"\n          on:select={handleStatusChange}\n        />\n      </div>\n\n      <div class=\"flex flex-col items-start text-sm px-3 py-2\">\n        <p class=\"dark:text-white text-gray-500 font-semibold\">\n          {$t('course.navItem.submissions.grading_modal.add_comment')}:\n        </p>\n        <TextArea\n          bgColor=\"bg-gray-100 dark:bg-neutral-700\"\n          className=\"font-semibold\"\n          placeholder={$t('course.navItem.submissions.grading_modal.add_comment_placeholder')}\n          bind:value={data.feedback}\n        />\n      </div>\n\n      <div class=\"flex flex-col w-full space-y-3 px-3 py-2\">\n        <PrimaryButton\n          onClick={gradeWithAI}\n          variant={VARIANTS.OUTLINED}\n          className=\"space-x-3 py-3 px-8 w-full \"\n        >\n          <img src=\"/ai.svg\" alt=\"ai\" />\n          <p class=\"font-semibold text-sm\">\n            {$t('course.navItem.submissions.grading_modal.grade_with_ai')}\n          </p>\n        </PrimaryButton>\n        <PrimaryButton\n          onClick={() => {\n            handleSave(data);\n            // onClose();\n          }}\n          isLoading={isSaving}\n          label={$t('course.navItem.submissions.grading_modal.submit_grades')}\n          variant={VARIANTS.CONTAINED}\n          className=\"py-3 px-8 w-full\"\n        />\n      </div>\n      <!-- <div class=\"flex items-center text-sm p-3\">\n        <p class=\"dark:text-white font-bold w-1/2\">Teacher</p>\n        <p class=\"dark:text-white\">rotimi-best</p>\n      </div> -->\n    </div>\n  </div>\n</Modal>\n\n<style>\n  .badge {\n    width: fit-content;\n  }\n</style>\n","export default (created_at, due_date) => {\n  return !!due_date ? !!(new Date(created_at).getTime() <= new Date(due_date).getTime()) : true;\n};\n","export default (date) => {\n  const d = new Date(date);\n\n  const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\n  const mo = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d);\n  const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\n\n  // return `${ye}-${mo}-${da} ${d.toLocaleTimeString('en-US')}`;\n  return new Intl.DateTimeFormat('en-US', {\n    dateStyle: 'full',\n    timeStyle: 'medium'\n  }).format(d);\n};\n","<script lang=\"ts\">\n  import { flip } from 'svelte/animate';\n  import { dndzone } from 'svelte-dnd-action';\n  import { goto } from '$app/navigation';\n  import { page } from '$app/stores';\n  import { SkeletonPlaceholder } from 'carbon-components-svelte';\n  import PageNav from '$lib/components/PageNav/index.svelte';\n  import RoleBasedSecurity from '$lib/components/RoleBasedSecurity/index.svelte';\n  import MarkExerciseModal from '$lib/components/Course/components/Lesson/Exercise/MarkExerciseModal.svelte';\n  import Chip from '$lib/components/Chip/index.svelte';\n  import PageBody from '$lib/components/PageBody/index.svelte';\n  import CourseContainer from '$lib/components/CourseContainer/index.svelte';\n  import { course } from '$lib/components/Course/store';\n  import {\n    fetchSubmissions,\n    updateSubmission,\n    updateQuestionAnswer,\n    deleteSubmission\n  } from '$lib/utils/services/submissions';\n  import { formatAnswers } from '$lib/components/Course/function.js';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import isSubmissionEarly from '$lib/utils/functions/isSubmissionEarly';\n  import formatDate from '$lib/utils/functions/formatDate';\n  import {\n    triggerSendEmail,\n    NOTIFICATION_NAME\n  } from '$lib/utils/services/notification/notification';\n  import { currentOrg, currentOrgDomain } from '$lib/utils/store/org';\n  import { browser } from '$app/environment';\n  import { t } from '$lib/utils/functions/translations';\n  import type {\n    SubmissionIdData,\n    SubmissionItem,\n    SubmissionSection\n  } from '$lib/utils/types/submission';\n\n  export let data;\n  const { courseId } = data;\n\n  const flipDurationMs = 300;\n  let exerciseDetails: { id: string; title: string };\n  let lessonDetails: { id: string; title: string };\n  let totalMark = 0;\n  let maxMark = 0;\n  let submissionIdData: { [key: number]: SubmissionIdData } = {};\n  let submissionId: string;\n  let openExercise = false;\n  let isGradeWithAI = false;\n  let fetching = false;\n  let isSaving = false;\n\n  const submissionStatus: { [key: number]: string } = {\n    1: $t('course.navItem.submissions.submission_status.submitted'),\n    2: $t('course.navItem.submissions.submission_status.in_progress'),\n    3: $t('course.navItem.submissions.submission_status.graded')\n  };\n\n  let sections: SubmissionSection[] = [\n    {\n      id: 1,\n      title: $t('course.navItem.submissions.submission_status.submitted'),\n      value: 0,\n      items: []\n    },\n    {\n      id: 2,\n      title: $t('course.navItem.submissions.submission_status.in_progress'),\n      value: 0,\n      items: []\n    },\n    {\n      id: 3,\n      title: $t('course.navItem.submissions.submission_status.graded'),\n      value: 10,\n      items: []\n    }\n  ];\n\n  function getMaxPoints(questions) {\n    return (questions || []).reduce((acc, question) => acc + question.points, 0);\n  }\n\n  function calculateTotal(grades: string[]): number {\n    if (!grades) return 0;\n    return Object.values(grades).reduce((acc, grade) => acc + parseInt(grade), 0);\n  }\n\n  const notifyStudent = (submissionData) => {\n    maxMark = getMaxPoints(submissionData?.questions);\n    totalMark = calculateTotal(submissionData?.questionAnswerByPoint);\n\n    const { fullname, email } = submissionData?.student;\n    const { title, statusId }: { title: string; statusId: number } = submissionData;\n    const exerciseLink = `${$currentOrgDomain}/courses/${courseId}/lessons/${lessonDetails.id}/exercises/${exerciseDetails.id}`;\n\n    const content = `\n      <p>Hello ${fullname},</p>\n        <p>The status of your submitted exercise on <strong>${title}</strong> has been updated to ${\n          submissionStatus[statusId]\n        }</p>\n        ${\n          statusId == 3\n            ? `<p>Your score was ${totalMark}/${maxMark}</p>\n              <a class=\"button\" href=\"${exerciseLink}\">View your Result</a>\n            `\n            : `<a class=\"button\" href=\"${exerciseLink}\">Open Exercise</a>`\n        }\n        <p>This exercise is for <strong>${\n          lessonDetails.title\n        }</strong> in a course you are taking titled <strong>${$course.title}</strong></p>\n      `;\n\n    // triggerSendEmail(NOTIFICATION_NAME.SUBMISSION_UPDATE, {\n    //   to: email,\n    //   content,\n    //   orgName: $currentOrg?.name\n    // });\n  };\n\n  function handleItemFinalize(\n    columnIdx: number,\n    newItems: { map: (arg0: (item: SubmissionItem) => SubmissionItem) => SubmissionItem[] }\n  ) {\n    let itemToWithNewStatus: SubmissionItem | undefined;\n\n    const { id } = sections[columnIdx];\n\n    // Set column in the UI\n    sections[columnIdx].items = newItems.map((item) => {\n      if (item.statusId !== id) {\n        itemToWithNewStatus = item;\n        item.statusId = id;\n      }\n\n      return item;\n    });\n\n    // Update backend\n    if (itemToWithNewStatus) {\n      // Update key mapping for each submission also\n      submissionIdData[itemToWithNewStatus.id] = {\n        ...submissionIdData[itemToWithNewStatus.id],\n        statusId: itemToWithNewStatus.statusId\n      };\n\n      notifyStudent(submissionIdData[itemToWithNewStatus.id]);\n\n      updateSubmission({\n        id: itemToWithNewStatus.id,\n        status_id: itemToWithNewStatus.statusId\n      }).then((res) => console.log('Updated submission', res));\n    }\n  }\n\n  function handleDndConsiderCards(columnIdx: number) {\n    return function (e) {\n      sections[columnIdx].items = e.detail.items;\n    };\n  }\n\n  function handleDndFinalizeCards(columnIdx: number) {\n    return (e) => handleItemFinalize(columnIdx, e.detail.items);\n  }\n\n  function handleModalClose() {\n    isGradeWithAI = false;\n    goto($page.url.pathname);\n  }\n\n  // Via dialog\n  function updateStatus({\n    submissionId,\n    prevStatusId,\n    nextStatusId,\n    total\n  }: {\n    submissionId: string;\n    prevStatusId: number;\n    nextStatusId: number;\n    total: number;\n  }) {\n    let itemToWithNewStatus: SubmissionItem | undefined;\n\n    // Remove from current column\n    const { items } = sections[prevStatusId - 1];\n    sections[prevStatusId - 1].items = items?.filter((item) => {\n      if (item.id === submissionId) {\n        itemToWithNewStatus = Object.assign(item);\n        if (itemToWithNewStatus) {\n          itemToWithNewStatus.statusId = nextStatusId;\n        }\n        return false;\n      }\n\n      return true;\n    });\n    // Move to right column\n    if (itemToWithNewStatus) {\n      sections[nextStatusId - 1].items = [...sections[nextStatusId - 1].items, itemToWithNewStatus];\n    }\n\n    // If something changed\n    if (itemToWithNewStatus) {\n      // Update key mapping for each submission also\n      submissionIdData[itemToWithNewStatus.id] = {\n        ...submissionIdData[itemToWithNewStatus.id],\n        statusId: itemToWithNewStatus.statusId\n      };\n\n      notifyStudent(submissionIdData[itemToWithNewStatus.id]);\n      // Update backend\n      updateSubmission({\n        id: itemToWithNewStatus.id,\n        status_id: itemToWithNewStatus.statusId,\n        total\n      }).then((res) => console.log('Updated submission', res));\n    }\n  }\n\n  async function handleDeleteSubmission(id: string, statusId: number) {\n    const { items } = sections[statusId - 1];\n\n    sections[statusId - 1].items = items?.filter((item) => {\n      return item.id === id ? false : true;\n    });\n\n    submissionIdData[id] = undefined;\n\n    const { error } = await deleteSubmission(id);\n\n    if (error) {\n      console.error('Error deleting submission', error);\n      snackbar.error('course.navItem.submissions.grading_modal.delete_error');\n      return;\n    }\n\n    snackbar.success('course.navItem.submissions.grading_modal.delete_success');\n\n    handleModalClose();\n  }\n\n  async function handleSave(submission: {\n    questionAnswerByPoint: any;\n    questionAnswers: any;\n    feedback: any;\n  }) {\n    isSaving = true;\n    const { questionAnswerByPoint, questionAnswers, feedback } = submission;\n\n    let totalPoints = 0;\n\n    for (const questionId in questionAnswerByPoint) {\n      if (Object.prototype.hasOwnProperty.call(questionAnswerByPoint, questionId)) {\n        const questionAnswer = questionAnswers.find(\n          (answer: { question_id: string }) => answer.question_id == questionId\n        );\n        const point = questionAnswerByPoint[questionId];\n\n        totalPoints += parseInt(point, 10);\n\n        const qaResponse = await updateQuestionAnswer({ point }, { id: questionAnswer?.id });\n\n        if (qaResponse.error) {\n          console.error('Error saving', qaResponse.error);\n          snackbar.error(`snackbar.something`);\n\n          return;\n        }\n      }\n    }\n\n    await updateSubmission({\n      id: submissionId,\n      total: totalPoints,\n      feedback: feedback\n    });\n\n    snackbar.success('snackbar.submissions.success.grading');\n\n    isSaving = false;\n  }\n\n  async function firstRender(courseId: string) {\n    fetching = true;\n    const { data: submissions } = await fetchSubmissions(courseId);\n    const sectionById: { [key: number]: SubmissionSection[] } = {};\n\n    if (submissions) {\n      for (const submission of submissions) {\n        const { id, created_at, answers, groupmember, feedback, exercise } = submission;\n\n        const isEarly = isSubmissionEarly(created_at, exercise.due_by);\n\n        const submissionItem = {\n          id,\n          statusId: submission.status_id,\n          isEarly,\n          feedback,\n          submittedAt: formatDate(created_at),\n          exercise: {\n            id: exercise.id,\n            title: exercise.title\n          },\n          answers,\n          student: groupmember && groupmember.profile ? groupmember.profile : {},\n          lesson: {\n            id: exercise.lesson.id,\n            title: exercise.lesson.title\n          }\n        };\n\n        exerciseDetails = { id: submissionItem.exercise.id, title: submissionItem.exercise.title };\n\n        lessonDetails = {\n          id: submissionItem.lesson.id,\n          title: submissionItem.lesson.title\n        };\n\n        submissionIdData[id] = {\n          id,\n          statusId: submissionItem.statusId,\n          feedback,\n          isEarly,\n          title: exercise.title,\n          student: submissionItem.student,\n          questions: exercise.questions,\n          answers: formatAnswers({ questions: exercise.questions, answers }),\n          questionAnswers: answers,\n          questionAnswerByPoint: answers.reduce((acc, answer) => {\n            acc[answer.question_id] = answer.point;\n\n            return acc;\n          }, {})\n        };\n\n        if (Array.isArray(sectionById[submission.status_id])) {\n          sectionById[submission.status_id].push(submissionItem);\n        } else {\n          sectionById[submission.status_id] = [submissionItem];\n        }\n      }\n    }\n\n    sections = sections.map((section, index) => ({\n      ...section,\n      value: Array.isArray(sectionById[index + 1]) ? sectionById[index + 1].length : 0,\n      items: Array.isArray(sectionById[index + 1]) ? sectionById[index + 1] : []\n    }));\n    fetching = false;\n  }\n\n  $: browser && $course.id && firstRender($course.id);\n  $: {\n    const query = new URLSearchParams($page.url.search);\n    submissionId = query.get('submissionId') ?? '';\n    openExercise = !!submissionId && submissionIdData[submissionId];\n  }\n</script>\n\n<MarkExerciseModal\n  bind:open={openExercise}\n  onClose={handleModalClose}\n  data={submissionIdData[submissionId] || {}}\n  {handleSave}\n  {updateStatus}\n  deleteSubmission={handleDeleteSubmission}\n  bind:isGradeWithAI\n  {isSaving}\n/>\n\n<CourseContainer bind:courseId={data.courseId}>\n  <RoleBasedSecurity allowedRoles={[1, 2]}>\n    <PageNav title={$t('course.navItem.submissions.title')} />\n\n    <PageBody width=\"w-full max-w-6xl md:w-11/12 overflow-x-auto\">\n      <div class=\"flex items-center w-full\">\n        {#each sections as { id, title, items }, idx (id)}\n          <div\n            class=\"section rounded-md bg-gray-100 dark:bg-black border border-gray-50 dark:border-neutral-600 p-3 h-80 mr-3 overflow-hidden\"\n            animate:flip={{ duration: flipDurationMs }}\n          >\n            <div class=\"flex items-center mb-2\">\n              <Chip value={items.length} className=\"bg-set dark:bg-neutral-800\" />\n              <p class=\"dark:text-white ml-2 font-bold\">{title}</p>\n            </div>\n            {#if fetching}\n              <SkeletonPlaceholder style=\"width: 100%; height: 170px;\" class=\"rounded-md my-2\" />\n              <SkeletonPlaceholder style=\"width: 100%; height: 170px;\" class=\"rounded-md my-2\" />\n              <SkeletonPlaceholder style=\"width: 100%; height: 170px;\" class=\"rounded-md my-2\" />\n            {:else}\n              <div\n                class=\"content pr-2 overflow-y-auto mb-3\"\n                use:dndzone={{\n                  items,\n                  flipDurationMs,\n                  dropTargetStyle: { outline: 'blue' }\n                }}\n                on:consider={handleDndConsiderCards(idx)}\n                on:finalize={handleDndFinalizeCards(idx)}\n              >\n                {#each items as item (item.id)}\n                  <div\n                    class=\"{item.isEarly\n                      ? 'border-none'\n                      : 'border border-red-700'} w-full my-2 mx-0 rounded-md bg-white dark:bg-neutral-800 py-3 px-3\"\n                    animate:flip={{ duration: flipDurationMs }}\n                  >\n                    <a\n                      class=\"flex w-full items-center cursor-pointer text-black mb-2\"\n                      href={`${$page.url.pathname}?submissionId=${item.id}`}\n                    >\n                      <img\n                        alt=\"Student avatar\"\n                        class=\"block rounded-full h-6 w-6\"\n                        src={item.student.avatar_url}\n                      />\n                      <p class=\"dark:text-white ml-2 text-sm\">\n                        {item.student.username}\n                      </p>\n                    </a>\n                    <a\n                      class=\"text-primary-700 text-md font-bold\"\n                      href=\"{$page.url.pathname}?submissionId={item.id}\"\n                    >\n                      {item.exercise.title}\n                    </a>\n                    <a\n                      class=\"flex items-center no-underline hover:underline text-black my-2\"\n                      href=\"{$page.url?.pathname?.replace('submissions', 'lessons')}/{item.lesson\n                        .id}/exercises/{item.exercise.id}\"\n                    >\n                      <p class=\"dark:text-white text-grey text-sm\">\n                        #{item.lesson.title}\n                      </p>\n                    </a>\n                    <p class=\"dark:text-white text-gray-500 text-xs\">\n                      {item.submittedAt}\n                    </p>\n                    <!-- <div class=\"badge rounded-md px-2 bg-green-500 text-white\">\n                    early\n                  </div>\n                  <div class=\"badge rounded-md px-2 bg-red-600 text-white\">\n                    late\n                  </div> -->\n                  </div>\n                {/each}\n              </div>\n            {/if}\n          </div>\n        {/each}\n      </div>\n    </PageBody>\n  </RoleBasedSecurity>\n</CourseContainer>\n\n<style>\n  .section {\n    max-width: 355px;\n    min-width: 355px;\n    height: 75vh;\n  }\n\n  .content {\n    height: 95%;\n  }\n  @media screen and (max-width: 768px) {\n    .section {\n      min-width: 250px;\n    }\n  }\n</style>\n"],"names":["load","params","ctx","preview_props","dirty","preview_changes","t0_value","VARIANTS","current","set_data","t0","primarybutton0_changes","primarybutton1_changes","t_1_value","t_1","overflowmenuitem_changes","t1_value","t1","t5_value","t9_value","t13_value","t17_value","create_if_block_1","if_block2","create_if_block$1","textarea_props","t5","t9","t13","t17","textarea_changes","modal_changes","questions","acc","question","onClose","data","$$props","deleteSubmission","id","statusId","SELECTABLE_STATUS","STATUS","$t","status","selectedId","reasons","newSelectedId","event","setStatus","updateStatus","total","snackbar","statusBySelectedId","status2","data2","$$invalidate","handleDeleteSubmission","input","handleSubmit","completion","useCompletion","responseData","$completion","aiResponses","error","points","question_type_id","QUESTION_TYPE","answer","q","answerPoints","graded","res","gradeWithAI","qA","func","openDeletePrompt","$$self","value","openMenu","handleSave","isSubmissionEarly","created_at","due_date","formatDate","date","d","get_key","is_function","t8_value","attr","a0","a0_href_value","a1","a1_href_value","div","div_class_value","t8","stop_animation","create_animation","rect","flip","flipDurationMs","chip_changes","div1","pagenav_changes","coursecontainer_props","markexercisemodal_changes","coursecontainer_changes","exerciseDetails","lessonDetails","submissionIdData","submissionId","submissionStatus","sections","fullname","email","submissionData","title","totalMark","maxMark","handleItemFinalize","columnIdx","newItems","itemToWithNewStatus","item","updateSubmission","e","handleModalClose","prevStatusId","items","submissionId2","nextStatusId","questionAnswerByPoint","questionAnswers","feedback","submission","questionId","questionAnswer","point","sectionById","submissions","answers","groupmember","exercise","submissionItem","isEarly","section","index","$course","firstRender"],"mappings":"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"}