{"version":3,"file":"2.9aaf7bce.js","sources":["../../../../../../../../node_modules/.pnpm/hotkeys-js@3.11.2/node_modules/hotkeys-js/dist/hotkeys.esm.js","../../../../../../src/routes/courses/[id]/+layout.svelte"],"sourcesContent":["/**! \n * hotkeys-js v3.11.2 \n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. \n * \n * Copyright (c) 2023 kenny wong <wowohoo@qq.com> \n * https://jaywcjlove.github.io/hotkeys-js \n * Licensed under the MIT license \n */\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;\n\n// 绑定事件\nfunction addEvent(object, event, method, useCapture) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, useCapture);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n}\n\n// 修饰键转换成对应的键码\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n  for (var i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];\n  return mods;\n}\n\n// 处理传的key字符串转换成数组\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n  var index = keys.lastIndexOf('');\n\n  // 快捷键可能包含','，需特殊处理\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n  return keys;\n}\n\n// 比较修饰键的数组\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n  return isIndex;\n}\n\n// Special Keys\nvar _keyMap = {\n  backspace: 8,\n  '⌫': 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  '↩': 13,\n  return: 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  delete: 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  num_0: 96,\n  num_1: 97,\n  num_2: 98,\n  num_3: 99,\n  num_4: 100,\n  num_5: 101,\n  num_6: 102,\n  num_7: 103,\n  num_8: 104,\n  num_9: 105,\n  num_multiply: 106,\n  num_add: 107,\n  num_enter: 108,\n  num_subtract: 109,\n  num_decimal: 110,\n  num_divide: 111,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n};\n\n// Modifier Keys\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {};\n\n// F1~F12 special key\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nvar _downKeys = []; // 记录摁下的绑定键\nvar winListendFocus = false; // window是否已经监听了focus事件\nvar _scope = 'all'; // 默认热键范围\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n\n// 返回键码\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n};\nvar getKey = function getKey(x) {\n  return Object.keys(_keyMap).find(function (k) {\n    return _keyMap[k] === x;\n  });\n};\nvar getModifier = function getModifier(x) {\n  return Object.keys(_modifier).find(function (k) {\n    return _modifier[k] === x;\n  });\n};\n\n// 设置获取当前范围（默认为'所有'）\nfunction setScope(scope) {\n  _scope = scope || 'all';\n}\n// 获取当前范围\nfunction getScope() {\n  return _scope || 'all';\n}\n// 获取摁下绑定键的键值\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n}\nfunction getPressedKeyString() {\n  return _downKeys.map(function (c) {\n    return getKey(c) || getModifier(c) || String.fromCharCode(c);\n  });\n}\n\n// 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true;\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {\n    flag = false;\n  }\n  return flag;\n}\n\n// 判断摁下的键是否为某个键，返回true或者false\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n}\n\n// 循环删除handlers中的所有 scope(范围)\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i;\n\n  // 没有指定scope，获取scope\n  if (!scope) scope = getScope();\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  }\n\n  // 如果scope被删除，将scope重置为all\n  if (getScope() === scope) setScope(newScope || 'all');\n}\n\n// 清除修饰键\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n  var i = _downKeys.indexOf(key);\n\n  // 从列表中清除按压过的键\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  }\n  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  }\n\n  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n  if (key === 93 || key === 224) key = 91;\n  if (key in _mods) {\n    _mods[key] = false;\n\n    // 将修饰键重置为false\n    for (var k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;\n  }\n}\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (typeof keysInfo === 'undefined') {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (typeof keysInfo === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n      method = args[1];\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n}\n\n// 解除绑定某个范围的快捷键\nvar eachUnbind = function eachUnbind(_ref) {\n  var key = _ref.key,\n    scope = _ref.scope,\n    method = _ref.method,\n    _ref$splitKey = _ref.splitKey,\n    splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return;\n    // 判断是否传入范围，没有就获取范围\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].filter(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n      return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));\n    });\n  });\n};\n\n// 对监听对应快捷键的回调函数进行处理\nfunction eventHandler(event, handler, scope, element) {\n  if (handler.element !== element) {\n    return;\n  }\n  var modifiersMatch;\n\n  // 看它是否在当前范围\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    }\n\n    // 调用处理程序，如果是修饰键不做处理\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      handler.keys = [];\n      handler.keys = handler.keys.concat(_downKeys);\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n}\n\n// 处理keydown事件\nfunction dispatch(event, element) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode;\n\n  // 表单控件过滤 默认表单控件不触发快捷键\n  if (!hotkeys.filter.call(this, event)) return;\n\n  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n  if (key === 93 || key === 224) key = 91;\n\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {\n      /**\n       * Fix if Command is pressed:\n       * ===============================\n       */\n      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {\n        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));\n      }\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true;\n\n    // 将特殊字符的key注册到 hotkeys 上\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n    if (!asterisk) return;\n  }\n\n  // 将 modifierMap 里面的修饰键绑定到 event 中\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  }\n  /**\n   * https://github.com/jaywcjlove/hotkeys/pull/129\n   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.\n   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.\n   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate\n   */\n  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {\n    if (_downKeys.indexOf(17) === -1) {\n      _downKeys.push(17);\n    }\n    if (_downKeys.indexOf(18) === -1) {\n      _downKeys.push(18);\n    }\n    _mods[17] = true;\n    _mods[18] = true;\n  }\n\n  // 获取范围 默认为 `all`\n  var scope = getScope();\n  // 对任何快捷键都需要做的处理\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope, element);\n      }\n    }\n  }\n  // key 不在 _handlers 中返回\n  if (!(key in _handlers)) return;\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope, element);\n        }\n      }\n    }\n  }\n}\n\n// 判断 element 是否已经绑定事件\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n  var element = document; // 快捷键事件绑定节点\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+';\n  var capture = false;\n\n  // 对为设定范围的判断\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n    if (option.element) element = option.element; // eslint-disable-line\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option;\n\n  // 对于每个快捷键进行处理\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n    mods = [];\n\n    // 如果是组合快捷键取得组合快捷键\n    if (key.length > 1) mods = getMods(_modifier, key);\n\n    // 将非修饰键转化为键码\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n\n    // 判断key是否在_handlers中，不在就赋一个空数组\n    if (!(key in _handlers)) _handlers[key] = [];\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey,\n      element: element\n    });\n  }\n  // 在全局document上设置快捷键\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e, element);\n    }, capture);\n    if (!winListendFocus) {\n      winListendFocus = true;\n      addEvent(window, 'focus', function () {\n        _downKeys = [];\n      }, capture);\n    }\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e, element);\n      clearModifier(e);\n    }, capture);\n  }\n}\nfunction trigger(shortcut) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';\n  Object.keys(_handlers).forEach(function (key) {\n    var dataList = _handlers[key].filter(function (item) {\n      return item.scope === scope && item.shortcut === shortcut;\n    });\n    dataList.forEach(function (data) {\n      if (data && data.method) {\n        data.method();\n      }\n    });\n  });\n}\nvar _api = {\n  getPressedKeyString: getPressedKeyString,\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  trigger: trigger,\n  unbind: unbind,\n  keyMap: _keyMap,\n  modifier: _modifier,\n  modifierMap: modifierMap\n};\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n    return hotkeys;\n  };\n  window.hotkeys = hotkeys;\n}\n\nexport { hotkeys as default };\n","<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import { sideBar } from '$lib/components/Org/store';\n  import { apps } from '$lib/components/Apps/store';\n  import { globalStore } from '$lib/utils/store/app';\n  import APPS_CONSTANTS from '$lib/components/Apps/constants';\n  import hotkeys from 'hotkeys-js';\n\n  function handleClose() {\n    $apps.selectedApp = undefined;\n    if ($globalStore.isStudent) {\n      $apps.open = false;\n    }\n  }\n\n  function handleAppClick(appName?: string) {\n    if (appName === $apps.selectedApp) {\n      handleClose();\n    } else {\n      $apps.selectedApp = appName;\n    }\n    $apps.open = true;\n    $apps.dropdown = !$apps.dropdown;\n  }\n\n  function toggleSidebar() {\n    $sideBar.hidden = !$sideBar.hidden;\n  }\n\n  onMount(() => {\n    hotkeys('ctrl+b,command+b,ctrl+1,command+1,ctrl+2,command+2', function (event, handler) {\n      // Prevent default behavior\n      event.preventDefault();\n\n      console.log({ handlerKey: handler.key });\n\n      switch (handler.key) {\n        case 'ctrl+b':\n        case 'command+b':\n          toggleSidebar();\n          break;\n        case 'ctrl+1':\n        case 'command+1':\n          handleAppClick(APPS_CONSTANTS.APPS.COMMENTS);\n          break;\n        case 'ctrl+2':\n        case 'command+2':\n          handleAppClick(APPS_CONSTANTS.APPS.POLL);\n          break;\n      }\n    });\n  });\n</script>\n\n<slot />\n"],"names":["isff","addEvent","object","event","method","useCapture","getMods","modifier","key","mods","i","getKeys","keys","index","compareArray","a1","a2","arr1","arr2","isIndex","_keyMap","_modifier","modifierMap","_mods","_handlers","k","_downKeys","winListendFocus","_scope","elementHasBindEvent","code","x","getKey","getModifier","setScope","scope","getScope","getPressedKeyCodes","getPressedKeyString","c","filter","target","tagName","flag","isPressed","keyCode","deleteScope","newScope","handlers","clearModifier","hotkeys","unbind","keysInfo","info","eachUnbind","_len","args","_key","_ref","_ref$splitKey","splitKey","multipleKeys","originKey","unbindKeys","len","lastKey","record","isMatchingMethod","eventHandler","handler","element","modifiersMatch","y","dispatch","asterisk","keyName","keyNum","e","_i","keyShortcut","_downKeysCurrent","a","isElementBind","option","keyup","keydown","capture","trigger","shortcut","dataList","item","data","_api","_hotkeys","deep","handleClose","set_store_value","apps","$apps","appName","toggleSidebar","sideBar","$sideBar","onMount"],"mappings":"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","x_google_ignoreList":[0]}