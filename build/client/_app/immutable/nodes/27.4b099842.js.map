{"version":3,"file":"27.4b099842.js","sources":["../../../../../../src/routes/lms/community/[slug]/+page.js","../../../../../../src/routes/lms/community/[slug]/+page.svelte"],"sourcesContent":["export const load = ({ params = { slug: '' } }) => {\n  return {\n    slug: params.slug\n  };\n};\n","<script lang=\"ts\">\n  import { goto } from '$app/navigation';\n  import pluralize from 'pluralize';\n  import TrashCanIcon from 'carbon-icons-svelte/lib/TrashCan.svelte';\n  import { Dropdown, SkeletonPlaceholder, SkeletonText } from 'carbon-components-svelte';\n  import ArrowLeftIcon from 'carbon-icons-svelte/lib/ArrowLeft.svelte';\n  import Vote from '$lib/components/Vote/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import Avatar from '$lib/components/Avatar/index.svelte';\n  import IconButton from '$lib/components/IconButton/index.svelte';\n  import CheckmarkOutlineIcon from 'carbon-icons-svelte/lib/CheckmarkOutline.svelte';\n  import { currentOrg, isOrgAdmin } from '$lib/utils/store/org';\n  import { profile } from '$lib/utils/store/user';\n  import { supabase } from '$lib/utils/functions/supabase';\n  import {\n    askCommunityValidation,\n    commentInCommunityValidation\n  } from '$lib/utils/functions/validator';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import DeleteModal from '$lib/components/Org/Community/DeleteModal.svelte';\n  import TextEditor from '$lib/components/TextEditor/index.svelte';\n  import { calDateDiff } from '$lib/utils/functions/date';\n  import { browser } from '$app/environment';\n  import { fetchCourses } from '$lib/utils/services/courses';\n  import { t } from '$lib/utils/functions/translations';\n  import { courses } from '$lib/components/Courses/store';\n  import type { Course } from '$lib/utils/types';\n\n  export let data;\n  const { slug } = data;\n\n  interface Comment {\n    id: string;\n    authorId: string;\n    name: string;\n    avatar: string;\n    votes: number;\n    comment: string;\n    createdAt: string;\n  }\n  interface Question {\n    id: string;\n    title: string;\n    votes: number;\n    author: {\n      id: string;\n      name: string;\n      avatar: string;\n    };\n    body: string;\n    createdAt: string;\n    comments: Comment[];\n    totalComments: number;\n    courseId: string;\n  }\n\n  let question: Question;\n  let comment = '';\n  let errors: {\n    title?: string;\n    courseId?: string;\n  } = {};\n  let isValidAnswer = false; // V2 allow admin mark an answer as accepted\n  let resetInput = 1;\n  let voted: {\n    question: boolean;\n    comment: {\n      [key: string]: boolean;\n    };\n  } = { question: false, comment: {} };\n  let isEditMode = false;\n  let deleteComment = {\n    shouldDelete: false,\n    commentId: '',\n    isDeleting: false\n  };\n  let deleteQuestion = {\n    shouldDelete: false,\n    questionId: '',\n    isDeleting: false\n  };\n  let editContent = {\n    title: '',\n    body: '',\n    courseId: ''\n  };\n\n  let editorInstance = false;\n  let fetchedCourses: Course[] = [];\n\n  function mapResToQuestion(data): Question {\n    return {\n      id: data.id,\n      title: data.title,\n      votes: data.votes,\n      author: {\n        id: data?.author?.id || '',\n        name: data?.author?.fullname || '',\n        avatar: data?.author?.avatar_url || ''\n      },\n      body: data.body,\n      createdAt: calDateDiff(data.created_at),\n      comments: data.comments.map((c) => ({\n        id: c.id,\n        authorId: c.author?.id || '',\n        name: c.author?.fullname || '',\n        avatar: c.author?.avatar_url || '',\n        votes: c.votes,\n        comment: c.body,\n        createdAt: calDateDiff(c.created_at)\n      })),\n      totalComments: 0,\n      courseId: data.course_id\n    };\n  }\n\n  async function getCourses(userId: string | null, orgId: string) {\n    if ($courses.length) {\n      fetchedCourses = [...$courses];\n      return;\n    }\n\n    const coursesResults = await fetchCourses(userId, orgId);\n    fetchedCourses = coursesResults?.allCourses || [];\n  }\n\n  async function fetchCommunityQuestion(slug: string) {\n    if (!slug) return;\n\n    const { data, error } = await supabase\n      .from('community_question')\n      .select(\n        `\n        id,\n        title,\n        body,\n        votes,\n        created_at,\n        course_id,\n        slug,\n        comments:community_answer(\n          id,\n          body,\n          votes,\n          created_at,\n          author:profile(id, fullname, avatar_url)\n        ),\n        author:profile(id, fullname, avatar_url),\n        course!inner (\n          title\n        )\n      `\n      )\n      .eq('slug', slug)\n      .single();\n\n    if (error) {\n      console.error('[LMS] Error loading community', error);\n      return goto(`/lms`);\n    }\n\n    question = mapResToQuestion(data);\n    question.totalComments = question.comments.length;\n  }\n\n  async function submitComment() {\n    errors = commentInCommunityValidation({ comment });\n    console.log('submitComment errors', errors);\n\n    if (Object.keys(errors).length) {\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('community_answer')\n      .insert({\n        id: undefined,\n        body: comment,\n        question_id: question.id,\n        author_profile_id: $profile.id,\n        votes: 0\n      })\n      .select();\n\n    if (error) {\n      console.error('Error: commenting', error);\n      snackbar.error('snackbar.community.error.try_again');\n    } else {\n      console.log('Success: commenting', data);\n\n      snackbar.success('snackbar.community.success.comment_submitted');\n\n      // Add to comment\n      const _c = data?.[0];\n      question.comments = [\n        ...question.comments,\n        {\n          id: _c.id,\n          authorId: $profile.id || '',\n          name: $profile?.fullname || '',\n          avatar: $profile?.avatar_url || '',\n          votes: 0,\n          comment: _c.body,\n          createdAt: calDateDiff(_c.created_at)\n        }\n      ];\n\n      // Reset input\n      comment = '';\n      resetInput = new Date().getTime();\n    }\n  }\n\n  async function upvoteQuestion(type: string, commentId?: string) {\n    const isQuestion = type === 'question';\n\n    if (isQuestion && voted.question) return;\n    if (!isQuestion && commentId && voted.comment[commentId]) return;\n\n    const table = isQuestion ? 'community_question' : 'community_answer';\n    const matchId = isQuestion ? question.id : commentId;\n    let votes = 0;\n\n    if (isQuestion) {\n      question.votes = question.votes + 1;\n      votes = question.votes;\n    } else {\n      question.comments = question.comments.map((c) => {\n        if (c.id === commentId) {\n          c.votes = c.votes + 1;\n          votes = c.votes;\n        }\n        return c;\n      });\n    }\n    const { error } = await supabase.from(table).update({ votes }).match({ id: matchId });\n    if (error) {\n      console.error('Error: upvoteQuestion', error);\n      snackbar.error('snackbar.community.error.try_again');\n    } else {\n      if (isQuestion) {\n        voted.question = true;\n      } else if (commentId) {\n        voted.comment[commentId] = true;\n      }\n    }\n  }\n\n  async function handleQuestionEdit() {\n    if (isEditMode) {\n      errors = askCommunityValidation(editContent);\n      console.log('handleQuestionEdit errors', errors);\n\n      if (Object.keys(errors).length) {\n        return;\n      }\n    }\n\n    isEditMode = !isEditMode;\n    editorInstance = !editorInstance;\n\n    if (!isEditMode) {\n      errors = askCommunityValidation(editContent);\n      console.log('handleQuestionEdit errors', errors);\n\n      if (Object.keys(errors).length) {\n        return;\n      }\n      const { error } = await supabase\n        .from('community_question')\n        .update({\n          title: editContent.title,\n          body: editContent.body,\n          course_id: editContent.courseId\n        })\n        .match({ id: question.id });\n      if (error) {\n        console.error('Error: handleQuestionEdit', error);\n        snackbar.error('snackbar.community.error.try_again');\n      } else {\n        question.title = editContent.title;\n        question.body = editContent.body;\n        question.courseId = editContent.courseId;\n\n        editContent.title = '';\n        editContent.body = '';\n        editContent.courseId = '';\n      }\n    } else {\n      editContent.title = question.title;\n      editContent.body = question.body;\n      editContent.courseId = question.courseId;\n    }\n  }\n\n  async function handleDelete(isQuestion: boolean) {\n    if (!isQuestion) {\n      deleteComment.isDeleting = true;\n\n      const { error } = await supabase\n        .from('community_answer')\n        .delete()\n        .match({ id: deleteComment.commentId });\n\n      deleteComment.isDeleting = false;\n\n      if (error) {\n        snackbar.error('snackbar.community.error.deleting_comments');\n        console.log('Error deleting comments', error);\n        return;\n      }\n      snackbar.success('snackbar.community.success.success_delete');\n\n      question.comments = question.comments.filter((c) => c.id !== deleteComment.commentId);\n      deleteComment.shouldDelete = false;\n      deleteComment.commentId = '';\n\n      // Handle only delete comment\n      return;\n    }\n    deleteQuestion.isDeleting = true;\n\n    const { error: commentDeleteError } = await supabase\n      .from('community_answer')\n      .delete()\n      .match({ question_id: deleteQuestion.questionId });\n\n    if (commentDeleteError) {\n      snackbar.error('snackbar.community.error.deleting_comments');\n      console.log('Error deleting comments', commentDeleteError);\n\n      deleteQuestion.isDeleting = false;\n      return;\n    }\n\n    const { error: questionDeleteError } = await supabase\n      .from('community_question')\n      .delete()\n      .match({ id: deleteQuestion.questionId });\n\n    if (questionDeleteError) {\n      snackbar.error('snackbar.community.error.deleting_question');\n      console.log('Error deleting question', questionDeleteError);\n      return;\n    }\n\n    snackbar.success('snackbar.community.success.success_delete');\n    goto(`/lms/community`);\n    deleteQuestion.isDeleting = false;\n  }\n\n  $: browser && fetchCommunityQuestion(slug);\n  $: {\n    if ($profile.id && $currentOrg.id) {\n      getCourses($profile.id, $currentOrg.id);\n    }\n  }\n</script>\n\n<svelte:head>\n  <title>{question?.title || 'Question'}</title>\n</svelte:head>\n\n<DeleteModal\n  bind:open={deleteQuestion.shouldDelete}\n  bind:isDeleting={deleteQuestion.isDeleting}\n  onCancel={() => {\n    deleteQuestion.shouldDelete = false;\n    deleteQuestion.questionId = '';\n  }}\n  onDelete={() => handleDelete(true)}\n  isQuestion={true}\n/>\n\n<DeleteModal\n  bind:open={deleteComment.shouldDelete}\n  isDeleting={deleteComment.isDeleting}\n  onCancel={() => {\n    deleteComment.shouldDelete = false;\n    deleteComment.commentId = '';\n  }}\n  onDelete={() => handleDelete(false)}\n/>\n<section class=\"max-w-3xl mx-auto md:mx-10 lg:mb-20\">\n  {#if !question}\n    <div class=\"py-10 px-5 mb-3\">\n      <SkeletonText style=\"width: 25%;\" />\n      <SkeletonText style=\"width: 100%; margin-bottom: 2rem\" />\n      <SkeletonPlaceholder style=\"width: 100%; height: 20rem;\" />\n    </div>\n  {:else}\n    <div class=\"py-10 px-5\">\n      <a class=\"text-gray-500 dark:text-white text-md flex items-center\" href={`/lms/community`}>\n        <ArrowLeftIcon size={24} class=\"carbon-icon dark:text-white\" />\n        {$t('community.ask.go_back')}\n      </a>\n      <div class=\"my-5 flex justify-between items-center\">\n        {#if isEditMode}\n          <TextField\n            bind:value={editContent.title}\n            className=\"w-full mr-2\"\n            errorMessage={errors.title}\n          />\n          <Dropdown\n            class=\"w-[25%] h-full\"\n            size=\"xl\"\n            label=\"Select Course\"\n            items={fetchedCourses.map((course) => ({ id: course.id, text: course.title }))}\n            bind:selectedId={editContent.courseId}\n          />\n        {:else}\n          <div class=\"flex items-center\">\n            <Vote\n              value={question.votes}\n              upVote={() => upvoteQuestion('question')}\n              disabled={voted.question}\n            />\n            <h2 class=\"text-3xl\">{question.title}</h2>\n          </div>\n        {/if}\n\n        {#if question.author.id === $profile.id}\n          <PrimaryButton\n            label={isEditMode ? 'Save' : 'Edit'}\n            variant={VARIANTS.OUTLINED}\n            onClick={handleQuestionEdit}\n            className=\"h-fit\"\n          />\n          {#if isEditMode}\n            <PrimaryButton\n              label=\"Cancel\"\n              variant={VARIANTS.TEXT}\n              onClick={() => (isEditMode = !isEditMode)}\n              className=\"py-3 px-6 rounded-sm h-fit\"\n              disablePadding={true}\n            />\n          {/if}\n        {/if}\n      </div>\n      <div class=\"my-1 px-1 rounded-lg border border-1 border-gray\">\n        <header class=\"flex items-center justify-between leading-none p-2\">\n          <div class=\"flex items-center no-underline hover:underline text-black\">\n            <Avatar\n              src={question.author.avatar}\n              name={question.author.name}\n              width=\"w-7\"\n              height=\"h-7\"\n            />\n            <p class=\"dark:text-white ml-2 text-sm\">{question.author.name}</p>\n            <p class=\"dark:text-white ml-2 text-sm text-gray-500\">\n              {question.createdAt}\n            </p>\n          </div>\n          {#if question.author.id === $profile.id || $isOrgAdmin}\n            <IconButton\n              value=\"delete-question\"\n              onClick={() => {\n                deleteQuestion.shouldDelete = true;\n                deleteQuestion.questionId = question.id;\n              }}\n            >\n              <TrashCanIcon size={16} class=\"carbon-icon dark:text-white\" />\n            </IconButton>\n          {/if}\n        </header>\n        {#if isEditMode && editorInstance}\n          <div class=\"my-2\">\n            <TextEditor\n              bind:value={editContent.body}\n              placeholder=\"Give an answer\"\n              onChange={(html) => (editContent.body = html)}\n            />\n          </div>\n        {:else}\n          <section class=\"prose prose-sm sm:prose p-2\">\n            {@html question.body}\n          </section>\n        {/if}\n      </div>\n\n      <div class=\"my-8 font-bold\">\n        {pluralize($t('community.answers'), question.totalComments, true)}\n      </div>\n\n      {#each question.comments as comment}\n        <div class=\"my-5 px-1 flex items-start\">\n          <Vote\n            value={comment.votes}\n            upVote={() => upvoteQuestion('comment', comment.id)}\n            disabled={voted.comment[comment.id]}\n          />\n          <div class=\"w-full rounded-lg border border-1 border-gray\">\n            <header class=\"flex items-center justify-between leading-none p-2\">\n              <div class=\"flex items-center text-black\">\n                <Avatar src={comment.avatar} name={comment.name} width=\"w-7\" height=\"h-7\" />\n                <p class=\"dark:text-white ml-2 text-sm\">{comment.name}</p>\n                <p class=\"dark:text-white ml-2 text-sm text-gray-500\">\n                  {comment.createdAt}\n                </p>\n              </div>\n\n              {#if isValidAnswer}\n                <CheckmarkOutlineIcon size={20} />\n              {/if}\n\n              {#if comment.authorId === $profile.id || $isOrgAdmin}\n                <IconButton\n                  value=\"delete-comment\"\n                  onClick={() => {\n                    deleteComment.shouldDelete = true;\n                    deleteComment.commentId = comment.id;\n                  }}\n                >\n                  <TrashCanIcon size={16} class=\"carbon-icon dark:text-white\" />\n                </IconButton>\n              {/if}\n            </header>\n            <article class=\"prose prose-sm sm:prose p-2\">\n              {@html comment.comment}\n            </article>\n          </div>\n        </div>\n      {/each}\n\n      <hr />\n\n      <div>\n        {#if !editorInstance}\n          <TextEditor\n            bind:value={comment}\n            placeholder=\"Give an answer\"\n            onChange={(html) => (comment = html)}\n          />\n        {/if}\n\n        <div class=\"flex justify-end mr-2\">\n          <PrimaryButton label=\"Comment\" onClick={submitComment} />\n        </div>\n      </div>\n    </div>\n  {/if}\n</section>\n"],"names":["load","params","t1_value","ctx","t8_value","if_block1","create_if_block_6","each_value","ensure_array_like","current","dirty","set_data","t1","t8","vote_changes","textfield_props","func_4","dropdown_props","textfield_changes","dropdown_changes","VARIANTS","raw_value","html_tag","texteditor_props","texteditor_changes","t2_value","t4_value","create_if_block_2","avatar_changes","t2","t4","deletemodal0_props","deletemodal1_props","deletemodal0_changes","deletemodal1_changes","data","$$props","question","errors","voted","deleteComment","deleteQuestion","editContent","fetchedCourses","data2","c","getCourses","userId","orgId","$$invalidate","$courses","coursesResults","slug","error","supabase","goto","mapResToQuestion","submitComment","commentInCommunityValidation","comment","$profile","snackbar","_c","upvoteQuestion","type","commentId","isQuestion","table","votes","matchId","handleQuestionEdit","isEditMode","askCommunityValidation","commentDeleteError","questionDeleteError","func_1","handleDelete","$$self","value","func_3","func_5","func_6","func_8","html","func_9","$currentOrg"],"mappings":"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"}