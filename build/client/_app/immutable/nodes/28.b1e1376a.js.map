{"version":3,"file":"28.b1e1376a.js","sources":["../../../../../../src/lib/utils/services/lms/exercises.ts","../../../../../../src/routes/lms/exercises/+page.svelte"],"sourcesContent":["import { supabase } from '$lib/utils/functions/supabase';\nimport type { PostgrestError } from '@supabase/supabase-js';\n\nexport interface LMSExercise {\n  id: string;\n  title: string;\n  updated_at: string;\n  questions: {\n    points: number;\n  }[];\n  submission: {\n    status_id: number;\n    updated_at: string;\n    total: number;\n    groupmember: {\n      id: string;\n      profile: {\n        id: string;\n      }[];\n    }[];\n  }[];\n  lesson: {\n    id: string;\n    title: string;\n    order: number;\n    course: {\n      id: string;\n      title: string;\n      group: {\n        organisation: {\n          id: string;\n        }[];\n      }[];\n      groupmember: {\n        id: string;\n        profile: {\n          id: string;\n        }[];\n      }[];\n    };\n  };\n}\n\ninterface FetchLMSExercisesResponse {\n  exercises: LMSExercise[] | null;\n  error: PostgrestError | null;\n}\n\nexport async function fetchLMSExercises(\n  profileId: string,\n  orgId: string\n): Promise<FetchLMSExercisesResponse> {\n  const { data, error } = await supabase\n    .from('exercise')\n    .select(\n      `\n      id,\n      title,\n      updated_at,\n      questions:question(points),\n      submission (\n        status_id,\n        updated_at,\n        total,\n        groupmember:submitted_by!inner (\n          id,\n          profile:profile_id!inner (\n            id\n          )\n        )\n      ),\n      lesson!inner (\n        id,\n        title,\n        order,\n        is_unlocked,\n        course!inner (\n          id,\n          title,\n          group:group_id!inner (\n            organisation:organization_id!inner (\n              id\n            ),\n            groupmember!inner(\n              id,\n              profile:profile_id!inner (\n                id\n              )\n            )\n          )\n        )\n      )\n    `\n    )\n    .eq('lesson.is_unlocked', true)\n    .eq('lesson.course.group.organisation.id', orgId)\n    .eq('lesson.course.group.groupmember.profile.id', profileId)\n    .eq('submission.groupmember.profile.id', profileId);\n\n  return {\n    exercises: data as LMSExercise[] | null,\n    error\n  };\n}\n","<script lang=\"ts\">\n  import cloneDeep from 'lodash/cloneDeep';\n  import Chip from '$lib/components/Chip/index.svelte';\n  import { profile } from '$lib/utils/store/user';\n  import { browser } from '$app/environment';\n  import { currentOrg } from '$lib/utils/store/org';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import { fetchLMSExercises } from '$lib/utils/services/lms/exercises';\n  import type { LMSExercise } from '$lib/utils/services/lms/exercises';\n  import { calDateDiff } from '$lib/utils/functions/date';\n  import { t } from '$lib/utils/functions/translations';\n\n  const defaultSections = [\n    {\n      id: 0,\n      title: $t('exercises.not_submitted'),\n      items: [],\n      className: 'text-[#E35353] bg-[#FDDFE4]'\n    },\n    {\n      id: 1,\n      title: $t('exercises.submitted'),\n      items: [],\n      className: 'text-orange-700 bg-orange-200'\n    },\n    {\n      id: 2,\n      title: $t('exercises.in_progress'),\n      items: [],\n      className: 'text-yellow-700 bg-yellow-200'\n    },\n    {\n      id: 3,\n      title: $t('exercises.graded'),\n      value: 0,\n      items: [],\n      className: 'text-green-700 bg-green-200'\n    }\n  ];\n  let sections: Section[] = cloneDeep(defaultSections);\n  interface Section {\n    id: number;\n    title: string;\n    className: string;\n    items: ExerciseItem[];\n  }\n\n  interface ExerciseItem {\n    courseTitle: string;\n    courseURL: string;\n    exerciseId: string;\n    exerciseTitle: string;\n    exerciseURL: string;\n    grade: string;\n    lessonNo: string;\n    lessonTitle: string;\n    lessonURL: string;\n    submissionStatus: number;\n    submissionUpdatedAt: string;\n  }\n\n  function generateSections(exercises: LMSExercise[]): Section[] {\n    const _sections: Section[] = cloneDeep(defaultSections);\n\n    for (const exercise of exercises) {\n      const { id, title, updated_at, submission, lesson, questions } = exercise;\n\n      const submissionItem = submission[0] || {\n        status_id: 0,\n        updated_at,\n        total: 0\n      };\n\n      const courseURL = `/courses/${lesson.course.id}`;\n      const lessonURL = `${courseURL}/lessons/${lesson.id}`;\n      const exerciseURL = `${lessonURL}/exercises/${id}`;\n\n      const grade = `${submissionItem.total}/${questions.reduce(\n        (acc, cur) => (acc += cur.points),\n        0\n      )}`;\n\n      const item: ExerciseItem = {\n        exerciseId: id,\n        courseTitle: lesson.course.title,\n        courseURL,\n        exerciseTitle: title,\n        exerciseURL,\n        lessonTitle: lesson.title,\n        lessonNo: lesson.order < 9 ? '0' + (lesson.order + 1) : `${lesson.order}`,\n        lessonURL,\n        submissionStatus: submissionItem.status_id,\n        submissionUpdatedAt: calDateDiff(submissionItem.updated_at),\n        grade\n      };\n\n      _sections[submissionItem.status_id].items.push(item);\n    }\n\n    return _sections;\n  }\n\n  async function fetchData(profileId: string, orgId: string) {\n    const { exercises, error } = await fetchLMSExercises(profileId, orgId);\n    console.log('exercises', exercises);\n    console.log('error', error);\n\n    if (error) {\n      snackbar.error('snackbar.exercise.error_fetching');\n      return;\n    }\n\n    if (!exercises) return;\n\n    sections = generateSections(exercises);\n    console.log('sections', sections);\n  }\n\n  $: if (browser && $profile.id && $currentOrg.id) {\n    fetchData($profile.id, $currentOrg.id);\n  }\n</script>\n\n<section class=\"w-full max-w-6xl mx-auto\">\n  <div class=\"p-5\">\n    <div class=\"flex items-center justify-between mb-10\">\n      <h1 class=\"dark:text-white text-3xl font-bold\">{$t('exercises.heading')}</h1>\n    </div>\n\n    <div>\n      <div class=\"flex items-center w-full\">\n        {#each sections as { title, items, className, id }}\n          <div\n            class=\"min-w-[355px] max-w-[355px] h-[70vh] rounded-md bg-gray-100 dark:bg-black border border-gray-50 dark:border-neutral-700 p-3 mr-3 overflow-hidden\"\n          >\n            <div class=\"flex items-center mb-2 gap-2\">\n              <p class=\"dark:text-white ml-2 font-bold\">{title}</p>\n              <Chip value={items.length} {className} />\n            </div>\n            <div class=\"pr-2 h-full overflow-y-auto pb-3\">\n              {#each items as item}\n                <div class=\" w-full my-2 mx-0 rounded-md bg-white dark:bg-neutral-800 py-3 px-3\">\n                  <a\n                    class=\"flex w-full items-center cursor-pointer text-primary-600 mb-2\"\n                    href={item.courseURL}\n                  >\n                    <p class=\"text-xs\">{item.courseTitle}</p>\n                  </a>\n                  <a class=\"text-black dark:text-white text-md font-bold\" href={item.exerciseURL}>\n                    {#if id === 3}\n                      ({item.grade}) -\n                    {/if}\n                    {item.exerciseTitle}\n                  </a>\n                  <a\n                    class=\"flex items-center no-underline hover:underline text-black my-2 w-fit\"\n                    href={item.lessonURL}\n                  >\n                    <p class=\"dark:text-white text-grey text-sm\">\n                      {$t('exercises.lesson')} <span class=\"italic\">{item.lessonTitle}</span>\n                    </p>\n                  </a>\n                  <p class=\"dark:text-white text-gray-500 text-xs\">\n                    {item.submissionUpdatedAt}\n                  </p>\n                </div>\n              {/each}\n            </div>\n          </div>\n        {/each}\n      </div>\n    </div>\n  </div>\n</section>\n"],"names":["fetchLMSExercises","profileId","orgId","data","error","supabase","t1_value","ctx","dirty","set_data","t1","t0_value","t3_value","t5_value","t7_value","t9_value","if_block","create_if_block","attr","a0","a0_href_value","a1","a1_href_value","a2","a2_href_value","t0","t3","t5","t7","t9","chip_changes","current","defaultSections","$t","sections","cloneDeep","_sections","id","title","updated_at","submission","lesson","questions","exercise","submissionItem","item","courseURL","exerciseURL","lessonURL","grade","fetchData","snackbar","exercises","$$invalidate","generateSections"],"mappings":"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"}