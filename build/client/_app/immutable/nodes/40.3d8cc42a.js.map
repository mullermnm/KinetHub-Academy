{"version":3,"file":"40.3d8cc42a.js","sources":["../../../../../../src/routes/org/[slug]/courses/+page.js","../../../../../../src/lib/components/Courses/functions.js","../../../../../../src/lib/components/Courses/components/NewCourseModal/index.svelte","../../../../../../src/routes/org/[slug]/courses/+page.svelte"],"sourcesContent":["export const load = () => {\n  return {\n    cantFetch: true\n  };\n};\n","import { validateEmail } from '$lib/utils/functions/validateEmail';\n\nexport function validateForm(fields) {\n  let hasError = false;\n  const { title, description } = fields;\n  const fieldErrors = {\n    title: '',\n    description: ''\n  };\n\n  if (!title) {\n    fieldErrors.title = 'Title is required';\n    hasError = true;\n  }\n\n  if (!description) {\n    fieldErrors.description = 'Description is required';\n    hasError = true;\n  }\n\n  return {\n    hasError,\n    fieldErrors\n  };\n}\n","<script lang=\"ts\">\n  import { page } from '$app/stores';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import Modal from '$lib/components/Modal/index.svelte';\n  import CheckmarkFilledIcon from 'carbon-icons-svelte/lib/CheckmarkFilled.svelte';\n  import CheckmarkOutlineIcon from 'carbon-icons-svelte/lib/CheckmarkOutline.svelte';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import TextArea from '$lib/components/Form/TextArea.svelte';\n  import { courses, createCourseModal } from '$lib/components/Courses/store';\n  import { validateForm } from '$lib/components/Courses/functions';\n  import { ROLE } from '$lib/utils/constants/roles';\n  import { addGroupMember, addDefaultNewsFeed } from '$lib/utils/services/courses';\n  import { supabase } from '$lib/utils/functions/supabase';\n  import { profile } from '$lib/utils/store/user';\n  import { currentOrg } from '$lib/utils/store/org';\n  import { goto } from '$app/navigation';\n  import { capturePosthogEvent } from '$lib/utils/services/posthog';\n  import { t } from '$lib/utils/functions/translations';\n  import { COURSE_TYPE, COURSE_VERSION } from '$lib/utils/types';\n  import ComingSoon from '$lib/components/ComingSoon/index.svelte';\n\n  let isLoading = false;\n  let errors = {\n    title: '',\n    description: ''\n  };\n  let step = 0;\n\n  const options = [\n    {\n      title: 'Live Class',\n      subtitle:\n        'This course type is ideal for bootcamps where lessons are time based and you need attendance and grading',\n      type: COURSE_TYPE.LIVE_CLASS,\n      isDisabled: false\n    },\n    {\n      title: 'Self Paced',\n      subtitle:\n        'This course type is ideal for courses where students can take lessons on their own pace without a teacher',\n      type: COURSE_TYPE.SELF_PACED,\n      isDisabled: false\n    }\n  ];\n  let type = options[0].type;\n\n  function onClose(redirectTo) {\n    goto(redirectTo);\n\n    createCourseModal.update(() => ({\n      title: '',\n      description: '',\n      type: '',\n      emails: '',\n      tutors: '',\n      students: ''\n    }));\n  }\n\n  async function createCourse() {\n    isLoading = true;\n    const { hasError, fieldErrors } = validateForm($createCourseModal);\n\n    errors = fieldErrors;\n    if (hasError) return;\n\n    const { title, description } = $createCourseModal;\n    // 1. Create group\n    const { data: newGroup } = await supabase\n      .from('group')\n      .insert({ name: title, description, organization_id: $currentOrg.id })\n      .select();\n\n    console.log(`newGroup`, newGroup);\n\n    if (!newGroup) return;\n\n    const { id: group_id } = newGroup[0];\n\n    // 2. Create course with group_id\n    const { data: newCourseData } = await supabase\n      .from('course')\n      .insert({\n        title,\n        description,\n        type: type,\n        version: COURSE_VERSION.V2,\n        group_id\n      })\n      .select();\n    console.log(`newCourse data`, newCourseData);\n\n    if (!newCourseData) return;\n\n    const newCourse = newCourseData[0];\n    courses.update((_courses) => [..._courses, newCourse]);\n\n    capturePosthogEvent('course_created', {\n      course_id: newCourse.id,\n      course_title: newCourse.title,\n      course_description: newCourse.description,\n      organization_id: $currentOrg.id,\n      organization_name: $currentOrg.name,\n      user_id: $profile.id,\n      user_email: $profile.email\n    });\n\n    // 3. Add group members\n    const { data } = await addGroupMember({\n      profile_id: $profile.id,\n      email: $profile.email,\n      group_id,\n      role_id: ROLE.TUTOR\n    });\n\n    // 4. Add default news feed.\n    if (Array.isArray(data) && data.length) {\n      const { id: authorId } = data[0];\n      console.log('Add news feed into course');\n\n      await addDefaultNewsFeed({\n        content: `<h2>Welcome to this course ðŸŽ‰&nbsp;</h2>\n<p>Thank you for joining this course and I hope you get the best out of it.</p>`,\n        course_id: newCourse.id,\n        is_pinned: true,\n        author_id: authorId\n      });\n    }\n\n    onClose(`/courses/${newCourse.id}`);\n    isLoading = false;\n  }\n\n  $: open = new URLSearchParams($page.url.search).get('create') === 'true';\n</script>\n\n<svelte:head>\n  <title>Create a new course</title>\n</svelte:head>\n\n<Modal\n  onClose={() => onClose($page.url.pathname)}\n  bind:open\n  width=\"w-4/5 md:w-2/5 md:min-w-[600px]\"\n  modalHeading={$t('courses.new_course_modal.heading')}\n>\n  {#if step === 0}\n    <div>\n      <h2 class=\"text-xl font-medium my-5\">\n        {$t('courses.new_course_modal.type_selector_title')}\n      </h2>\n\n      <div class=\"flex flex-col md:flex-row gap-2 justify-between items-center my-8\">\n        {#each options as option}\n          <button\n            class=\"w-11/12 md:w-[261px] md:h-[240px] p-5 rounded-md dark:bg-neutral-700 border-2 {option.type ===\n            type\n              ? 'border-primary-400'\n              : `border-gray-200 dark:border-neutral-600 ${\n                  !option.isDisabled && 'hover:scale-95'\n                }`} flex flex-col {option.isDisabled &&\n              'cursor-not-allowed opacity-60'} transition-all ease-in-out\"\n            type=\"button\"\n            on:click={!option.isDisabled ? () => (type = option.type) : undefined}\n          >\n            <div class=\"w-full flex flex-row-reverse h-[70%]\">\n              {#if option.type === type}\n                <CheckmarkFilledIcon\n                  size={16}\n                  class=\"carbon-icon text-primary-600 dark:text-primary-200\"\n                />\n              {:else if !option.isDisabled}\n                <CheckmarkOutlineIcon size={16} class=\"carbon-icon\" />\n              {/if}\n            </div>\n\n            <div>\n              <p class=\"font-bold text-start flex items-center\">\n                <span class=\"mr-2 text-sm\">{option.title}</span>\n                {#if option.isDisabled}\n                  <ComingSoon />\n                {/if}\n              </p>\n              <p class=\"text-xs font-light text-start\">{option.subtitle}</p>\n            </div>\n          </button>\n        {/each}\n      </div>\n\n      <div class=\"mt-8 flex items-center flex-row-reverse\">\n        <PrimaryButton\n          className=\"px-6 py-3\"\n          label={$t('courses.new_course_modal.next')}\n          onClick={() => (step = 1)}\n          isDisabled={!type}\n        />\n      </div>\n    </div>\n  {:else}\n    <form on:submit|preventDefault={createCourse}>\n      <div class=\"flex items-end space-x-2 mb-4\">\n        <TextField\n          label={$t('courses.new_course_modal.course_name')}\n          bind:value={$createCourseModal.title}\n          placeholder={$t('courses.new_course_modal.course_name_placeholder')}\n          className=\"w-full \"\n          isRequired={true}\n          errorMessage={errors.title}\n          autoComplete={false}\n        />\n      </div>\n\n      <TextArea\n        label={$t('courses.new_course_modal.short_description')}\n        bind:value={$createCourseModal.description}\n        rows={4}\n        placeholder={$t('courses.new_course_modal.short_description_placeholder')}\n        className=\"mb-4\"\n        isRequired={true}\n        errorMessage={errors.description}\n        isAIEnabled={true}\n        initAIPrompt=\"Write a 30 word description for a course titled: {$createCourseModal.title}\"\n      />\n\n      <div class=\"mt-5 flex items-center justify-between\">\n        <PrimaryButton\n          className=\"px-6 py-3\"\n          label={$t('courses.new_course_modal.back')}\n          variant={VARIANTS.OUTLINED}\n          onClick={() => (step = 0)}\n        />\n        <PrimaryButton\n          className=\"px-6 py-3\"\n          label={$t('courses.new_course_modal.button')}\n          type=\"submit\"\n          isDisabled={isLoading}\n          {isLoading}\n        />\n      </div>\n    </form>\n  {/if}\n</Modal>\n","<script lang=\"ts\">\n  import { Search, Dropdown } from 'carbon-components-svelte';\n  import { profile } from '$lib/utils/store/user';\n  import { fetchCourses } from '$lib/utils/services/courses';\n  import Courses from '$lib/components/Courses/index.svelte';\n  import NewCourseModal from '$lib/components/Courses/components/NewCourseModal/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { courses, courseMetaDeta } from '$lib/components/Courses/store';\n  import { currentOrg, currentOrgPath } from '$lib/utils/store/org';\n  import { Add } from 'carbon-icons-svelte';\n  import { isMobile } from '$lib/utils/store/useMobile';\n  import { isOrgAdmin } from '$lib/utils/store/org';\n  import type { Course } from '$lib/utils/types';\n  import { browser } from '$app/environment';\n  import { t } from '$lib/utils/functions/translations';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import IconButton from '$lib/components/IconButton/index.svelte';\n  import Grid from 'carbon-icons-svelte/lib/Grid.svelte';\n  import List from 'carbon-icons-svelte/lib/List.svelte';\n  import { onMount } from 'svelte';\n  import { goto } from '$app/navigation';\n\n  export let data;\n\n  let { cantFetch } = data;\n  let searchValue = '';\n  let selectedId: string;\n  let filteredCourses: Course[];\n  let hasFetched = false;\n\n  async function getCourses(userId: string | undefined, orgId: string) {\n    if (cantFetch && typeof cantFetch === 'boolean' && orgId && !hasFetched) {\n      // only show is loading when fetching for the first time\n      if (!$courses.length) {\n        $courseMetaDeta.isLoading = true;\n      }\n\n      const coursesResult = await fetchCourses(userId, orgId);\n      console.log(`coursesResult`, coursesResult);\n\n      $courseMetaDeta.isLoading = false;\n      if (!coursesResult) return;\n\n      // organizationId = coursesResult.organizationId;\n      courses.set(coursesResult.allCourses);\n      hasFetched = true;\n    }\n  }\n\n  function filterCourses(searchValue: string, _selectedId: string, courses: Course[]) {\n    if (browser) {\n      if (!selectedId) {\n        selectedId = localStorage.getItem('classroomio_filter_course_key') || '0';\n      } else {\n        localStorage.setItem('classroomio_filter_course_key', _selectedId);\n      }\n    }\n\n    filteredCourses = courses.filter((course) => {\n      if (!searchValue || course.title.toLowerCase().includes(searchValue.toLowerCase())) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (_selectedId === '0') {\n      filteredCourses = filteredCourses.sort(\n        (a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n      );\n    } else if (_selectedId === '1') {\n      filteredCourses = filteredCourses.sort((a, b) => b.is_published - a.is_published);\n    } else if (_selectedId === '2') {\n      filteredCourses = filteredCourses.sort((a, b) => b.total_lessons - a.total_lessons);\n    }\n  }\n\n  const setViewPreference = (preference: 'grid' | 'list') => {\n    $courseMetaDeta.view = preference;\n    localStorage.setItem('courseView', preference);\n  };\n\n  const openNewCourseModal = () => {\n    goto($currentOrgPath + '/courses?create=true');\n  };\n\n  onMount(() => {\n    const courseView = localStorage.getItem('courseView') as 'grid' | 'list' | null;\n\n    if (courseView) {\n      $courseMetaDeta.view = courseView;\n    }\n  });\n\n  $: filterCourses(searchValue, selectedId, $courses);\n  $: getCourses($profile.id, $currentOrg.id);\n</script>\n\n<svelte:head>\n  <title>Courses - KinetsHub</title>\n</svelte:head>\n\n<section class=\"w-full md:max-w-6xl md:mx-auto\">\n  <div class=\"py-2 md:py-10 px-2 md:px-5\">\n    <div class=\"flex items-center justify-between mb-5\">\n      <h1 class=\"dark:text-white text-2xl md:text-3xl font-bold\">{$t('courses.heading')}</h1>\n      {#if $isMobile}\n        <PrimaryButton isDisabled={!$isOrgAdmin} onClick={openNewCourseModal}>\n          <Add size={24} />\n        </PrimaryButton>\n      {:else}\n        <PrimaryButton\n          label={$t('courses.heading_button')}\n          variant={VARIANTS.CONTAINED_DARK}\n          isDisabled={!$isOrgAdmin}\n          onClick={openNewCourseModal}\n        />\n      {/if}\n    </div>\n    <div class=\"flex flex-row-reverse mb-5\">\n      <div class=\"filter-containter flex items-end justify-start\">\n        <Search\n          placeholder={$t('courses.search_placeholder')}\n          bind:value={searchValue}\n          searchClass=\"mr-2\"\n          class=\" bg-gray-100 dark:bg-neutral-800\"\n        />\n        <Dropdown\n          class=\"h-full min-w-[150px]\"\n          bind:selectedId\n          items={[\n            { id: '0', text: $t('courses.course_filter.date_created') },\n            { id: '1', text: $t('courses.course_filter.published') },\n            { id: '2', text: $t('courses.course_filter.lessons') }\n          ]}\n        />\n        {#if $courseMetaDeta.view === 'list'}\n          <IconButton onClick={() => setViewPreference('grid')}>\n            <Grid size={24} />\n          </IconButton>\n        {:else}\n          <IconButton onClick={() => setViewPreference('list')}>\n            <List size={24} />\n          </IconButton>\n        {/if}\n      </div>\n    </div>\n\n    <NewCourseModal />\n    <Courses bind:courses={filteredCourses} />\n  </div>\n</section>\n\n<style>\n  .filter-containter :global(.bx--dropdown) {\n    max-height: unset;\n    height: 100%;\n  }\n</style>\n"],"names":["load","validateForm","fields","hasError","title","description","fieldErrors","ctx","textfield_props","textarea_props","VARIANTS","dirty","textfield_changes","textarea_changes","primarybutton0_changes","primarybutton1_changes","t0_value","current","set_data","t0","primarybutton_changes","t1_value","t4_value","if_block1","create_if_block_1$1","is_function","modal_changes","options","COURSE_TYPE","goto","redirectTo","createCourse","$createCourseModal","newGroup","supabase","$currentOrg","newCourseData","type","COURSE_VERSION","group_id","newCourse","$profile","ROLE","addDefaultNewsFeed","onClose","func","$$invalidate","step","$$self","value","func_1","func_2","$page","t1","search_changes","data","$$props","selectedId","filteredCourses","getCourses","userId","orgId","set_store_value","courseMetaDeta","$courseMetaDeta","coursesResult","filterCourses","searchValue2","_selectedId","courses2","course","searchValue","a","b","preference","openNewCourseModal","$currentOrgPath","onMount","courseView","setViewPreference"],"mappings":"4gEAAA,MAAAA,GAAA,KACA,CACA,UAAA,EACA,yGCDA,SAAAC,GAAAC,EAAA,CACA,IAAAC,EAAA,GACA,KAAA,CAAA,MAAAC,EAAA,YAAAC,CAAA,EAAAH,EACAI,EAAA,CACA,MAAA,GACA,YAAA,EACA,EAEA,OAAAF,IACAE,EAAA,MAAA,oBACAH,EAAA,IAGAE,IACAC,EAAA,YAAA,0BACAH,EAAA,IAGA,CACA,SAAAA,EACA,YAAAG,CACA,CACA,yICmLiB,MAAAC,EAAA,CAAA,EAAA,sCAAA,EAEM,YAAAA,EAAA,CAAA,EAAA,kDAAA,oCAGC,aAAAA,EAAA,CAAA,EAAA,uBAJFA,EAAA,CAAA,EAAA,QAAA,SAAAC,EAAA,MAAAD,EAAA,CAAA,EAAA,sFAUP,MAAAA,EAAA,CAAA,EAAA,4CAAA,SAGM,YAAAA,EAAA,CAAA,EAAA,wDAAA,iCAGC,aAAAA,EAAA,CAAA,EAAA,2BAEkD,aAAA,oDAAAA,EAAA,CAAA,EAAA,OAPpD,OAAAA,EAAA,CAAA,EAAA,cAAA,SAAAE,EAAA,MAAAF,EAAA,CAAA,EAAA,qGAaH,MAAAA,EAAA,CAAA,EAAA,+BAAA,EACE,QAAAG,GAAA,iEAKF,MAAAH,EAAA,CAAA,EAAA,iCAAA,0rBA/BAI,EAAA,MAAAC,EAAA,MAAAL,EAAA,CAAA,EAAA,sCAAA,GAEMI,EAAA,MAAAC,EAAA,YAAAL,EAAA,CAAA,EAAA,kDAAA,GAGCI,EAAA,IAAAC,EAAA,aAAAL,EAAA,CAAA,EAAA,uBAJFK,EAAA,MAAAL,EAAA,CAAA,EAAA,yCAUPI,EAAA,MAAAE,EAAA,MAAAN,EAAA,CAAA,EAAA,4CAAA,GAGMI,EAAA,MAAAE,EAAA,YAAAN,EAAA,CAAA,EAAA,wDAAA,GAGCI,EAAA,IAAAE,EAAA,aAAAN,EAAA,CAAA,EAAA,aAEkDI,EAAA,KAAAE,EAAA,aAAA,oDAAAN,EAAA,CAAA,EAAA,uBAPpDM,EAAA,MAAAN,EAAA,CAAA,EAAA,+CAaHI,EAAA,MAAAG,EAAA,MAAAP,EAAA,CAAA,EAAA,+BAAA,+CAMAI,EAAA,MAAAI,EAAA,MAAAR,EAAA,CAAA,EAAA,iCAAA,qTApFRS,EAAAT,EAAA,CAAA,EAAA,8CAAA,EAAA,qKA2CQ,MAAAA,EAAA,CAAA,EAAA,+BAAA,4vBA3CR,CAAAU,GAAAN,EAAA,MAAAK,KAAAA,EAAAT,EAAA,CAAA,EAAA,8CAAA,EAAA,KAAAW,GAAAC,EAAAH,CAAA,0MA2CQL,EAAA,MAAAS,EAAA,MAAAb,EAAA,CAAA,EAAA,+BAAA,48BAd2Bc,EAAAd,EAAA,EAAA,EAAA,MAAA,WAKYe,EAAAf,EAAA,EAAA,EAAA,SAAA,+EAZ/BA,EAAA,EAAA,EAAA,cAAA,8BAQJ,IAAAgB,EAAAhB,EAAA,EAAA,EAAA,YAAAiB,GAAA,otCAhBEC,GAAAlB,EAAA,EAAA,EAAA,gtBAjBhB,OAAAA,EAAA,CAAA,IAAA,EAAA,4aAFS,aAAAA,EAAA,CAAA,EAAA,kCAAA,8WAAAI,EAAA,MAAAe,EAAA,aAAAnB,EAAA,CAAA,EAAA,kCAAA,wWApHR,MAAAoB,EAAA,yIAKF,KAAAC,GAAA,mKAOA,KAAAA,GAAA,yDAOFC,GAAAC,CAAA,qFAYa,eAAAC,GAAA,iDAKT,YAAA5B,EAAA,OAEI,KAAA,CAAA,MAAAC,EAAA,YAAAC,CAAA,EAAA2B,EAEA,CAAA,KAAAC,CAAA,EAAA,MAAAC,GAAA,KAAA,OAAA,EAAA,OAAA,QAEiB,YAAA7B,EAAa,gBAAA8B,EAAA,EACnC,CAAA,EAAA,OAAA,EAIE,GAFL,QAAA,IAAA,WAAAF,CAAA,EAEK,CAAAA,EAAA,wBAKG,CAAA,KAAAG,CAAA,EAAA,MAAAF,GAAA,KAAA,QAAA,EAAA,OAAA,CAGJ,MAAA9B,EACA,YAAAC,EACA,KAAAgC,EACA,QAAAC,GAAA,GACA,SAAAC,CAED,CAAA,EAAA,OAAA,EAGE,GAFL,QAAA,IAAA,iBAAAH,CAAA,EAEK,CAAAA,EAAA,OAEC,MAAAI,EAAAJ,EAAA,CAAA,8CAIJ,UAAAI,EAAA,GACA,aAAAA,EAAA,MACA,mBAAAA,EAAA,YACA,gBAAAL,EAAA,GACA,kBAAAA,EAAA,KACA,QAAAM,EAAA,GACA,WAAAA,EAAA,gCAKA,WAAAA,EAAA,GACA,MAAAA,EAAA,MACA,SAAAF,EACA,QAAAG,GAAA,wDAMA,QAAA,IAAA,2BAAA,EAEM,MAAAC,GAAA,CACJ,QAAA;AAAA,iFAEA,UAAAH,EAAA,8BAMJI,EAAA,YAAAJ,EAAA,EAAA,EAAA,qCAgEsBK,EAAA,IAAAC,EAAA,EAAAC,EAAA,CAAA,gBAUJC,EAAA,GAAA,UAAAhB,EAAA,MAAAiB,CAAA,IAAAjB,EAAA,MAAAiB,2BAWFD,EAAA,GAAA,UAAAhB,EAAA,YAAAiB,CAAA,IAAAjB,EAAA,YAAAiB,aAeM,MAAAC,EAAA,IAAAJ,EAAA,EAAAC,EAAA,CAAA,EAxFTI,EAAA,IAAAP,EAAAQ,EAAA,IAAA,QAAA,iSC9BA,MAAA7C,EAAA,CAAA,EAAA,wBAAA,EACE,QAAAG,GAAA,wIADFC,EAAA,KAAAS,EAAA,MAAAb,EAAA,CAAA,EAAA,wBAAA,4vDAPiDc,EAAAd,EAAA,CAAA,EAAA,iBAAA,EAAA,sJAiB3C,YAAAA,EAAA,CAAA,EAAA,4BAAA,mNAST,GAAA,sDACA,GAAA,mDACA,GAAA,woDA5BoD,CAAAU,GAAAN,EAAA,KAAAU,KAAAA,EAAAd,EAAA,CAAA,EAAA,iBAAA,EAAA,KAAAW,GAAAmC,EAAAhC,CAAA,sJAiB3CV,EAAA,KAAA2C,EAAA,YAAA/C,EAAA,CAAA,EAAA,4BAAA,mFAST,GAAA,sDACA,GAAA,mDACA,GAAA,ywBA/GD,GAAA,CAAA,KAAAgD,CAAA,EAAAC,uBAIPC,EACAC,OAGW,eAAAC,EAAAC,EAAAC,EAAA,6CAITC,GAAAC,GAAAC,EAAA,UAAA,GAAAA,CAAA,wBAOG,GAHL,QAAA,IAAA,gBAAAC,CAAA,EAEAH,GAAAC,GAAAC,EAAA,UAAA,GAAAA,CAAA,EACK,CAAAC,EAAA,kCAQA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA,CAEAZ,4HAOPX,EAAA,EAAAY,EAAAW,EAAA,OAAAC,GACOC,IAAAA,GAAAA,EAAAA,MAAAA,YAAAA,EAAAA,SAAAA,EAAAA,YAAAA,CAAAA,aAQLzB,EAAA,EAAAY,EAAAA,EAAA,KAAA,CAAAc,EAAAC,IAAA,IAAA,KAAAD,EAAA,UAAA,EAAA,QAAA,EAAA,IAAA,KAAAC,EAAA,UAAA,EAAA,QAAA,CAAA,CAAA,UAIA3B,EAAA,EAAAY,EAAAA,EAAA,KAAA,CAAAc,EAAAC,IAAAA,EAAA,aAAAD,EAAA,YAAA,CAAA,WAEA1B,EAAA,EAAAY,EAAAA,EAAA,KAAA,CAAAc,EAAAC,IAAAA,EAAA,cAAAD,EAAA,aAAA,CAAA,cAKFV,GAAAC,GAAAC,EAAA,KAAAU,EAAAV,CAAA,wCAIIW,EAAA,IAAA,CACJ9C,GAAA+C,EAAA,sBAAA,GAGFC,GAAA,IAAA,4CAGMC,GACFhB,GAAAC,GAAAC,EAAA,KAAAc,EAAAd,CAAA,sDA+C+B,MAAAnB,EAAA,IAAAkC,EAAA,MAAA,EAIA7B,EAAA,IAAA6B,EAAA,MAAA,qIA9CnCpB,EAAAlB,EAAA,GAAAN,EAAA,EAAA"}