{"version":3,"file":"46.226004b7.js","sources":["../../../../../../src/lib/components/Org/Settings/TeamMembers.svelte","../../../../../../src/routes/org/[slug]/settings/teams/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { Grid, Row, Column, Select, SelectItem } from 'carbon-components-svelte';\n  import { Moon } from 'svelte-loading-spinners';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import TextChip from '$lib/components/Chip/Text.svelte';\n  import ComingSoon from '$lib/components/ComingSoon/index.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { VARIANTS } from '$lib/components/PrimaryButton/constants';\n  import { validateEmailInString } from '$lib/utils/functions/validator';\n  import { ROLE_LABEL, ROLE } from '$lib/utils/constants/roles';\n  import { currentOrg, orgTeam } from '$lib/utils/store/org';\n  import { snackbar } from '$lib/components/Snackbar/store';\n  import { getOrgTeam } from '$lib/utils/services/org';\n  import { profile } from '$lib/utils/store/user';\n  import { supabase } from '$lib/utils/functions/supabase';\n  import SectionTitle from '../SectionTitle.svelte';\n  import {\n    triggerSendEmail,\n    NOTIFICATION_NAME\n  } from '$lib/utils/services/notification/notification';\n  import { isFreePlan } from '$lib/utils/store/org';\n  import type { OrgTeamMember } from '$lib/utils/types/org';\n  import { t } from '$lib/utils/functions/translations';\n\n  let emailsStr = '';\n  let errorMessage = '';\n  let role = ROLE.TUTOR;\n  let isFetching = false;\n  let isLoading = false;\n  let isRemoving: number | null = null;\n\n  async function onSendInvite() {\n    const { hasError, error: _error, emails } = validateEmailInString(emailsStr);\n\n    if (hasError) {\n      errorMessage = _error;\n      return;\n    }\n\n    isLoading = true;\n    let apiError = '';\n    emails.forEach(async (email: string, index: number) => {\n      if (apiError) return;\n\n      const doesEmailExist = $orgTeam.some(\n        (teamMember) => teamMember.email.toLowerCase() === email.toLowerCase()\n      );\n\n      if (doesEmailExist) {\n        snackbar.error('snackbar.team_members.user_exists');\n        isLoading = false;\n        return;\n      }\n      const { data, error } = await supabase\n        .from('organizationmember')\n        .insert({\n          organization_id: $currentOrg.id,\n          email,\n          role_id: role,\n          verified: false\n        })\n        .select();\n      console.log('data', data);\n\n      if (error) {\n        apiError = `${error}`;\n\n        console.error('onSendInvite:', error);\n        snackbar.error(`snackbar.team_members.invite_fail`);\n        isLoading = false;\n        return;\n      }\n      const [newMember] = data || [];\n      if (newMember) {\n        orgTeam.update((team) => [\n          {\n            id: newMember.id,\n            email: newMember?.email,\n            fullname: newMember?.fullname || '',\n            verified: newMember?.verified,\n            role: ROLE_LABEL[newMember?.role_id] || '',\n            isAdmin: newMember?.role_id === ROLE.ADMIN\n          },\n          ...team\n        ]);\n      }\n\n      // triggerSendEmail(NOTIFICATION_NAME.INVITE_TEACHER, {\n      //   email: newMember.email,\n      //   org: {\n      //     id: $currentOrg.id,\n      //     name: $currentOrg.name,\n      //     siteName: $currentOrg.siteName\n      //   }\n      // });\n\n      const isLast = index === emails.length - 1;\n      if (isLast) {\n        snackbar.success('snackbar.team_members.invite_sent');\n\n        emailsStr = '';\n        isLoading = false;\n      }\n    });\n  }\n\n  async function onRemove(id: number) {\n    console.log('onRemove called');\n    isRemoving = id;\n    const { error } = await supabase.from('organizationmember').delete().match({ id });\n\n    if (error) {\n      console.error('onRemove:', error);\n      snackbar.error('snackbar.team_members.remove_fail');\n    } else {\n      orgTeam.update((team) => [...team.filter((member) => member.id !== id)]);\n    }\n\n    isRemoving = null;\n  }\n\n  const fetchTeam = async (id: string) => {\n    if (!id) return;\n\n    isFetching = true;\n    await getOrgTeam(id);\n    isFetching = false;\n  };\n\n  const isTeamMemberAdmin = (members: OrgTeamMember[], profileId: string | undefined) => {\n    return members.some((member) => member.profileId === profileId && member.isAdmin);\n  };\n\n  $: fetchTeam($currentOrg.id);\n</script>\n\n<Grid class=\"border rounded border-gray-200 dark:border-neutral-600 w-full mt-5 relative\">\n  <Row class=\"py-7 border-bottom-c\">\n    <Column sm={2} md={2} lg={4} class=\"text-lg\"\n      ><SectionTitle>{$t('course.navItem.people.teams.add')}</SectionTitle></Column\n    >\n    <Column sm={2} md={6} lg={8}>\n      <p class=\"text-md text-gray-500 dark:text-white mb-5\">\n        {$t('course.navItem.people.teams.add_team')}\n      </p>\n\n      <div class=\"\">\n        <TextField\n          label={$t('course.navItem.people.teams.invite')}\n          placeholder={$t('course.navItem.people.teams.placeholder')}\n          bind:value={emailsStr}\n          className=\"mb-3\"\n          isDisabled={$isFreePlan}\n          {errorMessage}\n        />\n\n        <Select\n          labelText={$t('course.navItem.people.teams.role')}\n          bind:selected={role}\n          class=\"mb-5 w-40\"\n          disabled={$isFreePlan}\n        >\n          <SelectItem value={ROLE.ADMIN} text={$t(ROLE_LABEL[ROLE.ADMIN])} />\n          <SelectItem value={ROLE.TUTOR} text={$t(ROLE_LABEL[ROLE.TUTOR])} />\n        </Select>\n\n        <PrimaryButton\n          label={$t('course.navItem.people.teams.send_invite')}\n          onClick={onSendInvite}\n          {isLoading}\n          isDisabled={isLoading || $isFreePlan}\n        />\n      </div>\n    </Column>\n  </Row>\n\n  <Row class=\"py-7 border-bottom-c\">\n    <Column sm={2} md={2} lg={4} class=\"text-lg\"\n      ><SectionTitle>{$t('course.navItem.people.teams.members')}</SectionTitle></Column\n    >\n    <Column sm={2} md={6} lg={8}>\n      {#if isFetching}\n        <Moon />\n      {:else}\n        {#each $orgTeam as teamMember}\n          <div class=\"flex justify-between items-center mb-5\">\n            <div class=\"flex\">\n              <p class=\"text-sm text-gray-500 dark:text-white mr-3\">\n                {teamMember.email}\n              </p>\n              <TextChip value={$t(teamMember.role)} className=\"text-xs mr-3\" size=\"sm\" />\n              {#if !teamMember.verified}\n                <TextChip\n                  value={$t('course.navItem.people.teams.invite_sent')}\n                  className=\"text-xs bg-yellow-200 text-yellow-700\"\n                  size=\"sm\"\n                />\n              {:else if teamMember.profileId === $profile.id}\n                <ComingSoon label={$t('course.navItem.people.teams.you')} />\n              {/if}\n            </div>\n            {#if teamMember.profileId !== $profile.id && isTeamMemberAdmin($orgTeam, $profile.id)}\n              <PrimaryButton\n                label={$t('course.navItem.people.teams.remove')}\n                variant={VARIANTS.TEXT_DANGER}\n                onClick={() => onRemove(teamMember.id)}\n                isLoading={isRemoving === teamMember.id}\n                isDisabled={isRemoving === teamMember.id}\n              />\n            {/if}\n          </div>\n        {/each}\n      {/if}\n    </Column>\n  </Row>\n</Grid>\n","<script>\n  import TeamMembers from '$lib/components/Org/Settings/TeamMembers.svelte';\n  import { currentOrgPath } from '$lib/utils/store/org';\n  import UpgradeBanner from '$lib/components/Upgrade/Banner.svelte';\n  import { t } from '$lib/utils/functions/translations';\n</script>\n\n<svelte:head>\n  <title>Teams - KinetsHub</title>\n</svelte:head>\n\n<section class=\"w-full md:max-w-4xl mx-auto\">\n  <div class=\"py-10 px-3 md:px-5\">\n    <a class=\"text-gray-500 dark:text-white text-md\" href={`${$currentOrgPath}/settings?tab=org`}\n      >{$t('upgrade.back')}</a\n    >\n    <div class=\"flex items-center justify-between mb-10\">\n      <h1 class=\"dark:text-white text-3xl font-bold\">{$t('upgrade.team_members')}</h1>\n    </div>\n\n    <UpgradeBanner>{$t('upgrade.team')}</UpgradeBanner>\n    <TeamMembers />\n  </div>\n</section>\n"],"names":["t_1_value","ctx","dirty","set_data","t_1","ROLE","ROLE_LABEL","selectitem0_changes","selectitem1_changes","t0_value","current","t0","textfield_changes","select_changes","primarybutton_changes","comingsoon_changes","textchip_changes","VARIANTS","show_if","role","onSendInvite","hasError","_error","emails","validateEmailInString","emailsStr","email","index","apiError","$orgTeam","teamMember","snackbar","data","error","supabase","$currentOrg","newMember","orgTeam","team","id","member","getOrgTeam","isTeamMemberAdmin","members","profileId","t1_value","t3_value","t1","t3"],"mappings":"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"}