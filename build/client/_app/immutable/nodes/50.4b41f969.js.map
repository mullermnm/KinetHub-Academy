{"version":3,"file":"50.4b41f969.js","sources":["../../../../../../src/routes/signup/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { goto } from '$app/navigation';\n  import { page } from '$app/stores';\n  import TextField from '$lib/components/Form/TextField.svelte';\n  import PrimaryButton from '$lib/components/PrimaryButton/index.svelte';\n  import { getSupabase } from '$lib/utils/functions/supabase';\n  import {\n    authValidation,\n    getConfirmPasswordError,\n    getDisableSubmit\n  } from '$lib/utils/functions/validator';\n  import { SIGNUP_FIELDS } from '$lib/utils/constants/authentication';\n  import AuthUI from '$lib/components/AuthUI/index.svelte';\n  import { profile } from '$lib/utils/store/user';\n  import { currentOrg } from '$lib/utils/store/org';\n  import { capturePosthogEvent } from '$lib/utils/services/posthog';\n  import { globalStore } from '$lib/utils/store/app';\n  import SenjaEmbed from '$lib/components/Senja/Embed.svelte';\n\n  let supabase = getSupabase();\n  let fields = Object.assign({}, SIGNUP_FIELDS);\n  let loading = false;\n  let success = false;\n  let errors: {\n    email?: string;\n    password?: string;\n    confirmPassword?: string;\n  } = {};\n  let submitError: string;\n  let disableSubmit = false;\n  let formRef: HTMLFormElement;\n\n  let query = new URLSearchParams($page.url.search);\n  let redirect = query.get('redirect');\n\n  async function handleSubmit() {\n    const validationRes = authValidation(fields);\n    console.log('validationRes', validationRes);\n\n    if (Object.keys(validationRes).length) {\n      errors = Object.assign(errors, validationRes);\n      return;\n    }\n\n    try {\n      loading = true;\n\n      const {\n        data: { session },\n        error\n      } = await supabase.auth.signUp({\n        email: fields.email,\n        password: fields.password\n      });\n      console.log('session', session);\n\n      if (error) throw error;\n\n      const { user: authUser } = session || {};\n      if (!authUser) {\n        throw 'Error creating user';\n      }\n\n      if (!$currentOrg.id) return;\n\n      const [regexUsernameMatch] = [...(authUser.email?.matchAll(/(.*)@/g) || [])];\n      const response = await fetch('https://api.ipregistry.co/?key=tryout');\n      const metadata = await response.json();\n\n      const profileRes = await supabase\n        .from('profile')\n        .insert({\n          id: authUser.id,\n          username: regexUsernameMatch[1] + `${new Date().getTime()}`,\n          fullname: regexUsernameMatch[1],\n          email: authUser.email,\n          metadata\n        })\n        .select();\n      console.log('profileRes', profileRes);\n\n      if (profileRes.error) {\n        throw profileRes.error;\n      }\n\n      // Setting profile\n      console.log('setting profile', profileRes.data[0]);\n      profile.set(profileRes.data[0]);\n\n      capturePosthogEvent('user_signed_up', {\n        distinct_id: $profile.id || '',\n        email: authUser.email,\n        username: regexUsernameMatch[1],\n        metadata\n      });\n\n      if ($globalStore.isOrgSite) {\n        capturePosthogEvent('student_signed_up', {\n          distinct_id: $profile.id || '',\n          email: authUser.email,\n          username: regexUsernameMatch[1],\n          metadata\n        });\n      }\n\n      if (redirect) {\n        goto(redirect);\n      } else {\n        goto('/login');\n      }\n\n      formRef?.reset();\n      success = true;\n      fields = Object.assign({}, SIGNUP_FIELDS);\n    } catch (error) {\n      submitError = error?.error_description || error?.message;\n      loading = false;\n    }\n  }\n\n  $: errors.confirmPassword = getConfirmPasswordError(fields);\n  $: disableSubmit = getDisableSubmit(fields);\n</script>\n\n<svelte:head>\n  <title>Join KinetsHub</title>\n</svelte:head>\n\n<!-- <SenjaEmbed id=\"aa054658-1e15-4d00-8920-91f424326c4e\" /> -->\n\n<AuthUI {supabase} isLogin={false} {handleSubmit} isLoading={loading} bind:formRef>\n  <div class=\"mt-4 w-full\">\n    <p class=\"dark:text-white text-lg font-semibold mb-6\">Create a free account</p>\n    <!-- <TextField\n      label=\"Full Name\"\n      bind:value={fields.name}\n      type=\"text\"\n      autoFocus={true}\n      placeholder=\"e.g Joke Silva\"\n      className=\"mb-6\"\n      inputClassName=\"w-full\"\n      isDisabled={loading}\n      errorMessage={errors.name}\n      isRequired\n    /> -->\n    <TextField\n      label=\"Your Email\"\n      bind:value={fields.email}\n      type=\"email\"\n      placeholder=\"you@domain.com\"\n      className=\"mb-6\"\n      inputClassName=\"w-full\"\n      isDisabled={loading}\n      errorMessage={errors.email}\n      isRequired\n    />\n    <TextField\n      label=\"Your Password\"\n      bind:value={fields.password}\n      type=\"password\"\n      placeholder=\"************\"\n      className=\"mb-6\"\n      inputClassName=\"w-full\"\n      isDisabled={loading}\n      errorMessage={errors.password}\n      helperMessage=\"Password must be more than 6 characters\"\n      isRequired\n    />\n    <TextField\n      label=\"Confirm Password\"\n      bind:value={fields.confirmPassword}\n      type=\"password\"\n      placeholder=\"************\"\n      className=\"mb-6\"\n      inputClassName=\"w-full\"\n      isDisabled={loading}\n      errorMessage={errors.confirmPassword}\n      isRequired\n    />\n    {#if submitError}\n      <p class=\"text-sm text-red-500\">{submitError}</p>\n    {/if}\n  </div>\n\n  <div class=\"my-4 w-full flex justify-end items-center\">\n    <PrimaryButton\n      label=\"Create Account\"\n      type=\"submit\"\n      className=\"sm:w-full w-full\"\n      isDisabled={disableSubmit || loading}\n      isLoading={loading}\n    />\n  </div>\n</AuthUI>\n"],"names":["ctx","textfield0_props","textfield1_props","textfield2_props","dirty","textfield0_changes","textfield1_changes","textfield2_changes","primarybutton_changes","errors","submitError","formRef","handleSubmit","validationRes","authValidation","fields","authUser","session","regexUsernameMatch","_a","metadata","profileRes","$profile","redirect","goto","error","$$self","value"],"mappings":"ipDAyJoB,aAAAA,EAAA,CAAA,EAAA,qBANFA,EAAA,CAAA,EAAA,QAAA,SAAAC,EAAA,MAAAD,EAAA,CAAA,EAAA,4MAiBE,aAAAA,EAAA,CAAA,EAAA,gFANFA,EAAA,CAAA,EAAA,WAAA,SAAAE,EAAA,MAAAF,EAAA,CAAA,EAAA,mNAkBE,aAAAA,EAAA,CAAA,EAAA,+BANFA,EAAA,CAAA,EAAA,kBAAA,SAAAG,EAAA,MAAAH,EAAA,CAAA,EAAA,2KAmBA,WAAAA,EAAA,CAAA,GAAAA,EAAA,CAAA,k0BApCEI,EAAA,IAAAC,EAAA,aAAAL,EAAA,CAAA,EAAA,sBANFK,EAAA,MAAAL,EAAA,CAAA,EAAA,iEAiBEI,EAAA,IAAAE,EAAA,aAAAN,EAAA,CAAA,EAAA,yBANFM,EAAA,MAAAN,EAAA,CAAA,EAAA,oEAkBEI,EAAA,IAAAG,EAAA,aAAAP,EAAA,CAAA,EAAA,gCANFO,EAAA,MAAAP,EAAA,CAAA,EAAA,iHAmBAI,EAAA,KAAAI,EAAA,WAAAR,EAAA,CAAA,GAAAA,EAAA,CAAA,ikCAtKZS,EAAA,CAAA,EAKAC,OAEAC,sDAKW,eAAAC,GAAA,OACP,MAAAC,EAAAC,GAAAC,CAAA,+JAeF,MAAAA,EAAA,MACA,SAAAA,EAAA,iDAMM,KAAA,CAAA,KAAAC,CAAA,EAAAC,GAAA,CAAA,EACH,GAAA,CAAAD,EACG,KAAA,sCAKD,KAAA,CAAAE,CAAA,EAAA,CAAA,KAAAC,EAAAH,EAAA,QAAA,YAAAG,EAAA,SAAA,YAAA,CAAA,CAAA,EAEDC,EAAA,MADA,MAAA,MAAA,uCAAA,GACA,KAAA,oCAKF,GAAAJ,EAAA,2CAEA,SAAAE,EAAA,CAAA,EACA,MAAAF,EAAA,MACA,SAAAI,CAED,CAAA,EAAA,OAAA,uDAQH,QAAA,IAAA,kBAAAC,EAAA,KAAA,CAAA,CAAA,wCAIE,YAAAC,EAAA,IAAA,GACA,MAAAN,EAAA,MACA,SAAAE,EAAA,CAAA,EACA,SAAAE,yCAKE,YAAAE,EAAA,IAAA,GACA,MAAAN,EAAA,MACA,SAAAE,EAAA,CAAA,EACA,SAAAE,IAIAG,EACFC,EAAAD,CAAA,EAEAC,EAAA,QAAA,oDAMK,OAAAC,EAAA,kGAiCKC,EAAA,GAAA,UAAAX,EAAA,MAAAY,CAAA,IAAAZ,EAAA,MAAAY,wBAWAD,EAAA,GAAA,UAAAX,EAAA,SAAAY,CAAA,IAAAZ,EAAA,SAAAY,wBAYAD,EAAA,GAAA,UAAAX,EAAA,gBAAAY,CAAA,IAAAZ,EAAA,gBAAAY"}