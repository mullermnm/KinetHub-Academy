{"version":3,"file":"_server-75a1db90.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/completion/gradingprompt/_server.js"],"sourcesContent":[";\n!function() {\n  try {\n    var e = \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {}, n = new Error().stack;\n    n && (e._sentryDebugIds = e._sentryDebugIds || {}, e._sentryDebugIds[n] = \"ac94fa32-9626-4b35-a41e-1076a24f5f97\", e._sentryDebugIdIdentifier = \"sentry-dbid-ac94fa32-9626-4b35-a41e-1076a24f5f97\");\n  } catch (e2) {\n  }\n}();\nimport { b as private_env } from \"../../../../../chunks/shared-server.js\";\nimport { O as OpenAIStream, S as StreamingTextResponse } from \"../../../../../chunks/index3.js\";\nimport { Configuration, OpenAIApi } from \"openai-edge\";\nimport \"../../../../../chunks/_sentry-release-injection-file.js\";\nconst openAIConfig = new Configuration({\n  apiKey: private_env.OPENAI_API_KEY\n});\nconst openai = new OpenAIApi(openAIConfig);\nconst config = {\n  runtime: \"edge\"\n};\nasync function POST({ request }) {\n  const { prompt } = await request.json();\n  const response = await openai.createChatCompletion({\n    model: \"gpt-4o\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"You are a teaching assistant, you only spit out JSON and nothing else, dont give any explanation.\"\n      },\n      {\n        role: \"user\",\n        content: `\n        Given this array of objects below, there are 4 keys , id, question, answer and  points. You are required to come up with a score between 0 and the point for each answer provided to the question and a simple explanation for giving that score, you are to return an array of object in json with the following keys; id which is the id provided for that object in the initial array, score which is the value you gave for that question and then your explanation in this format below:\n\n        {\n          id,\n          score,\n          explanation,\n        }\n      \n        IMPORTANT: DO NOT GIVE ANY OTHER TEXT EXCEPT THE JSON\n\n        The array you need to grade is below: \n        ${prompt}\n        `\n      }\n    ],\n    stream: true\n  });\n  const stream = OpenAIStream(response);\n  return new StreamingTextResponse(stream);\n}\nexport {\n  POST,\n  config\n};\n//# sourceMappingURL=_server.js.map\n"],"names":[],"mappings":";;;;;AACA,CAAC,WAAW;AACZ,EAAE,IAAI;AACN,IAAI,IAAI,CAAC,GAAG,WAAW,IAAI,OAAO,MAAM,GAAG,MAAM,GAAG,WAAW,IAAI,OAAO,MAAM,GAAG,MAAM,GAAG,WAAW,IAAI,OAAO,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;AAC1J,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,IAAI,EAAE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,sCAAsC,EAAE,CAAC,CAAC,wBAAwB,GAAG,kDAAkD,CAAC,CAAC;AACvM,GAAG,CAAC,OAAO,EAAE,EAAE;AACf,GAAG;AACH,CAAC,EAAE,CAAC;AAKJ,MAAM,YAAY,GAAG,IAAI,aAAa,CAAC;AACvC,EAAE,MAAM,EAAE,WAAW,CAAC,cAAc;AACpC,CAAC,CAAC,CAAC;AACH,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;AACtC,MAAC,MAAM,GAAG;AACf,EAAE,OAAO,EAAE,MAAM;AACjB,EAAE;AACF,eAAe,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE;AACjC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;AAC1C,EAAE,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;AACrD,IAAI,KAAK,EAAE,QAAQ;AACnB,IAAI,QAAQ,EAAE;AACd,MAAM;AACN,QAAQ,IAAI,EAAE,QAAQ;AACtB,QAAQ,OAAO,EAAE,mGAAmG;AACpH,OAAO;AACP,MAAM;AACN,QAAQ,IAAI,EAAE,MAAM;AACpB,QAAQ,OAAO,EAAE,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,EAAE,MAAM,CAAC;AACjB,QAAQ,CAAC;AACT,OAAO;AACP,KAAK;AACL,IAAI,MAAM,EAAE,IAAI;AAChB,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AACxC,EAAE,OAAO,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAC3C;;;;"}