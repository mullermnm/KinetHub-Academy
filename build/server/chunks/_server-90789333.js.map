{"version":3,"file":"_server-90789333.js","sources":["../../../.svelte-kit/adapter-node/entries/endpoints/api/completion/_server.js"],"sourcesContent":[";\n!function() {\n  try {\n    var e = \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {}, n = new Error().stack;\n    n && (e._sentryDebugIds = e._sentryDebugIds || {}, e._sentryDebugIds[n] = \"e4c31dab-cfc5-497e-8e83-899344609a54\", e._sentryDebugIdIdentifier = \"sentry-dbid-e4c31dab-cfc5-497e-8e83-899344609a54\");\n  } catch (e2) {\n  }\n}();\nimport { Configuration, OpenAIApi } from \"openai-edge\";\nimport { O as OpenAIStream, S as StreamingTextResponse } from \"../../../../chunks/index3.js\";\nimport { b as private_env } from \"../../../../chunks/shared-server.js\";\nimport \"../../../../chunks/_sentry-release-injection-file.js\";\nconst openAIConfig = new Configuration({\n  apiKey: private_env.OPENAI_API_KEY\n});\nconst openai = new OpenAIApi(openAIConfig);\nconst config = {\n  runtime: \"edge\"\n};\nconst instruction = {\n  outline: \"a structured lesson outline\",\n  note: \"a sample lesson note\",\n  activities: \"few interactive lesson activities to my lecture\"\n};\nasync function POST({ request }) {\n  const { prompt } = await request.json();\n  const { courseTitle, lessonTitle, type, locale } = JSON.parse(prompt);\n  const response = await openai.createChatCompletion({\n    model: \"gpt-4o\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"Act like an assistant of a lecturer\"\n      },\n      {\n        role: \"user\",\n        content: `Generate ${instruction[type]} given the course title is \"${courseTitle}\" and the title of the lesson is \"${lessonTitle}\". Format in HTML without any styling. MOST IMPORTANT DON'T include the title of the course and don't include the lesson title: \"${lessonTitle}\" in your output. Please make sure the content is well detailed and you output the content in this locale: ${locale}`\n      }\n    ],\n    stream: true\n  });\n  const stream = OpenAIStream(response);\n  return new StreamingTextResponse(stream);\n}\nexport {\n  POST,\n  config\n};\n//# sourceMappingURL=_server.js.map\n"],"names":[],"mappings":";;;;;AACA,CAAC,WAAW;AACZ,EAAE,IAAI;AACN,IAAI,IAAI,CAAC,GAAG,WAAW,IAAI,OAAO,MAAM,GAAG,MAAM,GAAG,WAAW,IAAI,OAAO,MAAM,GAAG,MAAM,GAAG,WAAW,IAAI,OAAO,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;AAC1J,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,IAAI,EAAE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,sCAAsC,EAAE,CAAC,CAAC,wBAAwB,GAAG,kDAAkD,CAAC,CAAC;AACvM,GAAG,CAAC,OAAO,EAAE,EAAE;AACf,GAAG;AACH,CAAC,EAAE,CAAC;AAKJ,MAAM,YAAY,GAAG,IAAI,aAAa,CAAC;AACvC,EAAE,MAAM,EAAE,WAAW,CAAC,cAAc;AACpC,CAAC,CAAC,CAAC;AACH,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;AACtC,MAAC,MAAM,GAAG;AACf,EAAE,OAAO,EAAE,MAAM;AACjB,EAAE;AACF,MAAM,WAAW,GAAG;AACpB,EAAE,OAAO,EAAE,6BAA6B;AACxC,EAAE,IAAI,EAAE,sBAAsB;AAC9B,EAAE,UAAU,EAAE,iDAAiD;AAC/D,CAAC,CAAC;AACF,eAAe,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE;AACjC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;AAC1C,EAAE,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACxE,EAAE,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,oBAAoB,CAAC;AACrD,IAAI,KAAK,EAAE,QAAQ;AACnB,IAAI,QAAQ,EAAE;AACd,MAAM;AACN,QAAQ,IAAI,EAAE,QAAQ;AACtB,QAAQ,OAAO,EAAE,qCAAqC;AACtD,OAAO;AACP,MAAM;AACN,QAAQ,IAAI,EAAE,MAAM;AACpB,QAAQ,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,4BAA4B,EAAE,WAAW,CAAC,kCAAkC,EAAE,WAAW,CAAC,iIAAiI,EAAE,WAAW,CAAC,2GAA2G,EAAE,MAAM,CAAC,CAAC;AAC7Y,OAAO;AACP,KAAK;AACL,IAAI,MAAM,EAAE,IAAI;AAChB,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AACxC,EAAE,OAAO,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC;AAC3C;;;;"}